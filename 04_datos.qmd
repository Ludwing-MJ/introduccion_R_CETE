# Estructuras de datos en R

Las estructuras de datos constituyen la base fundamental para el trabajo estadístico y científico en R, ya que permiten organizar, almacenar y manipular información de manera sistemática y eficiente. Gracias a estas estructuras, es posible gestionar desde datos simples, como valores individuales, hasta conjuntos complejos y heterogéneos, adaptándose a las necesidades de distintos tipos de análisis. El dominio de las estructuras de datos facilita la realización de operaciones estadísticas, la transformación de información y la generación de visualizaciones precisas. En R, las principales estructuras de datos incluyen los vectores, matrices, data frames y listas, cada una diseñada para resolver problemas específicos y optimizar el flujo de trabajo en el análisis de datos (R Core Team, 2023).

## Vectores

Los vectores representan la estructura de datos más fundamental en R, actuando como bloques de construcción para estructuras más complejas como matrices y data frames. Un vector se define como una secuencia ordenada de elementos del mismo tipo (numérico, texto, lógico), organizados de manera unidimensional. Esta característica de homogeneidad en el tipo de datos garantiza la eficiencia y consistencia en las operaciones analíticas (Ihaka & Gentleman, 1996).

### Tipos de Vectores y su Creación

En R, la función `c()` (concatenar) es la herramienta principal para crear vectores. Esta función permite combinar elementos individuales o incluso otros vectores. Los tipos más comunes de vectores incluyen:

```{r}
# Vectores numéricos
edades <- c(17, 20, 18, 25)          # Enteros
alturas <- c(1.75, 1.68, 1.82, 1.65) # Decimales

# Vectores de texto (character)
nombres <- c("Juan", "Ana", "Luis", "María")

# Vectores lógicos
# Creados usando la función c()
mayores_de_edad <- c(FALSE, TRUE, TRUE, TRUE)
# O mediante una comparación empleando operadores lógicos  
mayores_de_edad <- edades >= 18
```

En estos ejemplos:

1.  El vector `edades` almacena valores numéricos.

2.  El vector `nombres` contiene cadenas de texto.

3.  El vector `mayores_de_edad` almacena valores lógicos (`TRUE` o `FALSE`) que resultan de una comparación lógica.

**Nota importante:** R convertirá automáticamente todos los elementos al tipo más general si se intentan combinar diferentes tipos de datos en un mismo vector. Por ejemplo:

```{r}
# Mezcla de números y texto
vector_mixto <- c(1, 2, "tres")
# R convertirá todo a texto: "1" "2" "tres"
```

### Operaciones con Vectores

Los vectores en R permiten realizar una amplia variedad de operaciones matemáticas, lógicas y de manipulación de datos. Estas operaciones son fundamentales para el análisis estadístico y la transformación de datos. A continuación, se describen algunas de las operaciones más comunes:

#### **Acceso a elementos específicos**

Se pueden acceder a elementos individuales de un vector utilizando índices entre corchetes (`[]`). Los índices en R comienzan en 1.

```{r}
# Acceder a elementos individuales
primer_nombre <- nombres[1]    # "Juan"
ultima_edad <- edades[4]       # 25

# Acceder a múltiples elementos
nombres_seleccionados <- nombres[c(1, 3)]  # "Juan" "Luis"
```

En este ejemplo, `edades[1]` devuelve el primer elemento del vector `edades`, que es `17`.

#### **Filtrado de elementos**

Es posible filtrar elementos de un vector aplicando condiciones lógicas. Esto resulta útil para seleccionar subconjuntos de datos.

```{r}
# Filtrar personas mayores de 20 años
mayores_20 <- edades[edades > 20]

# Obtener nombres de personas mayores de 20
nombres_mayores_20 <- nombres[edades > 20]
```

En este caso, la condición `edades > 20` devuelve un vector con los valores que cumplen la condición, es decir, las edades mayores a 20.

#### **Combinación de vectores**

Los vectores pueden combinarse para crear nuevos vectores utilizando la función concatenar `c()`.

```{r}
# Combinar dos vectores
nuevo_vector <- c(edades, c(22, 21))
nuevo_vector
```

Aquí, el vector `nuevo_vector` combina los elementos del vector `edades` con los valores `22` y `21`, generando un nuevo vector.

#### Funciones Útiles para Vectores

R proporciona numerosas funciones para analizar y manipular vectores:

```{r}
# Estadísticas básicas
promedio_edades <- mean(edades)       # Media
edad_maxima <- max(edades)            # Valor máximo
edad_minima <- min(edades)            # Valor mínimo
total_elementos <- length(edades)      # Número de elementos

# Ordenamiento
edades_ordenadas <- sort(edades)      # Orden ascendente
edades_descendente <- sort(edades, decreasing = TRUE)  # Orden descendente
```

#### Aplicaciones Prácticas

Los vectores son fundamentales en análisis estadísticos básicos:

```{r}
# Análisis descriptivo
summary(edades)  # Resumen estadístico
table(mayores_de_edad)  # Tabla de frecuencias
hist(edades)  # Histograma de edades
```

Esta estructura básica permite realizar análisis preliminares de datos y sirve como fundamento para operaciones más complejas en R. La comprensión sólida de los vectores es esencial para avanzar hacia estructuras de datos más sofisticadas y análisis estadísticos más elaborados.

## Matrices

Las matrices en R son estructuras de datos bidimensionales que permiten almacenar información organizada en filas y columnas, donde todos los elementos deben ser del mismo tipo, ya sea numérico, lógico o de texto. Esta homogeneidad garantiza que las operaciones matemáticas y estadísticas se realicen de manera eficiente y sin ambigüedades. Las matrices resultan especialmente útiles en el análisis estadístico y científico, ya que muchos algoritmos y procedimientos requieren datos estructurados en dos dimensiones para su procesamiento (Ihaka & Gentleman, 1996).

A diferencia de los vectores, que solo permiten una dimensión (una sola fila o columna), las matrices ofrecen una organización más compleja y flexible, facilitando la representación de tablas de datos, resultados de experimentos, o la manipulación de grandes volúmenes de información en análisis multivariados. Por ejemplo, una matriz puede utilizarse para almacenar los resultados de mediciones repetidas en diferentes sujetos o para representar coeficientes en modelos matemáticos.

### Creación de Matrices

En R, la función principal para crear matrices es `matrix()`. Esta función permite definir el conjunto de elementos, así como el número de filas (`nrow`) y columnas (`ncol`) que tendrá la matriz. Es importante que la cantidad total de elementos coincida con el producto de filas por columnas; de lo contrario, R reciclará los valores para completar la matriz, lo que puede llevar a resultados inesperados si no se verifica cuidadosamente.

```{r}
# 1. Creación de una matriz de 3 filas y 2 columnas
matriz <- matrix(1:6, nrow = 3, ncol = 2)
print(matriz)

# 2. Creación de una matriz de caracteres
matriz_caracteres <- matrix(c("A", "B", "C", "D"), nrow = 2, ncol = 2)
print(matriz_caracteres)
```

En el primer ejemplo, la matriz llamada `matriz` almacena números enteros distribuidos en tres filas y dos columnas. En el segundo ejemplo, la matriz `matriz_caracteres` contiene cadenas de texto, también organizadas en filas y columnas.

### Manipulación de Matrices

Las matrices en R permiten realizar una amplia variedad de operaciones matemáticas y de manipulación de datos. Estas operaciones son fundamentales para el análisis estadístico y la transformación de datos. A continuación, se describen algunas de las operaciones más comunes:

#### Acceso a Elementos Específicos

Para extraer un elemento concreto de una matriz, se utilizan corchetes indicando primero la fila y luego la columna, siguiendo la sintaxis `[fila, columna]`. Es importante recordar que en R la indexación comienza en 1.

```{r}
# Acceder al elemento en la segunda fila y primera columna
elemento <- matriz[2, 1]
print(elemento)  # Imprime 2
```

En este caso, `matriz[2, 1]` selecciona el valor ubicado en la segunda fila y primera columna de la matriz, que corresponde al número 2.

#### Combinación de Matrices

R permite unir matrices para crear estructuras más grandes, utilizando las funciones `rbind()` para agregar filas y `cbind()` para agregar columnas. Esto es útil cuando se desea consolidar datos provenientes de diferentes fuentes o experimentos.

```{r}
# Crear una segunda matriz
matriz2 <- matrix(7:12, nrow = 3, ncol = 2)

# Combinar ambas matrices por filas
matriz_combinada <- rbind(matriz, matriz2)

# Resultado:
print(matriz_combinada)

```

En este ejemplo, `matriz_combinada` contiene las filas de ambas matrices, una debajo de la otra, formando una nueva matriz de mayor tamaño.

**Advertencia importante:** Todas las columnas de una matriz deben ser del mismo tipo de dato. Si se intenta combinar datos de diferentes tipos (por ejemplo, números y texto), R convertirá todos los elementos al tipo más general, lo que puede alterar la interpretación de los datos. Por ello, se recomienda verificar la consistencia de los tipos de datos antes de crear o manipular matrices.

### Aplicaciones y referencia para álgebra matricial

Las matrices son ampliamente utilizadas en operaciones de álgebra lineal, como multiplicación de matrices, cálculo de determinantes, inversas y descomposiciones, que son esenciales en modelos estadísticos avanzados y análisis multivariados. Para profundizar en el uso de matrices y su aplicación en el análisis estadístico con R, se recomienda consultar el [capítulo 20 del libro Modelos de Regresión con R](https://fhernanb.github.io/libro_regresion/algmat.html) de Hernández, Usuga y Mazo (2024), donde se aborda el álgebra matricial de manera detallada y aplicada.

## *Data frames*

El data frame es una de las estructuras de datos más importantes y versátiles en R. Se trata de una tabla bidimensional que organiza la información en filas y columnas, de manera similar a una hoja de cálculo de Excel o a una tabla en una base de datos relacional. En un data frame, cada columna corresponde a una variable y está compuesta por un vector, mientras que cada fila representa una observación o caso individual (R Core Team, 2023).

Una característica fundamental de los data frames es que cada columna puede contener un tipo de dato diferente, como números, texto (caracteres), valores lógicos o factores. Esta flexibilidad permite almacenar y analizar datos heterogéneos de manera eficiente, lo que resulta especialmente útil en contextos como encuestas, experimentos científicos, registros administrativos o cualquier conjunto de datos estructurados. Además, son compatibles con una amplia variedad de funciones y paquetes en R, lo que los convierte en la estructura más utilizada en este lenguaje (Wickham & Grolemund, 2017).

### Creación de data frames

Para crear un data frame en R, se utiliza la función `data.frame()`, que combina varios vectores de igual longitud. Es importante que todos los vectores tengan la misma cantidad de elementos, ya que cada fila del data frame representa una observación completa. A continuación, se presenta un ejemplo usando los vectores creados en la sección anterior:

```{r}
# Creación de un data frame con vectores
datos <- data.frame(nombres,  edades,  mayores_de_edad)

# Visualización del data frame
datos
```

En este ejemplo, el data frame `datos` contiene tres columnas:

1.  La columna `nombres` contiene texto.

2.  La columna `edades` almacena valores numéricos.

3.  La columna `mayores_de_edad` contiene valores lógicos (`TRUE` o `FALSE`).

### Ventajas de un data frame

Los *data frames* ofrecen múltiples ventajas que los hacen indispensables para el análisis de datos en R:

1.  **Estructura clara**: Cada fila representa una observación y cada columna una variable, lo que facilita la interpretación de los datos.

2.  **Compatibilidad**: Son compatibles con funciones estadísticas y de visualización, así como con paquetes populares como `ggplot2` y `dplyr`.

3.  **Flexibilidad**: Permiten almacenar diferentes tipos de datos en columnas, como números, texto y factores.

4.  **Facilidad de manipulación:** Existen numerosas funciones y herramientas para filtrar, seleccionar, transformar y resumir la información contenida en un data frame.

### Manipulación de data frames

R proporciona diversas formas de manipular data frames, tanto con funciones básicas como con herramientas avanzadas de paquetes especializados. A continuación, se describen algunas operaciones comunes:

#### **Acceso a columnas**

Para acceder a una columna específica, se utiliza el operador `$` seguido del nombre de la columna:

```{r}
# Acceso a la columna 'nombres'
datos$nombres

```

Esto devuelve el vector correspondiente a la columna seleccionada.

#### **Filtrado de filas**

Es posible seleccionar filas que cumplan ciertas condiciones lógicas. Por ejemplo, para obtener solo las observaciones donde la edad es mayor a 20:

```{r}
# Filtrar filas donde la edad sea mayor a 20
datos_filtrados <- datos[datos$edades > 20, ]
datos_filtrados
```

En este caso, `datos_filtrados` contendrá únicamente las filas donde la condición se cumple.

### Otras operaciones comunes

Además de acceder y filtrar datos, los data frames permiten realizar muchas otras operaciones útiles para el análisis y la organización de la información. A continuación se explican algunas de las más frecuentes, acompañadas de ejemplos y explicaciones paso a paso.

#### Agregar nuevas columnas

Es posible añadir nuevas variables a un data frame simplemente asignando un vector a un nuevo nombre de columna. Por ejemplo, si se desea agregar la altura de cada persona al data frame `datos`, se puede hacer de la siguiente manera:

```{r}
# Agregar una columna llamada 'altura' al data frame
datos$altura <- c(1.75, 1.60, 1.80, 1.65)
```

Después de esta operación, el data frame `datos` tendrá una columna adicional llamada `altura`, donde cada valor corresponde a la altura de la persona en la misma fila.

#### **Seleccionar varias columnas**

En ocasiones, es útil trabajar solo con un subconjunto de las columnas del data frame, por ejemplo, para enfocar el análisis en ciertas variables. La función `subset()` permite crear un nuevo data frame que contiene únicamente las columnas seleccionadas:

```{r}
# Crear un nuevo data frame solo con las columnas 'nombres' y 'edades'
subgrupo <- subset(datos, select = c(nombres, edades))
```

En este ejemplo, el objeto `subgrupo` contendrá únicamente las columnas `nombres` y `edades` del data frame original.

#### **Resumir información**

Para obtener una visión general rápida de los datos, R ofrece la función `summary()`, que genera un resumen estadístico de cada columna del data frame:

```{r}
# Obtener un resumen estadístico de todas las columnas del data frame
summary(datos)
```

El resultado mostrará, para cada columna, información relevante como el valor mínimo, máximo, media, mediana y, en el caso de variables de texto o lógicas, la frecuencia de cada categoría. Esta función es muy útil para explorar y comprender la estructura de los datos antes de realizar análisis más detallados.

## Listas

Las listas en R son estructuras de datos sumamente flexibles y potentes, ya que permiten almacenar elementos de diferentes tipos y longitudes dentro de un mismo objeto. A diferencia de los data frames, donde todas las columnas deben tener la misma longitud y cada columna representa una variable, en una lista cada elemento puede ser un vector, un data frame, una matriz, una función, o incluso otra lista. Esta característica hace que las listas sean ideales para guardar resultados complejos, como salidas de modelos estadísticos, colecciones de datos heterogéneos o cualquier conjunto de información que no encaje en una estructura tabular tradicional (R Core Team, 2023).

### Creación de listas

Para crear una lista en R, se utiliza la función `list()`, donde cada elemento puede tener un nombre y puede ser de cualquier tipo. Por ejemplo:

```{r}
# Crear una lista con diferentes tipos de elementos
mi_lista <- list(
  nombres = c("Juan", "Ana"),      # Vector de texto
  edades = c(18, 20),              # Vector numérico
  datos_completos = datos          # Data frame
)
```

En este ejemplo, la lista `mi_lista` contiene tres elementos:

1.  El elemento `nombres` es un vector de texto.

2.  El elemento `edades` es un vector numérico.

3.  El elemento `datos_completos` es un *data frame*.

Cada elemento de la lista puede tener un nombre, lo que facilita su identificación y acceso posterior.

### Acceso a elementos de una lista

Los elementos de una lista pueden accederse mediante su nombre o índice:

1.  **Por nombre**: Utilizando el operador `$` o corchetes dobles `[[ ]]`

```{r}
# Acceder al elemento 'nombres' usando $
mi_lista$nombres

# Acceder al elemento 'nombres' usando corchetes dobles
mi_lista[["nombres"]]
```

Ambas formas devuelven el vector de nombres almacenado en la lista.

2.  **Por índice**: Utilizando corchetes dobles `[[ ]]`:

```{r}
# Acceder al primer elemento de la lista (en este caso, el vector de nombres)
mi_lista[[1]]
```

Esto es útil cuando se desconoce el nombre del elemento, pero se conoce su posición dentro de la lista.

**Advertencia importante:** Si se utilizan corchetes simples `[ ]` para acceder a un elemento de la lista, el resultado será una sublista (es decir, una lista que contiene el elemento seleccionado), no el elemento en sí. Para obtener directamente el contenido, siempre utilice corchetes dobles `[[ ]]` o el operador `$` si el elemento tiene nombre.

```{r}
# Devuelve una sublista
mi_lista[1]

# Devuelve el elemento directamente
mi_lista[[1]]
```

### Aplicaciones prácticas

Las listas en R resultan especialmente valiosas cuando se requiere almacenar y organizar resultados complejos derivados de análisis estadísticos. Por ejemplo, al ajustar un modelo de regresión, la función `lm()` devuelve una lista que contiene los coeficientes estimados, los residuos, los valores ajustados y otros diagnósticos relevantes. Esta estructura permite acceder fácilmente a cada componente del análisis para su interpretación o procesamiento posterior (R Core Team, 2023).

Además, las listas son ideales para agrupar diferentes tipos de datos relacionados en un solo objeto, como vectores, data frames, matrices o incluso otras listas. Esta capacidad de contener elementos heterogéneos facilita la gestión de información en proyectos de análisis de datos, donde es común trabajar con resultados de distintas etapas o fuentes (Wickham & Grolemund, 2017).

## Comparación entre *Data Frames* y Listas

En R, los data frames y las listas son estructuras de datos esenciales, pero se diferencian en su organización y aplicaciones. Los data frames están diseñados para almacenar datos tabulares, donde cada columna puede contener un tipo de dato distinto y cada fila representa una observación, lo que los hace ideales para análisis estadísticos y visualización de datos estructurados. Por otro lado, las listas permiten almacenar elementos de cualquier tipo y longitud, lo que proporciona flexibilidad para manejar resultados complejos o heterogéneos, como salidas de modelos, pruebas estadísticas o combinaciones de diferentes estructuras de datos.

La siguiente tabla resume las diferencias principales:

| **Característica** | **Data Frame** | **Lista** |
|------------------------|------------------------|------------------------|
| **Estructura** | Tabular (filas y columnas) | Colección de objetos heterogéneos |
| **Tipos de datos** | Columnas con tipos diferentes | Elementos de cualquier tipo |
| **Uso principal** | Análisis estadístico y visualización | Almacenamiento de resultados complejos |
| **Acceso a elementos** | Por columnas o índices | Por nombres o índices |

La elección entre ambas estructuras depende del tipo de información y del objetivo del análisis. Para datos tabulares, como encuestas o resultados experimentales, se recomienda el uso de data frames. En cambio, para almacenar y manipular resultados complejos o combinaciones de diferentes tipos de datos, las listas resultan más apropiadas (R Core Team, 2023; Wickham & Grolemund, 2017).
