# Estructuras de datos en R

En R, las estructuras de datos son esenciales para organizar, almacenar y manipular información de manera eficiente. Estas estructuras permiten trabajar con diferentes tipos de datos, desde valores individuales hasta colecciones complejas, facilitando el análisis estadístico y la visualización de datos. Entre las principales estructuras de datos en R se encuentran los *vectores*, *matrices,* *data frames* y *listas*, cada una con características específicas que las hacen adecuadas para distintas tareas (R Core Team, 2023).

## Vectores

Un vector es la estructura de datos más básica y fundamental en R. Es una colección ordenada de elementos del mismo tipo, como números, texto o valores lógicos. Los vectores son unidimensionales, lo que significa que los datos se almacenan en una sola fila o columna. Por ejemplo, un vector puede representar una lista de edades, nombres o resultados de un experimento (Ihaka & Gentleman, 1996).

Los vectores son esenciales en R porque muchas otras estructuras de datos, como los *data frames* y las *matrices*, están construidas a partir de ellos. Una característica clave de los vectores es que todos sus elementos deben ser del mismo tipo de dato, lo que garantiza consistencia en las operaciones realizadas sobre ellos.

### Creación de vectores

Para crear un vector en R, se utiliza la función `c()`, que permite combinar elementos separados por comas. A continuación, se presentan ejemplos de creación de vectores de diferentes tipos:

```{r}
# 1. Creación de un vector numérico
edades <- c(17, 20, 18, 25)

# 2. Creación de un vector de texto
nombres <- c("Juan", "Ana", "Luis", "María")

# 3. Creación de un vector lógico
mayores_de_edad <- edades >= 18
```

En estos ejemplos:

1.  El vector `edades` almacena valores numéricos.

2.  El vector `nombres` contiene cadenas de texto.

3.  El vector `mayores_de_edad` almacena valores lógicos (`TRUE` o `FALSE`) que resultan de una comparación lógica.

### Manipulación de vectores

Los vectores en R permiten realizar una amplia variedad de operaciones matemáticas, lógicas y de manipulación de datos. Estas operaciones son fundamentales para el análisis estadístico y la transformación de datos. A continuación, se describen algunas de las operaciones más comunes:

#### **Acceso a elementos específicos**

Se pueden acceder a elementos individuales de un vector utilizando índices entre corchetes (`[]`). Los índices en R comienzan en 1.

```{r}
# Acceder al primer elemento del vector
edades[1]
```

En este ejemplo, `edades[1]` devuelve el primer elemento del vector `edades`, que es `17`.

#### **Filtrado de elementos**

Es posible filtrar elementos de un vector aplicando condiciones lógicas. Esto resulta útil para seleccionar subconjuntos de datos.

```{r}
# Filtrar edades mayores a 20
edades[edades > 20]
```

En este caso, la condición `edades > 20` devuelve un vector con los valores que cumplen la condición, es decir, las edades mayores a 20.

#### **Combinación de vectores**

Los vectores pueden combinarse para crear nuevos vectores utilizando la función `c()`.

```{r}
# Combinar dos vectores
nuevo_vector <- c(edades, c(22, 21))
nuevo_vector
```

Aquí, el vector `nuevo_vector` combina los elementos del vector `edades` con los valores `22` y `21`, generando un nuevo vector.

## Matrices

Las matrices son estructuras de datos bidimensionales en R que permiten almacenar datos de un mismo tipo en filas y columnas. Son fundamentales en el análisis estadístico, ya que facilitan la manipulación y el cálculo de datos en un formato tabular. A diferencia de los vectores, que son unidimensionales, las matrices permiten organizar los datos de manera más compleja, lo que resulta útil en diversas aplicaciones estadísticas (Ihaka & Gentleman, 1996).

Las matrices son esenciales en R porque muchas operaciones matemáticas y estadísticas requieren datos organizados en dos dimensiones. Al igual que los vectores, todos los elementos de una matriz deben ser del mismo tipo de dato, lo que asegura la consistencia en las operaciones realizadas sobre ella.

### Creación de Matrices

Para crear una matriz en R, se utiliza la función `matrix()`, que permite especificar los elementos, así como el número de filas y columnas. A continuación, se presentan ejemplos de creación de matrices:

```{r}
# 1. Creación de una matriz de 3 filas y 2 columnas
matriz <- matrix(1:6, nrow = 3, ncol = 2)
print(matriz)

# 2. Creación de una matriz de caracteres
matriz_caracteres <- matrix(c("A", "B", "C", "D"), nrow = 2, ncol = 2)
print(matriz_caracteres)
```

En estos ejemplos:

1.  La matriz llamada: `matriz`, almacena valores numéricos organizados en 3 filas y 2 columnas.

2.  La matriz llamada: `matriz_caracteres`, contiene cadenas de texto organizadas en 2 filas y 2 columnas.

### Manipulación de Matrices

Las matrices en R permiten realizar una amplia variedad de operaciones matemáticas y de manipulación de datos. Estas operaciones son fundamentales para el análisis estadístico y la transformación de datos. A continuación, se describen algunas de las operaciones más comunes:

#### Acceso a Elementos Específicos

Se pueden acceder a elementos individuales de una matriz utilizando índices entre corchetes, especificando primero la fila y luego la columna. Los índices en R comienzan en 1.

```{r}
# Acceder al elemento en la segunda fila y primera columna
elemento <- matriz[2, 1]
print(elemento)  # Imprime 2
```

En este ejemplo, `matriz[2, 1]` devuelve el elemento en la segunda fila y primera columna de la matriz, que es 2.

#### Combinación de Matrices

Las matrices pueden combinarse para crear nuevas matrices utilizando funciones como `rbind()` para combinar filas y `cbind()` para combinar columnas.

```{r}
# Combinar dos matrices por filas
matriz2 <- matrix(7:12, nrow = 3, ncol = 2)
matriz_combinada <- rbind(matriz, matriz2)
print(matriz_combinada)
```

Aquí, `matriz_combinada` combina las filas de `matriz` y `matriz2`, generando una nueva matriz.

### Texto de apoyo para algebra matricial

El capítulo 20 del libro *Modelos de Regresión con R* de Hernández, Usuga y Mazo (2024) aborda en profundidad el tema del álgebra matricial con R, proporcionando una base sólida para entender cómo se aplican las matrices en el análisis estadístico. Para más detalles, se puede consultar el siguiente enlace: [Álgebra matricial con R](https://fhernanb.github.io/libro_regresion/algmat.html).

## Data frames

Un *data frame* es una estructura de datos tabular en R, similar a una hoja de cálculo o una tabla en una base de datos. Organiza los datos en filas y columnas, donde cada columna es un vector que puede contener un tipo de dato diferente (por ejemplo, números, texto o factores). Cada fila representa una observación, mientras que cada columna corresponde a una variable (R Core Team, 2023).

Los *data frames* son ideales para trabajar con datos estructurados, como encuestas, experimentos o bases de datos, ya que permiten realizar análisis estadísticos y visualizaciones de manera eficiente. Además, son compatibles con una amplia variedad de funciones y paquetes en R, lo que los convierte en una de las estructuras más utilizadas en este lenguaje (Wickham & Grolemund, 2017).

### Creación de data frames

Para crear un *data frame*, se utiliza la función `data.frame()`, combinando vectores de igual longitud separados por comas. A continuación, se presenta un ejemplo usando los vectores creados en la sección anterior:

```{r}
# Creación de un data frame con vectores
datos <- data.frame(nombres,  edades,  mayores_de_edad)

# Visualización del data frame
datos
```

En este ejemplo:

1.  La columna `nombres` contiene texto.

2.  La columna `edades` almacena valores numéricos.

3.  La columna `mayores_de_edad` contiene valores lógicos (`TRUE` o `FALSE`).

### Ventajas de un data frame

Los *data frames* ofrecen múltiples ventajas que los hacen indispensables para el análisis de datos en R:

1.  **Estructura clara**: Cada fila representa una observación y cada columna una variable, lo que facilita la interpretación de los datos.

2.  **Compatibilidad**: Son compatibles con funciones estadísticas y de visualización, así como con paquetes populares como `ggplot2` y `dplyr`.

3.  **Flexibilidad**: Permiten almacenar diferentes tipos de datos en columnas, como números, texto y factores.

### Manipulación de data frames

Los *data frames* pueden manipularse fácilmente utilizando funciones básicas de R o herramientas avanzadas de paquetes como `dplyr`. A continuación, se describen algunas operaciones comunes:

#### **Acceso a columnas**

Se puede acceder a una columna específica utilizando el operador `$`:

```{r}
# Acceso a la columna 'nombres'
datos$nombres


```

#### **Filtrado de filas**

Es posible filtrar filas aplicando condiciones lógicas. Por ejemplo, para seleccionar las filas donde la edad sea mayor a 20:

```{r}
# Filtrar filas donde la edad sea mayor a 20
datos_filtrados <- datos[datos$edades > 20, ]
datos_filtrados
```

## Listas

Las listas son estructuras de datos más flexibles que los *data frames*, ya que pueden contener elementos de diferentes tipos y longitudes, como vectores, *data frames*, matrices o incluso funciones. A diferencia de los *data frames*, las listas no requieren que los elementos tengan la misma longitud o tipo de dato, lo que las hace ideales para almacenar resultados complejos o datos heterogéneos (R Core Team, 2023).

### Creación de listas

Para crear una lista, se utiliza la función `list()`. A continuación, se presenta un ejemplo:

```{r}
# Creación de una lista
mi_lista <- list(
  nombres = c("Juan", "Ana"),
  edades = c(18, 20),
  datos_completos = datos
)
```

En este ejemplo:

1.  El elemento `nombres` es un vector de texto.

2.  El elemento `edades` es un vector numérico.

3.  El elemento `datos_completos` es un *data frame*.

### Acceso a elementos de una lista

Los elementos de una lista pueden accederse mediante su nombre o índice:

**Por nombre**: Utilizando el operador `$` o corchetes dobles `[[ ]]`

```{r}
# Acceso al elemento 'nombres' por nombre
mi_lista$nombres
```

**Por índice**: Utilizando corchetes dobles `[[ ]]`:

```{r}
# Acceso al primer elemento de la lista
mi_lista[[1]]
```

## Comparación y conclusiones: Data Frames y Listas

Los *data frames* y las listas son estructuras de datos fundamentales en R, cada una con características específicas que las hacen adecuadas para diferentes tareas. Mientras que los *data frames* son ideales para trabajar con datos tabulares estructurados, las listas ofrecen una mayor flexibilidad para almacenar y manipular datos heterogéneos. A continuación, se presenta una comparación detallada entre ambas estructuras:

| **Característica** | **Data Frame** | **Lista** |
|------------------------|------------------------|------------------------|
| **Estructura** | Tabular (filas y columnas) | Colección de objetos heterogéneos |
| **Tipos de datos** | Columnas con tipos diferentes | Elementos de cualquier tipo |
| **Uso principal** | Análisis estadístico y visualización | Almacenamiento de resultados complejos |
| **Acceso a elementos** | Por columnas o índices | Por nombres o índices |

Ambas estructuras son esenciales en R, y su elección depende del tipo de datos y del análisis que se desee realizar. En el contexto del análisis estadístico, los *data frames* se utilizan habitualmente para almacenar datos tabulares, como encuestas o resultados experimentales, mientras que las listas son más adecuadas para almacenar resultados complejos, como salidas de modelos estadísticos, pruebas o análisis que combinan diferentes tipos de datos.

Por ejemplo:

1.  Un *data frame* puede contener las respuestas de una encuesta, con columnas que representan variables como edad, género y puntuaciones.

2.  Una lista puede almacenar los resultados de un análisis estadístico, como coeficientes de regresión, valores p y gráficos generados.

Comprender las diferencias y aplicaciones de estas estructuras permite aprovechar al máximo las capacidades de R en el análisis de datos. La elección adecuada entre un *data frame* y una lista no solo facilita el manejo de los datos, sino que también optimiza el flujo de trabajo y la reproducibilidad del análisis (R Core Team, 2023; Wickham & Grolemund, 2017).
