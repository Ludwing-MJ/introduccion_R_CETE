{
  "hash": "a59f1bcc08322f0fb4a6b6ee545eda7e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS\"\nauthor: \"P. Agr. Ludwing Isaí Marroquín Jiménez\"\nlang: es\noutput:\n  html:\n    css: styles.css\n  pdf:\n    include-in-header:\n      text: |\n        \\usepackage{ragged2e}\n        \\justifying\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## ¿Qué es R?\n\nR es un lenguaje de programación y entorno computacional especializado en análisis estadístico y visualización científica, diseñado para investigación reproducible (Ihaka & Gentleman, 1996).\n\n![](https://miro.medium.com/v2/resize:fit:729/0*CtJIRkWvZK_8GnzM.png){fig-align=\"center\" width=\"500\"}\n\n### ¿Qué hace tan especial a R para el análisis estadístico?\n\n-   **Código Abierto:** Sin costos de licencia, ideal para proyectos académicos (R Core Team, 2023).\n\n-   **Extensible:** Hasta 2023 existen más de 19,000 paquetes disponibles en CRAN (Comprehensive R Archive Network) especializados en añadirle nuevas funciones para resolver necesidades especificas usando R, la funcionalidad de estos paquetes va desde hacer mejores gráficos de una manera sencilla hasta facilita procesos estadísticos (CRAN, 2023).\n\n## ¿Qué es RStudio?\n\nRStudio es un Entorno de Desarrollo Integrado (IDE) que optimiza el flujo de trabajo en R, destacándose por su sistema de proyectos y herramientas para reproducibilidad (Allaire et al., 2022).\n\n![](https://www.databricks.com/sites/default/files/2018/06/RStudio-Logo-All-Color-partners.png){fig-align=\"center\" width=\"500\"}\n\n## Reproducibilidad, Replicabilidad ¿Qué tienen que ver con R y RStudio?\n\nEl 64% de los investigadores enfrentan dificultades para replicar estudios previos debido a documentación insuficiente (Baker, 2016).\n\n-   **Situación:** Usas Excel y/o infostat. Tus cálculos están en celdas ocultas, y los gráficos se ajustan manualmente.\n\n-   **Resultado:** Nadie, ni tú en 6 meses, podrá repetir exactamente tu análisis.\n\n-   **Solución:** Realizar el análisis de los datos y la construcción de los gráficos aprovechando las herramientas que nos provee R para generar un script donde se documenta el paso a paso que se siguió para realizar el análisis y llegar a las conclusiones.\n\n![\"Un script de R es como una receta: cualquiera puede seguirla paso a paso para recrear tu 'platillo' científico. Así como, cualquiera puede re interpretarla para crear su propio 'platillo' científico.\"](https://bibliobasella.wordpress.com/wp-content/uploads/2015/04/cc27b-freir2bun2bhuevo.jpg){fig-align=\"center\" width=\"500\"}\n\n### Definición formal de reproducibilidad y replicabilidad\n\nLa reproducibilidad (capacidad de obtener los mismos resultados con los mismos datos y métodos) y la replicabilidad (consistencia de hallazgos en nuevos contextos) son fundamentales para la credibilidad científica (National Academies of Sciences, Engineering, and Medicine, 2019).\n\n### Beneficios de la adopción de R para la Ciencia\n\n-   **Transparencia**: Código accesible para revisión por pares (The Turing Way Community, 2023).\n\n-   **Eficiencia**: Reutilización de métodos en nuevos estudios (Gentleman & Temple Lang, 2007).\n\n-   **Credibilidad**: Cumplimiento de estándares FAIR (Wilkinson et al., 2016).\n\n## ¿Cómo obtengo R y RStudio para mi uso personal?\n\nInstalar R y RStudio en nuestro ordenador es bastante sencillo. Para ello primero debemos descargar una versión de R estable, en el momento de elaboración de este material la ultima versión de R es R 4.4.2, sin embargo, utilizar la ultima versión de R nos puede llegar a dar problemas al utilizar paquetes los cuales no han recibido actualizaciones para poderse utilizar en esa versión de R es por ello que se recomienda instalar la ultima versión estable conocida de R. Con base a lo anteriormente explicado en este curso utilizaremos la versión de R 4.3.1.\n\nEl enlace para ir al repositorio donde se encuentran todas la versiones de R es el siguiente: <https://cran.r-project.org/bin/windows/base/old/>. En esta página encontraremos un directorio con todas las versiones de R que alguna vez han existido para descargar una versión en específico, le damos clic al nombre de la versión y nos abrirá un directorio con toda la documentación de esa versión de R, a nosotros nos interesa el archivo con una terminación -win. exe la cual al darle clic automáticamente nos descargara el instalador de la versión de R.\n\nPara descargar la ultima versión de RStudio nos dirigimos a la [Página oficial](https://posit.co/download/rstudio-desktop/) de RStudio donde al dar clic sobre el botón *\"Download RStudio Desknop for Windows\"* la pagina iniciara la descarga del instalador de RStudio. En caso de que nuestro dispositivo no tenga como sistema operativo Windows en la misma pagina en la sección siguiente se encuentran las respectivas versiones de RStudio para todos los sistemas operativos con los que es compatible.\n\nLa instalación de los dos programas debe realizarse en un orden específico para evitar conflictos y errores. Primero debemos instalar la versión de R y posteriormente instalamos RStudio. Cabe resaltar que en un mismo dispositivo pueden convivir más de una versión de R y dentro de la configuración de RStudio es posible seleccionar cuál versión sera con la que trabajaremos.\n\n## Trabajo práctico para familiarizarnos con el software\n\nAprender desde cero a usar un software como R y RStudio. Es como cuando nos iniciamos en la cocina: por más que leamos recetas, solo dominaremos los sabores y técnicas al encender la estufa y experimentar. Según la teoría del aprendizaje experimental de Kolb (1984), internalizamos conceptos cuando **hacemos**, no solo cuando escuchamos. Imaginemos que preparamos una salsa: si la sal es excesiva (error), ajustamos la próxima vez (prueba), y así hasta lograr el equilibrio (éxito). De la misma forma, al programar en RStudio, cada línea de código es nuestro ingrediente. Si un gráfico no se renderiza, depuramos el error; si un cálculo falla, corregimos la sintaxis. Este ciclo de prueba-error, respaldado por el constructivismo (Hmelo-Silver et al., 2007), transforma funciones abstractas en habilidades concretas. No memorizamos **funciones**: los **saboreamos** en la práctica, como los chefs que aprenden a medir ‘a ojo’ la pimienta. La pantalla es nuestra cocina, y cada script, un plato que perfeccionamos.\n\n![](https://media.istockphoto.com/id/1300513392/es/vector/hombre-feliz-en-delantal-mezclando-ingredientes-en-taz%C3%B3n.jpg?s=612x612&w=0&k=20&c=Rr6lmu6q2T4OVQZR4eVsFbjHutdBuaAgN_E9ue3iMnA=){fig-align=\"center\" width=\"500\" height=\"300\"}\n\n### Empecemos creando un nuevo script de R\n\nCuando abrimos por primera vez RStudio nos encontramos con la siguiente interfaz:\n\n![](images/Captura%20de%20pantalla%202025-02-26%20140717.png){fig-align=\"center\" width=\"600\"}\n\nNormalmente nos toca crear un script nuevo para trabajar cuando entramos para ello existen dos rutas habituales y estas son:\n\n1.  **Manualmente:** Desplegamos la pestaña \"File\" de la cinta de opciones ubicada en la parte superior izquierda del programa, sucesivamente seleccionamos la opción \"New File\" y después seleccionamos el tipo de archivo que para nuestro caso es \"R Script\".\n\n![](images/Captura%20de%20pantalla%202025-02-26%20140954.png){fig-align=\"center\" width=\"600\"}\n\n2.  **Utilizando atajos de teclado:** Para crear un nuevo script se puede utilizar la combinación de teclas **Ctrl+Shift+N** como un atajo de teclado, el cual nos creara automáticamente un script nuevo.\n\n### Guardemos nuestro script para evitar perder nuestro trabajo\n\nUna vez ya hemos creado el script en donde trabajaremos este es un lienzo en blanco en donde desarrollaremos el análisis de nuestros datos, para evitar perder nuestro progreso por cualquier inconveniente es recomendable guardarlo desde el principio. Para ello nuevamente desplegamos la pestaña \"File\" y seleccionamos la opción \"Save as...\" esta opción nos abrirá el menú predeterminado para seleccionar dónde guardar nuestro script y con qué nombre.\n\n![](images/Captura%20de%20pantalla%202025-02-26%20144213-01.png){fig-align=\"center\" width=\"500\"}\n\n#### Recomendaciones para la organización de archivos\n\nAsí como en la cocina separamos los utensilios, los ingredientes frescos y las especias en cajones etiquetados, en RStudio necesitamos un sistema claro para guardar nuestros scripts, datos y resultados. Un proyecto desorganizado es como una alacena caótica: perderemos tiempo buscando archivos y arriesgaremos errores. Para evitarlo, sigamos estas recomendaciones de organización:\n\n1.  **Nombres descriptivos y consistentes**:\n\n    -   ❌ `analisis1.R`, `datos_finales.xlsx`\n\n    -   ✅ `20231015_analisis_rendimiento_maiz.R`, `datos_suelo_antigua_2023.csv`\n\n2.  **Evitar espacios y caracteres especiales**:\n\n    -   Usar guiones bajos (`_`) o medios (`-`) en vez de espacios:\n\n        -   ❌ `analisis suelo.R`\n\n        -   ✅ `analisis_suelo.R`\n\n3.  **Incluir fechas en un formato estandarizado (YYYY-MM-DD)**:\n\n    -   `2023-10-15_importacion_datos.R`\n\n4.  **Crear una carpeta en nuestro ordenador para cada proyecto**\n\nCon este sistema, cualquier colaborador (o nuestro \"yo\" del futuro) encontrará todo al primer vistazo, como un chef que sabe dónde está cada ingrediente en su cocina. *La organización no es burocracia: es la base de la eficiencia y la reproducibilidad.*\n\n## Iniciemos conociendo los objetos en R\n\nEn R, todo es un **objeto**. Un objeto es una estructura que almacena datos y tiene atributos (nombre, tipo, etc.).\n\n### Recomendaciones para nombrar objetos:\n\n-   **Sensibles a mayúsculas**: pH ≠ ph.\n\n-   **No usar espacios**:\n\n    -   ❌ rendimiento ha\n\n    -   ✅ rendimiento_ha\n\n-   **Nombres descriptivos y consistentes:**\n\n    -   A diferencia de cuando nombramos archivos acá es recomendable que el nombre sea breve pero que al mismo tiempo nos brinde la mayor cantidad de información posible. Cuando esto no es viable por la especificidad de los datos o cualquier otra razón podemos guardar un archivo con la metadata de nuestra base de datos en la misma carpeta como parte de la documentación que facilitara la comprensión del análisis a cualquier colaborador (o nuestro \"yo\" del futuro).\n\n### ¿Cómo creo un objeto?\n\nPara la creación de cualquier objeto en R existen dos operadores de asignación los cuales son: \"=\" y \"\\<-\" estos operadores cumplen la misma función. Sin embargo, el signo de igualdad no se recomienda utilizarlo debido a que puede llegar a causar conflictos al usar operadores lógicos en nuestro codigo es por ello que para fines profesionales se ha estandarizado el uso de \"\\<-\" como operador de asignación en R.\n\nLa estructura de sintaxis utilizada en R para crear cualquier objeto es la siguiente:\n\n|  |  |  |\n|----|----|----|\n| **NOMRE DEL OBJETO** | **\\<-** | **Información que contendrá nuestro objeto** |\n| Siguiendo las recomendaciones para su nomenclatura | Vector de asignación | Los objetos en R pueden contener distintos tipos de información ya sea texto, números... |\n\n***Nota:** Para visualizar en la consola el valor de un objeto se escribe el nombre asignado y se ejecuta la linea de código.*\n\n### Tipos de objetos\n\nEn R, cada objeto puede almacenar distintos tipos de datos. Sin embargo, solo pueden almacenar un tipo de dato en cada objeto. Los tipos de objetos existentes en R son:\n\n#### Objetos numéricos\n\nUn objeto numérico es aquel que almacena datos con números enteros o decimales, estos nos sirven para almacenar información de variables cuantitativas como por ejemplo: Edad, Altura, Peso. También nos puede servir para guardar factores de conversión para convertir entre distintas unidades de medida por ejemplo el factor de conversión entre libras y kilogramos es 2.2. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto correspondiente a cada uno de los ejemplos dados utilizando nuestra información:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE OBJETOS NUMÉRICOS\nedad <- 21\naltura_m <- 1.70\npeso_lb <- 150\nlb_kg <- 2.20\n```\n:::\n\n\n\n\n\n\nPara ejecutar el código que acabamos de escribir existen dos maneras las cuales son:\n\n1.  **Manualmente:** Nos ubicamos en la linea de código que queremos ejecutar y damos clic sobre la opción \"Run\" que se encuentra en la esquina superior derecha del área del script.\n\n2.  **Usando atajos de teclado:** Seleccionamos la/las lineas de código que queremos ejecutar y presionamos la combinación de teclas **Ctrl+Enter.**\n\nIndistintamente de cuál de los métodos utilicemos veremos como en la consola aparecerán las lineas de código que hayamos ejecutado y al mismo tiempo en el Environment (Ambiente) nos aparecerán los nombres de nuestros objetos creados y su contenido.\n\n***Nota:*** *En R si antes de un texto colocamos el símbolo numeral (#) el software lo interpreta como un comentario, estas lineas no se ejecutaran. Sin embargo, son muy útiles para explicar ¿Qué hicimos? en cada sección de nuestro código, para que sea más fácil de entender para nuestro \"yo\" del futuro.*\n\n#### Objetos tipo carácter o texto\n\nLos objetos de tipo carácter nos sirven para almacenar variables cualitativas, este tipo de objeto almacena el texto entre comillas (\" \"), habitualmente se utiliza para almacenar nombres y categorías no estructuradas como por ejemplo: nuestro color favorito o el nombre de nuestra comida favorita. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto correspondiente a cada uno de los ejemplos dados:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE OBJETOS TIPO CARACTER \ncolor_fav <- \"negro\"\ncomida_fav <- \"pizza\"\n```\n:::\n\n\n\n\n\n\n#### Objetos de tipo factor\n\nLos objetos de tipo factor nos sirven para almacenar variables categóricas estructuradas con niveles definidos. Usualmente se utiliza para almacenar escalas o categorías definidas como por ejemplo: una escala de calificaciones (aprobado o reprobado) o el estado civil de una persona (casado, soltero o divorciado). Para crear este tipo de objetos utilizamos la función \"factor()\" para indicarle a R que este objeto no es de tipo carácter ya que al igual que los objetos tipo carácter los niveles de nuestras categorías se ingresan entre comias. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto de tipo factor estado civil y sexo con nuestra información.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE OBJETOS TIPO FACTOR \nestado_civil <- factor(\"soltero\")\nsexo <- factor(\"masculino\")\n```\n:::\n\n\n\n\n\n\n***Nota:** Los objetos de tipo factor son muy útiles cuando trabajamos con bases de datos complejas ya que estos nos sirven para clasificar y categorizar variables para su análisis*\n\n#### Objetos lógicos\n\nLos objetos de tipo lógico también conocidos como los termómetros de condiciones nos sirven para aplicar filtros y se crean normalmente como el resultado de una comparación en donde estuvo involucrado un operador lógico (en la siguiente sección hablaremos de los distintos tipos de operadores que existen en R). Su nombre de termómetros de condiciones es más acertado con los ejemplos tipicos de su uso. Para el caso de nuestros objetos anteriormente creados podemos crear un objeto de tipo lógico comparando si nuestra edad cumple con la condición necesaria para ser considerados mayores de edad que para el caso de Guatemala esta condición seria que nuestra edad sea mayor a 18 años. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto del ejemplo antes descrito.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE UN OBJETO TIPO LOGICO\nmayoria_de_edad <- edad >18 ; mayoria_de_edad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n***Nota:** si al acabar la asignación de un objeto colocamos un punto y coma seguido del nombre del objeto R nos devolverá en la consola el valor del objeto esto es útil cuando el objeto es el resultado de una operación. Para el ejemplo anterior podemos ver como en la consola nos aparece el valor de nuestro objeto que para este caso al cumplirse la condición el valor es TRUE (verdadero).*\n\n## ¿Y si, quiero un objeto con dos o más valores?\n\nImaginemos que estamos organizando la información de un salón de clase: no trabajamos con un solo alumno, sino con un grupo de estudiantes, cada uno con información diferente como nombre, edad, peso en libras y sexo. En R, los **vectores** y **data frames** son nuestras herramientas para manejar colecciones de datos de manera estructurada y eficiente. A continuación, exploraremos cómo crear y gestionar estos objetos.\n\nUn vector en R es un objeto el cual esta compuesto por un número determinado de elementos del mismo tipo para su creación en R se utiliza la función \"c()\" y dentro de los paréntesis se colocan todos los elementos que formaran parte de nuestro vector separados por comas. A continuación elaboraremos un ejemplo de como crear un vector para cada uno de los distintos tipos de objetos que hay en R utilizando datos de un salón de clases.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE VECTORES \n# VECTORES DE TIPO CARACTER\nnombre <- c(\"Juan\", \"Pedro\", \"Luis\", \"Ana\", \"Andrea\")\n\n# VECTORES DE TIPO NUMÉRICO\nedad <- c(18, 17, 21, 20, 19) \npeso_lb <- c(125.20, 130.5, 145.6, 120.1, 110.5)\n\n# VECTORES DE TIPO CATEGORICO\nsexo <- factor(c(\"H\", \"H\", \"H\", \"M\", \"M\"))\n\n# VECTORES DE TIPO LOGICO\nmayoria_de_edad <- edad >=18\n```\n:::\n\n\n\n\n\n\n### Tengo muchos vectores... ¿Cómo los puedo agrupar para tener una mejor organización?\n\nCuando trabajamos con múltiples vectores relacionados (por ejemplo, datos de estudiantes en un salón de clase), la mejor manera de organizarlos es utilizando **estructuras de datos integradas en R** que permiten agrupar vectores de manera coherente. Las dos opciones principales son los **data frames** y las **listas**. A continuación, exploraremos cómo usarlas:\n\n### Data Frames: Tablas estructuradas para análisis\n\nUn **data frame** es una estructura tabular (similar a una hoja de Excel) que combina vectores de **igual longitud** pero de **distintos tipos** (numéricos, caracteres, factores, etc.). Es ideal para bases de datos organizadas, donde cada fila representa una observación y cada columna una variable.\n\n#### Creemos un data frame con nuestros vectores\n\nPara la creación de un data frame se emplea la función data.frame(), los argumentos que se colocan en esta función son los nombres de todos los vectores que queremos unir en un mismo data frame separados por comas, como se muestra a continuación:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# EJEMPLO DE CREACIÓN DE UN DATAFRAME\ndatos_estudiantes <- data.frame(nombre, edad, mayoria_de_edad, peso_lb, sexo)\ndatos_estudiantes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nombre edad mayoria_de_edad peso_lb sexo\n1   Juan   18            TRUE   125.2    H\n2  Pedro   17           FALSE   130.5    H\n3   Luis   21            TRUE   145.6    H\n4    Ana   20            TRUE   120.1    M\n5 Andrea   19            TRUE   110.5    M\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Ventajas de los data frames\n\n-   Permiten manipulación y análisis estadístico directo.\n\n-   Compatibles con funciones de visualización.\n\n-   Fáciles de exportar/importar.\n\n### Listas: Colecciones flexibles de objetos\n\nUna **lista** es una estructura que puede contener **cualquier tipo de objeto** (vectores, matrices, otros data frames, funciones, etc.), incluso si tienen longitudes o tipos diferentes. Son útiles para organizar resultados complejos o grupos heterogéneos de datos.\n\nMás adelante cuando queramos guardar los resultados de nuestros analisis estadisticos aprenderemos más sobre las listas. Por el momento solo trabajaremos con data frames.\n\n#### Comparación entre data frames y listas\n\n| Data Frame                       | Lista                                   |\n|:---------------------------------|:----------------------------------------|\n| Vectores de igual longitud.      | Objetos de cualquier tipo o longitud.   |\n| Ideal para análisis estadístico. | Ideal para almacenar resultados mixtos. |\n| Columnas con nombres definidos.  | Elementos pueden nombrarse o no.        |\n\n### ¿Qué pasa si mis datos ya los tengo almacenados en un archivo de delimitado por comas (CSV) o excel?\n\nImaginemos que los datos son ingredientes guardados en recipientes: los archivos CSV y Excel son como frascos etiquetados que R puede abrir para extraer información. Para ello tenemos que importarlos así, evitando el tedioso copiar/pegar manual, y mantener la reproducibilidad de nuestro análisis.\n\n#### Archivos delimitados por comas (.csv)\n\n-   **Estructura:** Archivo de *texto plano* donde cada valor está separado por una coma (ej: nombre, edad, altura, peso).\n\n-   **Características técnicas:**\n\n    -   Sin formato: No admite colores, fórmulas o múltiples hojas.\n\n    -   Universal: Lo abre cualquier editor de texto o programa (Bloc de notas, Excel, R).\n\n    -   Ligero: Ideal para datos simples y transferencias rápidas.\n\n-   **Ejemplo de cómo importar un archivo .csv a R**\n\nPara importar un data frame que se encuentra almacenado en formato **.csv** a R se emplea la siguiente sintaxis para la función: *\"**read.csv(\"**nombre del documento**\", header =** (indicar si tiene o no encabezado)**, sep =\"**(indicar que tipo de separador utilizamos)**\")**\"*\n\n1.  **Instalar los paquetes necesarios para esta tarea**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #1 INSTALAMOS LOS PAQUETES DE R NECESARIOS PARA ESTA TAREA\n    if (!require(\"rstudioapi\")) install.packages(\"rstudioapi\") \n    # Lo usaremos para establecer nuestro directorio de trabajo facilmente\n    ```\n    :::\n\n\n\n\n\n\n2.  **Establecemos la carpeta de nuestro proyecto como directorio de trabajo**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #2 ESTABLECER NUESTRO DIRECTORIO DE TRABAJO\n    setwd (dirname(rstudioapi::getActiveDocumentContext()$path)) \n    ```\n    :::\n\n\n\n\n\n\n3.  **Importamos nuestro dataframe**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #3 IMPORTAMOS NUESTRO DATAFRAME\n    datos<-read.csv(\"datos_estudiantes_2002.csv\", \n                    header = TRUE, \n                    sep = \";\")\n    ```\n    :::\n\n\n\n\n\n\n***Nota:** La siguiente linea de código \"*setwd (dirname(rstudioapi::getActiveDocumentContext()\\$path))\" *es una \"**receta mágica\"** que establece automáticamente la misma carpeta donde tenemos guardado nuestro script como nuestro directorio de trabajo.*\n\n#### Archivos de excel (.xlsx)\n\n-   **Estructura:** Archivo *binario* con múltiples hojas, fórmulas, gráficos y formato (ej: colores, fuentes).\n\n-   **Características técnicas:**\n\n    -   Complejo: Diseñado para análisis interactivos y presentaciones.\n\n    -   Propietario: Desarrollado por Microsoft, pero compatible con herramientas como R.\n\n    -   Pesado: Puede ralentizarse con grandes volúmenes de datos (\\>1 millón de filas).\n\n-   **Ejemplo de cómo importar un archivo .xlsx a R**\n\nPara importar un data frame que se encuentra almacenado en formato **.xlsx** a R se emplea la siguiente sintaxis para la función: *“**read_excel(”**nombre del documento**”, col_names =** (indicar si tiene o no encabezado)**, sheet =”**nombre de la hoja**”)**”*\n\n1.  **Instalar los paquetes necesarios para esta tarea**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #1 INSTALAMOS LOS PAQUETES DE R NECESARIOS PARA ESTA TAREA\n    if (!require(\"rstudioapi\")) install.packages(\"rstudioapi\") # Lo usaremos para \n    #establecer nuestro directorio de trabajo facilmente\n    if (!require(\"readxl\")) install.packages((\"readxl\")) # Este paquete nos sirve \n    #para que R pueda importar archivos de excel\n    ```\n    :::\n\n\n\n\n\n\n2.  **Establecemos la carpeta de nuestro proyecto como directorio de trabajo**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #2 ESTABLECER NUESTRO DIRECTORIO DE TRABAJO\n    setwd (dirname(rstudioapi::getActiveDocumentContext()$path)) \n    ```\n    :::\n\n\n\n\n\n\n3.  **Importamos nuestro dataframe**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #3 IMPORTAMOS NUESTRO DATAFRAME\n    datos_2002 <- read_excel(\"datos_estudiantes_2002.xlsx\", \n                      col_names = TRUE, \n                      sheet = \"datos\")\n    ```\n    :::\n\n\n\n\n\n\n### ¿Cómo acceder a las variables de un Data frame?\n\nPara acceder a la información guardada como una columna en un data frame, no podemos acceder de la misma manera que lo hacíamos con los vectores para esta tarea accedemos usando el operador `$`: *La \"Llave Maestra\".* Este operador accede directamente a una columna/variable del data frame por su nombre. Para esto usamos la sintaxis siguiente: `(nombre del data frame)$(nombre de la columna)`\\\n**Ejemplo** **:**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Acceder a la columna \"edad\" del data frame datos_estudiantes\ndatos_estudiantes$edad      \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 17 21 20 19\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**Uso común:**\n\n-   Ideal para operaciones rápidas o cuando trabajas con pocas variables.\n\n-   Funciona con cualquier funcion u operador con el que estemos trabajando.\n\n## La importancia de un directorio de trabajo\n\nImagina que el directorio de trabajo es como el \"punto de partida\" en un mapa: es la carpeta donde R buscará automáticamente tus archivos (datos, scripts) y guardará tus resultados. Si no lo defines, es como intentar cocinar sin saber dónde están los ingredientes: perderás tiempo buscando rutas manualmente y el código dejará de funcionar si mueves el proyecto a otra computadora.\n\n### ¿Por qué establecer un directorio de trabajo?\n\n-   **Reproducibilidad:** Garantiza que tu código funcione en cualquier computadora, sin depender de rutas como `C:/Usuario/MiPC...`.\n\n-   **Organización:** Evita errores del tipo *\"archivo no encontrado\"* al mantener todo (datos, scripts, resultados) en una estructura clara.\n\n-   **Eficiencia:** Simplifica el acceso a archivos. En vez de escribir rutas completas, usas nombres simples.\n\n### La \"Receta Mágica\"\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n```\n:::\n\n\n\n\n\n\n#### ¿Qué hace esta línea?\n\n1.  **`rstudioapi::getActiveDocumentContext()$path`:** Obtiene la ruta del script actual (*ej: `C:/proyecto/scripts/analisis.R`*).\n\n2.  **`dirname()`:** Extrae la carpeta padre de esa ruta (*ej: `C:/proyecto/scripts/` → `C:/proyecto/`*).\n\n3.  **`setwd()`:** Establece esa carpeta como directorio de trabajo.\n\n### Beneficios clave\n\n-   **Portabilidad:** Si mueves toda la carpeta del proyecto a otra ubicación, el código sigue funcionando.\n\n-   **Automatización:** No necesitas ajustar manualmente rutas al compartir el proyecto.\n\n### ¿Qué pasa si no se establece?\n\n-   **Errores constantes:** R buscará archivos en una ubicación predeterminada (ej: Documentos), no donde están tus datos.\n\n-   **Código no reproducible:** Si alguien más ejecuta tu script, tendrá que modificar manualmente todas las rutas.\n\n📌 **Consejo:** Ejecuta `getwd()` para verificar tu directorio actual. Si usas la línea automática, *¡asegúrate de guardar el script antes de ejecutarla!*\n\n## Operadores en R ¿Es R otra calculadora pero más difícil de utilizar?\n\n![](https://i.pinimg.com/736x/7d/52/9a/7d529ac1ac85c0438590c3929fbbf5ed.jpg){fig-align=\"center\" width=\"500\"}\n\nImaginemos que R es un taller de herramientas completo: no solo tiene destornilladores y martillos (operadores básicos), sino también taladros, niveles láser y equipos de soldadura (funciones avanzadas, paquetes y estructuras de datos). Cada herramienta tiene un propósito único, y combinarlas permite construir soluciones robustas. A continuación, exploraremos cómo estas \"herramientas\" se integran en un flujo de trabajo profesional.\n\n### Operadores básicos: Los \"Destornilladores\" de R\n\n**Definición:** Realizan operaciones matemáticas o lógicas sencillas, similares a una calculadora, pero con potencial escalable.\n\n#### Operadores aritméticos\n\n| **Operador** | **Acción**     |\n|:-------------|:---------------|\n| `+`          | Suma           |\n| `-`          | Resta          |\n| `*`          | Multiplicación |\n| `/`          | División       |\n| `^`          | Potencia       |\n\n#### Operadores lógicos\n\n| **Operador** | **Acción**  |\n|:-------------|:------------|\n| `>`          | Mayor que   |\n| `<`          | Menor que   |\n| `==`         | Igualdad    |\n| `!=`         | Desigualdad |\n\n**Respondiendo nuestra pregunta inicial**\n\n*Sí, R puede sumar y restar como una calculadora, pero su verdadero poder está en integrar operadores con funciones, visualizaciones y estructuras de datos para resolver problemas complejos. Como un carpintero que transforma madera en muebles, R transforma datos en conocimiento.*\n\n### Experimentemos usar operadores en R\n\nA partir de acá, para nuestro ejercicio de aplicación, vamos a utilizar el data frame que importamos de excel, este objeto lo identificamos con el nombre \"datos_2002\", esta base de datos incluye 11 variables obtenidas de una encuesta realizada a estudiantes de la universidad de San Carlos de Guatemala en el año 2002, como ejercicio de aplicación vamos a crear nuevas variables a partir de las variables ya existentes. Las nuevas variables que vamos a crear serán: Peso_Kg, IMC, Mayoría_edad (variable lógica).\n\n**Solución del ejercicio:**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPeso_Kg <- datos_2002$PESO_lbs / lb_kg\nIMC <- Peso_Kg / (datos_2002$TALLA)^2\nMayoria_edad <- datos_2002$EDAD >= \"18\"\n```\n:::\n\n\n\n\n\n\n## Paquetes de R: Recursos Compartidos por la Comunidad para mejorar nuestros análisis estadísticos\n\nAsí como un chef no se limita a sal y pimienta, en R no te conformas con funciones básicas. Los paquetes son esos ingredientes secretos (`ggplot2`, `dplyr`, `tidyr`) que convierten un análisis simple en un banquete de insights.\n\n![](images/chefsito2.jpg){fig-align=\"center\" width=\"500\"}\n\n### ¿Qué son los paquetes en R?\n\n**Definición:** Los paquetes son colecciones de funciones, datos y documentación que **amplían las capacidades básicas de R**, como agregar especias a una receta. Son desarrollados por la comunidad y permiten resolver problemas específicos:\n\n-   **Ejemplo:** **ggplot2** (gráficos profesionales) y **dplyr** (manipulación de datos).\n\n**Metáfora:** *\"Si R es una cocina básica, los paquetes son licuadoras, batidoras y especias exóticas que transforman ingredientes crudos (datos) en platillos sofisticados (análisis).\"*\n\n**Orígenes comunes:**\n\n-   **CRAN:** El \"supermercado oficial\" de paquetes (más de 19,000 opciones).\n\n-   **GitHub:** La \"tienda de ingredientes artesanales\" para paquetes en desarrollo.\n\n### ¿Cómo instalar paquetes en R?\n\nLa función utilizada en R para instalar paquetes desde CRAN (lo habitual) es `install.packages()` pero al instalar un paquete este no se carga automáticamente, debemos de cargarlo a nuestro entorno de trabajo para empezar a usarlo. Para esta tarea utilizamos la función `library()`. A continuación vamos a hacer este ejemplo con el paquete que utilizaremos para elaborar gráficos en la siguiente sección este se llama **ggplot2**.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(\"ggplot2\")\n```\n:::\n\n\n\n\n\n\n**Consejo:** Con fines de limpieza de nuestro código y facilitar su reproducibilidad es recomendable colocar al principio de nuestro script una sección dedicada a la instalación y carga de los paquetes que utilizamos en nuestro análisis.\n\n### La \"receta mágica\" para instalar paquetes\n\n**`if (!require(\"nombre del paquete\")) install.packages(\"nombre del paquete\")`**\n\n#### ¿Qué hace esta linea?\n\n1.  `require(\"nombre del paquete\")`: Esta función intenta cargar el paquete especificado. Si el paquete está instalado, lo carga en la sesión actual y devuelve `TRUE`. Si el paquete no está instalado, devuelve `FALSE`.\n\n2.  `!require(\"nombre del paquete\")`: El signo de exclamación (`!`) niega el resultado de la función `require()`. Por lo tanto, esta expresión será `TRUE` si el paquete NO está instalado o NO puede ser cargado.\n\n3.  `if (...) install.packages(\"nombre del paquete\")`: Esta es una estructura condicional. Si la condición entre paréntesis es `TRUE` (es decir, si el paquete no está instalado o no puede ser cargado), entonces se ejecuta `install.packages(\"nombre del paquete\")`, que descarga e instala el paquete desde el repositorio CRAN.\n\n**En resumen, esta línea de código:**\n\n-   Primero intenta cargar el paquete con `require()`\n\n-   Si el paquete está instalado, lo carga y continúa con el código\n\n-   Si el paquete NO está instalado, entonces lo instala automáticamente con `install.packages()` y luego lo carga.\n\n**Esta es una técnica muy eficiente porque:**\n\n1.  Evita reinstalar paquetes que ya están disponibles.\n\n2.  Asegura que el código funcione incluso si el usuario no tiene el paquete instalado.\n\n3.  Hace el código más portable entre diferentes computadora.\n\n4.  Automatiza la gestión de dependencias\n\nPara usar esta receta con un paquete específico, simplemente reemplazas \"nombre del paquete\" con el nombre real del paquete. Por ejemplo:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"ggplot2\")) install.packages(\"ggplot2\")\n```\n:::\n\n\n\n\n\n\nEsta línea intentará cargar ggplot2 y, si no está instalado, lo instalará automáticamente.\n\n### ¿Cómo saber qué paquete usar para cada tarea?\n\nEn R, la elección del paquete adecuado para una tarea específica puede marcar la diferencia entre un análisis eficiente y uno complicado. Dado que R cuenta con más de 19,000 paquetes disponibles en CRAN, es importante conocer cuáles son los más utilizados y recomendados para cada tipo de tarea. A continuación, se presenta una guía práctica para identificar y seleccionar el paquete adecuado según las necesidades del análisis.\n\n#### Categorías principales de paquetes\n\nLos paquetes en R se pueden clasificar en diferentes categorías según su propósito. Aquí se presentan las más comunes y los paquetes más destacados en cada una:\n\n-   **Manipulación de datos**:\n\n    -   Paquetes como `dplyr` y `tidyr` son ideales para filtrar, transformar, agrupar y reorganizar datos.\n\n    -   Ejemplo: Calcular el promedio de edad por sexo o transformar datos de formato ancho a largo.\n\n-   **Visualización de datos**:\n\n    -   `ggplot2` es el estándar para crear gráficos personalizados y de alta calidad.\n\n    -   Ejemplo: Crear gráficos de barras, histogramas o scatterplots para explorar relaciones entre variables.\n\n-   **Análisis estadístico básico**:\n\n    -   Las funciones base de R (`stats`) incluyen herramientas para realizar pruebas t, ANOVA y cálculos de medias.\n\n    -   Ejemplo: Comparar tratamientos de un experimento mediante un ANOVA.\n\n-   **Análisis estadístico avanzado**:\n\n    -   Paquetes como `agricolae` que es útil para diseños experimentales en agronomía.\n\n    -   Ejemplo: Analizar efectos aleatorios en un diseño de bloques completos al azar.\n\n#### Criterios para elegir un paquete\n\nAl seleccionar un paquete, es importante considerar los siguientes aspectos:\n\n-   **Propósito**: ¿Qué tarea específica necesitas realizar? Por ejemplo, si deseas manipular datos, `dplyr` es una excelente opción; si necesitas gráficos avanzados, `ggplot2` es ideal.\n\n-   **Popularidad y soporte**: Los paquetes más populares suelen tener mejor documentación, tutoriales y una comunidad activa. Por ejemplo, `ggplot2` y `dplyr` son ampliamente utilizados y cuentan con numerosos recursos en línea.\n\n-   **Compatibilidad**: Algunos paquetes están diseñados para integrarse con otros. Por ejemplo, `dplyr` y `ggplot2` forman parte del ecosistema tidyverse, lo que facilita su uso conjunto.\n\n-   **Documentación**: Un paquete bien documentado es más fácil de aprender y utilizar. Revisa la documentación oficial y los ejemplos proporcionados.\n\n#### Recursos para identificar paquetes\n\nSi no estás seguro de qué paquete usar, puedes recurrir a los siguientes recursos:\n\n-   **CRAN Task Views**: Una colección de listas temáticas en CRAN que agrupan paquetes según su propósito. Por ejemplo, la Task View de \"Agriculture\" incluye paquetes relacionados con análisis de suelos, cultivos y experimentos agrícolas.\n\n    -   Enlace: [CRAN Task Views](https://cran.r-project.org/web/views/)\n\n-   **Cheatsheets**: Las hojas de referencia rápida (cheatsheets) de RStudio son una excelente manera de explorar las capacidades de paquetes populares como `ggplot2`, `dplyr` y `tidyr`.\n\n```         \n-   Enlace: [Cheatsheets de RStudio](https://www.rstudio.com/resources/cheatsheets/)\n```\n\n-   **Foros y comunidades**: Plataformas como Stack Overflow, RStudio Community y GitHub son útiles para buscar recomendaciones y ejemplos de uso.\n\n-   **Libros y tutoriales**: Recursos como *R for Data Science* de Hadley Wickham y Garrett Grolemund ofrecen una introducción práctica a los paquetes más utilizados en el ecosistema tidyverse.\n\n## Manipulación de datos con dplyr y tidyr\n\nLa manipulación de datos es una tarea esencial en el análisis estadístico, ya que permite transformar, organizar y preparar los datos para su análisis. En R, los paquetes **dplyr** y **tidyr** del ecosistema tidyverse son herramientas clave para realizar estas tareas de manera eficiente y reproducible. A continuación, exploraremos las principales funciones de estos paquetes, el concepto de *pipes* y la utilidad de transformar datos entre formatos ancho y largo, con ejemplos prácticos, incluyendo aplicaciones en el ámbito agrícola.\n\n### ¿Qué es dplyr?\n\n**dplyr** es un paquete diseñado para realizar operaciones comunes de manipulación de datos, como filtrar, seleccionar columnas, agrupar y resumir datos. Su sintaxis es intuitiva y está optimizada para trabajar con data frames y tibbles (una versión mejorada de los data frames).\n\n#### Operaciones básicas con dplyr\n\n1.  **Filtrar filas**: Selecciona observaciones que cumplen una condición específica.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Filtrar estudiantes que miden más de 1.90m   \n    estudiantes_altos <- datos_2002 %>% filter(TALLA > 1.9)   \n    ```\n    :::\n\n\n\n\n\n\n2.  **Seleccionar columnas**: Extrae variables específicas de un data frame.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Seleccionar solo las columnas de peso en libras y talla\n    seleccion <- datos_2002 %>% select(PESO_lbs, TALLA)\n    ```\n    :::\n\n\n\n\n\n\n<!-- -->\n\n3.  **Crear nuevas columnas**: Añade variables calculadas.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Crear una nueva columna con el pesoo en kilogramos   \n    datos_2002 <- datos_2002 %>% mutate(PESO_Kg = PESO_lbs / 2.2) \n    ```\n    :::\n\n\n\n\n\n\n<!-- -->\n\n4.  **Agrupar y resumir datos**: Calcula estadísticas por grupo.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Calcular la edad promedio por facultad \n    promedio_edad <- datos %>%     group_by(FACULTAD) %>%     summarize(edad_promedio = mean(EDAD, na.rm = TRUE)) \n    ```\n    :::\n\n\n\n\n\n\n#### ¿Qué son las *pipes* (`%>%`)?\n\nEl operador *pipe* (`%>%`) es una herramienta clave en el tidyverse que permite encadenar funciones de manera legible y eficiente. En lugar de anidar funciones, el *pipe* pasa el resultado de una función como entrada a la siguiente.\n\n##### Ejemplo sin *pipes*:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npromedio <- summarize(group_by(datos_2002, FACULTAD), edad_promedio = mean(EDAD, na.rm = TRUE))   \n```\n:::\n\n\n\n\n\n\n##### Ejemplo con *pipes*:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular la edad promedio por facultad \npromedio_pipe <- datos_2002 %>%     group_by(FACULTAD) %>%     summarize(edad_promedio = mean(EDAD, na.rm = TRUE))   \n```\n:::\n\n\n\n\n\n\nEl uso de *pipes* mejora la legibilidad del código, especialmente en flujos de trabajo complejos.\n\n### Visualización de datos: Introducción a gráficos básicos con ggplot2\n\nLa visualización de datos es una herramienta fundamental para explorar patrones, comunicar resultados y validar supuestos en el análisis estadístico. En R, el paquete **ggplot2** es ampliamente utilizado debido a su flexibilidad y capacidad para crear gráficos de alta calidad.\n\n#### ¿Qué es ggplot2?\n\n**ggplot2** es un paquete de R diseñado para crear gráficos personalizados y profesionales. Su enfoque se basa en una lógica de capas, donde cada capa representa un componente del gráfico (datos, tipo de gráfico, etiquetas, etc.). Esto permite construir gráficos complejos de manera modular y reproducible.\n\n#### Estructura básica de ggplot2\n\nLa estructura general de un gráfico en ggplot2 sigue esta sintaxis:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = DATOS, aes(x = VARIABLE_X, y = VARIABLE_Y)) +\n  GEOM_FUNCION() +     \n  labs(title = \"Título del gráfico\", \n       x = \"Etiqueta eje X\", \n       y = \"Etiqueta eje Y\")\n```\n:::\n\n\n\n\n\n\n-   **`data`**: El conjunto de datos que se usará para el gráfico.\n\n-   **`aes()`**: Define las variables estéticas (ejes, colores, tamaños, etc.).\n\n-   **`GEOM_FUNCION()`**: Especifica el tipo de gráfico (e.g., barras, puntos, líneas).\n\n-   **`labs()`**: Añade etiquetas y títulos.\n\n#### Ejemplo 1: Crear un histograma\n\nUn histograma es útil para explorar la distribución de una variable numérica.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear un histograma de la variable \"peso\"   \nggplot(data = datos_2002, aes(x = PESO_lbs)) +  \n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"black\") +     \n  labs(title = \"Distribución del peso de los estudiantes\",\n       x = \"Peso (libras)\",\n       y = \"Frecuencia\")   \n```\n\n::: {.cell-output-display}\n![](teoria_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n-   **`geom_histogram()`**: Crea el histograma.\n\n-   **`binwidth`**: Define el ancho de las barras.\n\n#### Ejemplo 2: Crear un scatterplot\n\nUn scatterplot permite explorar la relación entre dos variables numéricas.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relación entre peso y edad   \nggplot(data = datos_2002, aes(x = EDAD, y = PESO_lbs)) +\n  geom_point(color = \"blue\", size = 3) +     \n  labs(title = \"Relación entre edad y peso\",          \n       x = \"Edad (años)\",          \n       y = \"Peso (libras)\")   \n```\n\n::: {.cell-output-display}\n![](teoria_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n-   **`geom_point()`**: Dibuja los puntos en el gráfico.\n\n#### Ejemplo 3: Crear un boxplot\n\nUn boxplot es útil para comparar la distribución de una variable numérica entre grupos.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Comparar el peso por sexo   \nggplot(data = datos_2002, aes(x = SEXO, y = PESO_lbs, fill = SEXO)) +\n  geom_boxplot() +     \n  labs(title = \"Distribución del peso por sexo\",\n       x = \"Sexo\",          \n       y = \"Peso (libras)\")   \n```\n\n::: {.cell-output-display}\n![](teoria_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n-   **`fill`**: Colorea las cajas según el grupo.\n\n### Exportación de resultados: Guardar gráficos y tablas\n\nUna vez que se han generado gráficos o tablas, es importante exportarlos para su uso en informes o presentaciones. R ofrece funciones para guardar resultados en formatos como PNG, PDF o CSV.\n\n#### Guardar gráficos con ggsave()\n\nLa función **`ggsave()`** permite guardar el último gráfico generado.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Guardar un gráfico en formato PNG   \nggsave(\"grafico_peso.png\", width = 8, height = 6, dpi = 300)      \n# Guardar un gráfico en formato PDF   \nggsave(\"grafico_peso.pdf\", width = 8, height = 6)   \n```\n:::\n\n\n\n\n\n\n-   **`width` y `height`**: Dimensiones del gráfico.\n\n-   **`dpi`**: Resolución del gráfico (300 es ideal para publicaciones).\n\n#### Guardar tablas en formato CSV\n\nPara exportar un data frame como archivo CSV, se utiliza la función **`write.csv()`**.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Guardar el data frame en un archivo CSV   \nwrite.csv(datos_2002, \"datos_estudiantes.csv\", row.names = FALSE)   \n```\n:::\n\n\n\n\n\n\n-   **`row.names = FALSE`**: Evita incluir los índices como una columna adicional.\n\n## Material de apoyo\n\n1.  [Guia de instalación de R y RStudio elaborada por el Dr. Byron Gonzalez](https://docs.google.com/document/d/14X8fiHfUgwDuEH1RrK8qPrURduVoowQ4/edit?usp=sharing&ouid=106152052819657144907&rtpof=true&sd=true)\n\n2.  [Tutorial en YouTube \"Cómo instalar R y RStudio en menos de 2 minutos - 2024\". Elaborado por Herbert Lizama.](https://www.youtube.com/watch?v=hbgzW3Cvda4)\n\n3.  [R para ciencia de datos por Handley Wickham & Garrett Grolemund](https://es.r4ds.hadley.nz/03-visualize.html)\n\n## Referencias\n\nAllaire, J. J., Xie, Y., & McPherson, J. (2022). R Markdown: The Definitive Guide. Chapman & Hall/CRC. <https://www.taylorfrancis.com/books/mono/10.1201/9781138359444/markdown-yihui-xie-allaire-garrett-grolemund>\n\nIhaka, R., & Gentleman, R. (1996). R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics, 5(3), 299–314.\n\nR Core Team. (2023). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. <https://www.Rproject.org>\n\nBaker, M. (2016). 1,500 scientists lift the lid on reproducibility. *Nature, 533*(7604), 452–454. <https://doi.org/10.1038/533452a>\n\nNational Academies of Sciences, Engineering, and Medicine. (2019). *Reproducibility and replicability in science*. National Academies Press. <https://doi.org/10.17226/25303>\n\nThe Turing Way Community. (2023). *The Turing Way: A handbook for reproducible, ethical and collaborative research*. [https://the-turing-way.netlify.app](https://the-turing-way.netlify.app/)\n\nGentleman, R., & Temple Lang, D. (2007). Statistical analyses and reproducible research. *Journal of Computational and Graphical Statistics, 16*(1), 1-23. <https://doi.org/10.1198/106186007X178663>\n\nWilkinson, M. D. et al. (2016). The FAIR Guiding Principles for scientific data management and stewardship. *Scientific Data, 3*(1), 160018. <https://doi.org/10.1038/sdata.2016.18>\n\nKolb, D. A. (1984). *Experiential learning: Experience as the source of learning and development*. Prentice Hall.\n\nHmelo-Silver, C. E., Duncan, R. G., & Chinn, C. A. (2007). Scaffolding and achievement in problem-based and inquiry learning: A response to Kirschner, Sweller, and Clark (2006). *Educational Psychologist, 42*(2), 99–107. <https://doi.org/10.1080/00461520701263368>\n",
    "supporting": [
      "teoria_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}