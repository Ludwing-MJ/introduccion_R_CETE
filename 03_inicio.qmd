# Primeros pasos en R

Comenzar a trabajar con R y RStudio puede parecer un desafío al principio, pero con una guía clara y organizada, el proceso se vuelve mucho más accesible. Esta sección está diseñada para acompañar al usuario en sus primeros pasos dentro de este entorno de programación, abordando desde la creación de scripts hasta las mejores prácticas para organizar archivos y proyectos. Estas bases son esenciales para garantizar un flujo de trabajo eficiente, reproducible y bien estructurado.

Un script en RStudio no solo es un espacio para escribir código, sino también una herramienta clave para documentar y reproducir análisis de datos. Además, se introducirá el concepto de objetos en R, fundamentales para almacenar y manipular datos, junto con una descripción de los principales tipos de objetos (numéricos, texto, factores y lógicos). Este conocimiento inicial permitirá al usuario sentar las bases para realizar análisis estadísticos y visualizaciones de datos de manera efectiva.

## Creación de scripts en RStudio

El primer paso para trabajar en RStudio es crear un script, que es un archivo donde se escribe y guarda el código que se ejecutará en R. Existen dos métodos principales para crear un script en RStudio:

1.  **Manualmente:** En la barra de menú, seleccionar **File \> New File \> R Script**.

2.  **Utilizando atajos de teclado:** Presionar la combinación de teclas **Ctrl + Shift + N** para crear un nuevo script de manera rápida.

Una vez creado, el script se convierte en el espacio de trabajo principal donde se desarrollarán los análisis y se documentarán los pasos realizados. Es importante guardar el script desde el inicio para evitar la pérdida de trabajo.

## Guardado y organización de archivos

Guardar y organizar los archivos de manera adecuada es fundamental para mantener un flujo de trabajo eficiente y reproducible. Para guardar un script, se debe seleccionar la opción **"Save As..."** en la pestaña **"File"**, lo que permitirá elegir la ubicación y el nombre del archivo. Se recomienda seguir estas prácticas:

1.  **Nombres descriptivos y consistentes**: Utilizar nombres que describan claramente el contenido del archivo. Por ejemplo:

    Para scripts: `analisis_rendimiento.R` o `2023-10-15_analisis_maiz.R`.

    Para datos: `datos_suelo_2023.csv` o `resultados_finales.xlsx`.

2.  **Evitar espacios y caracteres especiales**: Los nombres de los archivos no deben incluir espacios ni caracteres especiales, ya que esto puede generar errores en R. En su lugar, se recomienda usar guiones bajos (`_`) o guiones medios (`-`). Por ejemplo:

    En lugar de `analisis suelo.R`, usar `analisis_suelo.R`.

3.  **Incluir fechas en un formato estandarizado**: Incorporar fechas en el formato **YYYY-MM-DD** ayuda a identificar rápidamente versiones o actualizaciones. Por ejemplo: `2023-10-15_importacion_datos.R`.

## Organización de proyectos y directorios

La organización adecuada de los archivos en carpetas específicas para cada proyecto es esencial para garantizar un flujo de trabajo ordenado. Si se utiliza un archivo de proyecto **.Rproj**, este configurará automáticamente el directorio de trabajo, lo que facilita la gestión de los archivos relacionados. Se recomienda:

**Crear una carpeta específica para cada proyecto**: Agrupar todos los elementos relacionados con un proyecto (scripts, datos, resultados) en una sola carpeta.

### Recomendaciones para la organización de archivos

La organización de archivos en RStudio es comparable a mantener una cocina bien ordenada: separar los utensilios, ingredientes y especias en lugares específicos facilita el trabajo y evita errores. Para lograrlo, se sugieren las siguientes prácticas:

1.  **Estandarizar nombres de archivos**: Usar nombres descriptivos, evitar caracteres especiales y seguir un formato uniforme.

2.  **Documentar los pasos del análisis**: Incluir comentarios en los scripts para explicar cada paso del análisis.

3.  **Utilizar proyectos de RStudio**: Crear un archivo **.Rproj** para cada proyecto, lo que asegura que el entorno de trabajo esté configurado correctamente.

4.  **Realizar copias de seguridad**: Guardar versiones importantes de los archivos en un repositorio de control de versiones (como Git) o en una ubicación segura.

## Introducción a los objetos en R

En R, todo se maneja como un objeto, lo que significa que cualquier dato o estructura que se utilice en este lenguaje se representa como un objeto. Un objeto es una entidad que almacena información y tiene atributos como nombre, tipo y, en algunos casos, dimensiones. Los objetos son fundamentales para trabajar en R, ya que permiten almacenar, manipular y analizar datos de manera eficiente (R Core Team, 2023).

### Creación de objetos en R

Para crear un objeto en R, se utiliza un operador de asignación, que puede ser `=` o `<-`. Sin embargo, el uso de `<-` es el estándar recomendado en la comunidad de R, ya que mejora la legibilidad del código y sigue las convenciones establecidas (Ihaka & Gentleman, 1996). Por ejemplo, para asignar el valor 10 a un objeto llamado `x`, se puede escribir:

```{r eval=FALSE}
# Creación del primer objeto en R
x <- 10
```

El operador `<-` indica que el valor a la derecha se asigna al nombre del objeto a la izquierda. Este enfoque es especialmente útil para mantener un código claro y organizado.

## Tipos de objetos en R

En R, los objetos pueden clasificarse en diferentes tipos según el tipo de datos que almacenan. Los principales tipos de objetos son: numéricos, texto, factores y lógicos. A continuación, se describen en detalle cada uno de ellos.

### Objetos Numéricos

Los objetos numéricos almacenan datos como números enteros o decimales. Son esenciales para representar variables cuantitativas, como edad, altura o peso. En R, los números se manejan como valores de punto flotante por defecto, lo que significa que incluso los enteros se tratan como números decimales.

Ejemplo de creación de objetos numéricos:

```{r}
# Creación de objetos numéricos
edad <- 21 
altura_m <- 1.70 
peso_lb <- 150
```

**Nota importante**: En R, el símbolo numeral (`#`) se utiliza para incluir comentarios dentro del código. Las líneas que comienzan con este símbolo no son ejecutadas por el programa. Los comentarios son útiles para documentar el código, explicar pasos específicos y facilitar su comprensión tanto para otros usuarios como para el propio autor en el futuro.

### Objetos de Texto

Los objetos de texto, también conocidos como objetos de tipo carácter, almacenan cadenas de texto. Estos se escriben entre comillas dobles (`"`) o simples (`'`). Son útiles para representar información cualitativa, como nombres, descripciones o etiquetas.

Ejemplo de creación de objetos de texto:

```{r}
# Creación de objetos tipo carácter
nombre <- "Juan" 
color_favorito <- "azul"
```

Los objetos de texto son fundamentales para trabajar con datos categóricos o descriptivos, como nombres de variables, etiquetas de gráficos o valores de texto en bases de datos.

### Objetos de Tipo Factor

Los objetos de tipo factor se utilizan para almacenar variables categóricas con niveles definidos. Estos niveles representan categorías discretas, como escalas, estados o clasificaciones. Los factores son especialmente útiles en análisis estadísticos, ya que permiten manejar variables categóricas de manera eficiente.

Ejemplo de creación de objetos tipo factor:

```{r}
# Creación de objetos tipo factor
estado_civil <- factor("soltero") 
sexo <- factor("masculino")
```

En este ejemplo, `estado_civil` y `sexo` son factores con un único nivel. Los factores también pueden tener múltiples niveles, que se definen explícitamente al crearlos. Por ejemplo:

```{r}
# Creación de un factor con múltiples niveles
estado_civil <- factor("soltero", levels = c("soltero", "casado", "divorciado"))
sexo <- factor("masculino", levels = c("masculino", "femenino"))
```

### Objetos Lógicos

Los objetos lógicos almacenan valores de tipo `TRUE` o `FALSE`, que resultan de comparaciones lógicas. Estos objetos son esenciales para realizar análisis condicionales, aplicar filtros y evaluar expresiones booleanas.

Ejemplo de creación de objetos lógicos:

```{r}
# Creación de objetos lógicos
mayoria_de_edad <- edad >= 18
mayoria_de_edad
```

En este caso, la comparación `edad >= 18` evalúa si el valor de `edad` es mayor o igual a 18. El resultado (`TRUE` o `FALSE`) se almacena en el objeto `mayoria_de_edad`.

Los objetos lógicos son ampliamente utilizados en tareas como la selección de datos, la creación de condiciones en bucles y la evaluación de reglas en análisis estadísticos.

## Conclusión

Los objetos son la base del trabajo en R, ya que permiten almacenar y manipular datos de manera estructurada y eficiente. Comprender los diferentes tipos de objetos y cómo crearlos es un paso esencial para aprovechar al máximo las capacidades de este lenguaje. Desde datos numéricos hasta factores y valores lógicos, cada tipo de objeto tiene aplicaciones específicas que facilitan el análisis estadístico y la visualización de datos (R Core Team, 2023; Ihaka & Gentleman, 1996).
