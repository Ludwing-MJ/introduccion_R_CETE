# Primeros pasos en R

Iniciar el trabajo en R y RStudio puede resultar desafiante para quienes no están familiarizados con estos entornos, pero una orientación adecuada facilita considerablemente el proceso. Esta sección guía al usuario en los aspectos fundamentales para comenzar a programar en R, desde la creación de scripts hasta la comprensión de los objetos básicos del lenguaje. Estos conocimientos iniciales son esenciales para establecer un flujo de trabajo eficiente y reproducible (Allaire et al., 2022).

## Creación de scripts en RStudio

El script es el archivo principal donde se escribe, guarda y ejecuta el código en R. Utilizar scripts no solo permite desarrollar análisis de datos, sino también documentar cada paso del proceso, lo que contribuye a la reproducibilidad y la organización del trabajo. Para crear un script en RStudio, se puede optar por dos métodos:

1.  Desde la barra de menú, seleccionar File \> New File \> R Script.

2.  Utilizar el atajo de teclado Ctrl + Shift + N para abrir un nuevo script de manera rápida.

Una vez creado, el script se convierte en el espacio central para el desarrollo de los análisis. Es recomendable guardar el archivo desde el inicio para evitar la pérdida de información y facilitar la gestión de versiones.

## Guardado y organización de archivos

Una gestión adecuada de los archivos es esencial para mantener la eficiencia y la reproducibilidad en el trabajo con R y RStudio. El uso de nombres descriptivos, la organización en carpetas y la documentación clara de los scripts contribuyen a un entorno de trabajo ordenado y profesional (Allaire et al., 2022).

### Guardado de scripts y archivos

Para guardar un script en RStudio, se debe seleccionar la opción "Save As..." en el menú "File", lo que permite definir tanto la ubicación como el nombre del archivo. Es recomendable emplear nombres que reflejen el contenido y propósito del archivo, por ejemplo: "analisis_rendimiento.R" para scripts o "datos_suelo_2023.csv" para archivos de datos. Además, se sugiere evitar espacios y caracteres especiales en los nombres, utilizando guiones bajos (\_) o guiones medios (-) para separar palabras, lo que previene posibles errores en la ejecución del código. Incluir fechas en formato estándar (YYYY-MM-DD) facilita la identificación de versiones y actualizaciones, como en "2023-10-15_importacion_datos.R".

### Organización de directorios y proyectos

La estructura de carpetas es clave para mantener el orden en los proyectos. Se recomienda crear una carpeta específica para cada proyecto, agrupando en ella todos los scripts, datos y resultados relacionados. Al trabajar con archivos de proyecto .Rproj, RStudio configura automáticamente el directorio de trabajo, lo que simplifica la gestión de archivos y reduce errores asociados a rutas incorrectas (R Core Team, 2023).

### Buenas prácticas para la organización de archivos

Para optimizar la organización y facilitar la colaboración, se aconseja:

1.  Estandarizar los nombres de archivos, siguiendo un formato uniforme y descriptivo.

2.  Documentar los pasos del análisis mediante comentarios claros en los scripts, lo que ayuda a comprender y reproducir el trabajo en el futuro.

3.  Utilizar proyectos de RStudio (.Rproj) para asegurar que el entorno de trabajo esté correctamente configurado y todos los archivos relevantes se encuentren en la misma ubicación.

4.  Realizar copias de seguridad periódicas, ya sea mediante sistemas de control de versiones como Git o almacenando archivos importantes en ubicaciones seguras.

La aplicación de estas prácticas contribuye a un flujo de trabajo más eficiente, facilita la colaboración y asegura la reproducibilidad de los análisis realizados en RStudio (Allaire et al., 2022; R Core Team, 2023).

## Introducción a los objetos en R

En R, la gestión de datos y resultados se basa en el uso de objetos. Un objeto es una entidad que almacena información y puede tener atributos como nombre, tipo y en algunos casos, dimensiones. Esta estructura permite organizar, manipular y analizar datos de manera eficiente, lo que convierte a los objetos en el pilar fundamental del trabajo en R (R Core Team, 2023).

### Creación de objetos en R

Para crear un objeto en R, se utiliza un operador de asignación, que puede ser `=` o `<-`. Sin embargo, el uso de `<-` es el estándar recomendado por la comunidad de R, ya que mejora la legibilidad del código y sigue las convenciones del lenguaje (Ihaka & Gentleman, 1996). Por ejemplo, para asignar el valor 10 a un objeto llamado `x`, se escibe:

```{r eval=FALSE}
# Creación del primer objeto en R
x <- 10
```

El valor a la derecha del operador se asigna al nombre del objeto a la izquierda. Este método facilita la organización y claridad del código.

### Buenas prácticas y documentación

En R, el símbolo numeral `#` se utiliza para incluir comentarios en el código. Los comentarios no son ejecutados y sirven para documentar el propósito de cada línea o bloque, facilitando la comprensión y el mantenimiento del script tanto para el autor como para otros usuarios (Ihaka & Gentleman, 1996).

## Tipos principales de objetos en R

R permite trabajar con diferentes tipos de objetos, cada uno adecuado para almacenar y manipular distintos tipos de datos. Los más comunes son:

### Objetos Numéricos

Los objetos numéricos almacenan datos como números enteros o decimales. Son esenciales para representar variables cuantitativas, como edad, altura o peso.

Ejemplo de creación de objetos numéricos:

```{r}
# Creación de objetos numéricos
edad <- 21 
altura_m <- 1.70 
peso_lb <- 150
```

### Objetos de Texto

Los objetos de texto, también conocidos como objetos de tipo carácter, almacenan cadenas de texto. Estos se escriben entre comillas dobles (`"`) o simples (`'`). Son útiles para representar información cualitativa, como nombres, descripciones o etiquetas.

Ejemplo de creación de objetos de texto:

```{r}
# Creación de objetos tipo carácter
nombre <- "Juan" 
color_favorito <- "azul"
```

### Objetos de Tipo Factor

Los objetos de tipo factor se utilizan para almacenar variables categóricas con niveles definidos. Estos niveles representan categorías discretas, como escalas, estados o clasificaciones. Los factores son especialmente útiles en análisis estadísticos, ya que permiten manejar variables categóricas de manera eficiente.

Ejemplo de creación de objetos tipo factor:

```{r}
# Creación de objetos tipo factor
estado_civil <- factor("soltero") 
sexo <- factor("masculino")
```

En este ejemplo, `estado_civil` y `sexo` son factores con un único nivel. Los factores también pueden tener múltiples niveles, que se definen explícitamente al crearlos. Por ejemplo:

```{r}
# Creación de un factor con múltiples niveles
estado_civil <- factor("soltero", levels = c("soltero", "casado", "divorciado"))
sexo <- factor("masculino", levels = c("masculino", "femenino"))
```

### Objetos Lógicos

Los objetos lógicos almacenan valores `TRUE` o `FALSE`, que resultan de comparaciones lógicas. Estos objetos son esenciales para realizar análisis condicionales, aplicar filtros y evaluaciones condiconales.

Ejemplo de creación de objetos lógicos:

```{r}
# Creación de objetos lógicos
mayoria_de_edad <- edad >= 18
mayoria_de_edad
```

En este ejemplo, el objeto `mayoria_de_edad` almacenará TRUE si la edad es mayor o igual a 18, y FALSE en caso contrario.
