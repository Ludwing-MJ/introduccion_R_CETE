# Estructura de datos en R

En R, las estructuras de datos son fundamentales para organizar, almacenar y manipular información de manera eficiente. Estas estructuras permiten trabajar con diferentes tipos de datos, desde valores individuales hasta colecciones complejas, facilitando el análisis estadístico y la visualización. Entre las principales estructuras de datos en R se encuentran los vectores, data frames y listas, cada una con características específicas que las hacen adecuadas para distintas tareas.

## Vectores

Un vector es la estructura de datos más básica y fundamental en R. Es una colección ordenada de elementos del mismo tipo, como números, texto o valores lógicos. Los vectores son unidimensionales, lo que significa que los datos se almacenan en una sola fila o columna. Por ejemplo, un vector puede representar una lista de edades, nombres o resultados de un experimento.

En R, los vectores son esenciales porque muchas otras estructuras de datos, como los data frames, están construidas a partir de ellos. Todos los elementos de un vector deben ser del mismo tipo de dato, lo que garantiza consistencia en las operaciones realizadas sobre ellos.

### Creación de vectores

Para crear un vector, se utiliza la función `c()`, donde los elementos se separan por comas. Por ejemplo:

```{r}
# Creación de un vector numérico
edades <- c(17, 20, 18, 25)

# Creación de un vector de texto
nombres <- c("Juan", "Ana", "Luis", "María")

# Creación de un vector lógico
mayores_de_edad <- edades >= 18
```

### Manipulación de vectores

Los vectores permiten realizar operaciones matemáticas, lógicas y de manipulación de datos. Por ejemplo, se pueden filtrar elementos, realizar cálculos o combinar vectores. Algunas operaciones comunes incluyen:

1.  **Acceso a elementos específicos:** Utilizando índices entre corchetes `[]`

```{r}
# Acceder al primer elemento del vector
edades[1]
```

2.  **Filtrado de elementos:** Aplicando condiciones lógicas.

```{r}
# Filtrar edades mayores a 20
edades[edades > 20]
```

3.  **Combinación de vectores:**

```{r}
# Combinar dos vectores
nuevo_vector <- c(edades, c(22, 21))
nuevo_vector
```

## Data frames

Un data frame es una estructura de datos tabular en R, similar a una hoja de cálculo o una tabla de base de datos. Organiza los datos en filas y columnas, donde cada columna es un vector y puede contener un tipo de dato diferente (por ejemplo, números, texto o factores). Cada fila representa una observación, y cada columna representa una variable.

Los data frames son ideales para trabajar con datos estructurados, como encuestas, experimentos o bases de datos, ya que permiten realizar análisis estadísticos y visualizaciones de manera eficiente. Además, son compatibles con muchas funciones y paquetes en R, lo que los convierte en una de las estructuras más utilizadas.

### Creación de data frames

Para crear un data frame, se utiliza la función `data.frame()`, combinando vectores de igual longitud separados por comas. Por ejemplo:

```{r}
# Creación de un data frame con vectores
datos <- data.frame(nombres,  edades,  mayores_de_edad)

# Visualización del data frame
datos
```

### Ventajas de un data frame

1.  **Estructura clara:** Cada fila representa una observación y cada columna una variable.

2.  **Compatibilidad:** Es compatible con funciones estadísticas y de visualización.

3.  **Flexibilidad:** Permite almacenar diferentes tipos de datos en columnas.

### Manipulación de data frames

Los data frames pueden manipularse fácilmente utilizando funciones como `filter()`, `select()` o `mutate()` del paquete `dplyr`. También se puede acceder a columnas específicas utilizando el operador `$`. Por ejemplo:

```{r}
# Acceso a una columna
datos$nombres

# Filtrar filas donde la edad sea mayor a 20
datos_filtrados <- datos[datos$edades > 20, ]
datos_filtrados
```

Los data frames son una herramienta poderosa para organizar y analizar datos, y su versatilidad los hace indispensables en el trabajo con R.

## Listas

Las listas son estructuras de datos más flexibles que los data frames, ya que pueden contener elementos de diferentes tipos y longitudes, como vectores, data frames, matrices o incluso funciones. Para crear una lista, se utiliza la función `list()`:

```{r}
# Creación de una lista
mi_lista <- list(
  nombres = c("Juan", "Ana"),
  edades = c(18, 20),
  datos_completos = datos
)
```

Las listas son útiles para almacenar resultados complejos o datos heterogéneos. Los elementos de una lista pueden accederse mediante índices o nombres:

```{r}
# Acceso a un elemento por nombre
mi_lista$nombres

# Acceso a un elemento por índice
mi_lista[[1]]
```

## Comparación entre data frames y listas

| **Característica** | **Data Frame** | **Lista** |
|----|----|----|
| **Estructura** | Tabular (filas y columnas) | Colección de objetos heterogéneos |
| **Tipos de datos** | Columnas con tipos diferentes | Elementos de cualquier tipo |
| **Uso principal** | Análisis estadístico y visualización | Almacenamiento de resultados complejos |
| **Acceso a elementos** | Por columnas o índices | Por nombres o índices |

Ambas estructuras son fundamentales en R, y su elección depende del tipo de datos y del análisis que se desee realizar. En análisis estadístico habitualmente se emplean los data frames para almacenar datos y las listas se emplean para almacenar los resultados de pruebas y análisis.
