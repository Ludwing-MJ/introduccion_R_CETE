# Paquetes en R

Los paquetes en R son una de las características más poderosas del lenguaje, ya que permiten extender sus capacidades básicas para realizar tareas específicas de manera eficiente. A continuación, se desarrolla esta sección donde se amplia esta característica tan importante de R.

## ¿Qué es un paquete en R?

Un paquete en R es una colección de funciones, datos y documentación que amplía las capacidades del entorno base de R. Estos paquetes son desarrollados por la comunidad de usuarios y están diseñados para resolver problemas específicos, desde la manipulación de datos hasta la visualización avanzada o el análisis estadístico especializado.

### Características principales de los paquetes

1.  **Funciones especializadas:** Cada paquete incluye funciones diseñadas para tareas específicas, como crear gráficos, realizar análisis estadísticos o manipular datos.

2.  **Documentación:** Los paquetes incluyen documentación detallada que explica cómo utilizarlos, con ejemplos prácticos.

3.  **Datos de ejemplo:** Muchos paquetes incluyen conjuntos de datos que permiten practicar y entender su funcionalidad.

### ¿Por qué usar paquetes en R?

Los paquetes son esenciales para aprovechar al máximo el potencial de R. Algunas de las razones para utilizarlos incluyen:

1.  **Extensibilidad:** Permiten realizar tareas que no están disponibles en el entorno base de R.

2.  **Eficiencia:** Simplifican procesos complejos, reduciendo el tiempo necesario para realizar análisis.

3.  **Especialización:** Existen paquetes diseñados para áreas específicas, como la agronomía ([*agricolae*](https://cran.r-project.org/web/packages/agricolae/agricolae.pdf)), la biología ([*vegan*](https://cran.r-project.org/web/packages/vegan/vegan.pdf)) o la economía ([*forecast*](https://cran.r-project.org/web/packages/forecast/forecast.pdf)).

4.  **Comunidad activa:** La comunidad de R desarrolla y mantiene una amplia variedad de paquetes, lo que garantiza su actualización y soporte.

## Instalación y carga de paquetes

La instalación de paquetes en R se realiza principalmente desde CRAN (Comprehensive R Archive Network), el repositorio oficial que alberga más de 19,000 paquetes. Para instalar un paquete, se utiliza la función `install.packages()`.

### Ejemplo básico de instalación

```{r eval=FALSE}
# Instalación del paquete ggplot2
install.packages("ggplot2")
```

### Carga de paquetes

Una vez instalado, un paquete debe cargarse en la sesión actual para poder utilizar sus funciones. Esto se realiza con la función `library()`.

```{r eval=FALSE}
# Cargar el paquete ggplot2
library(ggplot2)
```

Es importante destacar que la instalación de un paquete solo se realiza una vez, pero debe cargarse en cada nueva sesión de trabajo.

### Automatización de la instalación y carga

Para garantizar que un paquete esté disponible en el entorno de trabajo, se puede utilizar la siguiente "receta mágica", que verifica si el paquete está instalado y, en caso contrario, lo instala y carga al entorno de trabajo automáticamente:

```{r eval=FALSE}
# Verificar e instalar automáticamente un paquete
if (!require("ggplot2")) install.packages("ggplot2")
```

Esta estructura es útil para mantener el código reproducible y evitar errores al compartir scripts con otros usuarios.

## Paquetes recomendados para tareas específicas

En el contexto del análisis estadístico, algunos paquetes son especialmente útiles. A continuación, se presenta una lista de paquetes recomendados, junto con una breve descripción de su funcionalidad:

### Manipulación de datos

***dplyr***: Simplifica la manipulación de datos mediante funciones intuitivas para filtrar, seleccionar y resumir datos.

***tidyr***: Facilita la transformación de datos entre formatos ancho y largo.

### Visualización de datos

***ggplot2***: Permite crear gráficos personalizados y de alta calidad basados en la gramática de gráficos.

### Análisis estadístico básico

***stats***: Incluye funciones base para realizar pruebas t, ANOVA y regresiones.

**Análisis estadístico agronómico**

***agricolae***: Diseñado para análisis estadísticos en agronomía, como diseños experimentales y pruebas de comparación múltiple.

### Ejemplo práctico: Instalación y carga de paquetes esenciales

```{r eval=FALSE}
# Instalación y carga de paquetes esenciales

  # Incluye ggplot2, dplyr, tidyr
if (!require("tidyverse")) install.packages("tidyverse")
  # Diseños experimentales agrícolas
if (!require("agricolae")) install.packages("agricolae")
  # Importación de archivos Excel
if (!require("readxl")) install.packages("readxl")    
  # Exportación a Excel
if (!require("writexl")) install.packages("writexl")    
  # Establecer directorio de trabajo automaticamente
if (!require("rstudioapi")) install.packages("rstudioapi")

```

## Ejemplo práctico: Uso de paquetes en un flujo de trabajo

A continuación, se desarrolla un ejemplo práctico que combina varios paquetes para realizar un análisis de estadístico de datos. Para acceder al repositorio con el script de este ejemplo se pude seguir el siguiente enlace: <https://github.com/Ludwing-MJ/Paquetes_Ej>

**Contexto:** Un silvicultor quiso comparar los efectos de cinco tratamientos de preparación del terreno sobre el crecimiento inicial en altura de plántulas de pino maximinoii. Dispuso de 25 parcelas y aplicó cada tratamiento a cinco parcelas seleccionadas al azar. La plantación fue realizada manualmente y, al final de cinco años, se midió la altura de todos los pinos y se calculó la altura promedio de cada parcela. Las medidas de las parcelas (en pies) fueron las siguientes.

### Preparación del área de trabajo

Antes de empezar a trabajar en un nuevo análisis se debe crear un nuevo proyecto en R. Para esta tarea es recomendable seguir las recomendaciones de guardado y organización de archivos que se abordaron en la sección numero tres punto dos. Una vez ya se ha creado y guardado el proyecto y un script para desarrollar este análisis se procede a instalar y cargar los paquetes necesarios como se ve a continuación:

```{r message=FALSE, warning=FALSE}
# Ejemplo práctico uso de paquetes
# NOTA: Antes de trabajar hay que crear y guardar un nuevo script.
# Instalación y carga de paquetes esenciales

  ## Incluye ggplot2, dplyr, tidyr
if (!require("tidyverse")) install.packages("tidyverse")
  ## Diseños experimentales agrícolas
if (!require("agricolae")) install.packages("agricolae")
  ## Importación de archivos Excel
if (!require("readxl")) install.packages("readxl")    
  ## Exportación a Excel
if (!require("writexl")) install.packages("writexl")    
  ## Establecer directorio de trabajo automaticamente
if (!require("rstudioapi")) install.packages("rstudioapi")

```

###  Importación de los datos

Se utiliza el paquete `readxl` para importar un archivo Excel con los [datos de altura de las parcelas de pino](https://docs.google.com/spreadsheets/d/15Mgtutuaa-KYjiGgSZw95oyx0mkfp2Pd/edit?usp=sharing&ouid=106152052819657144907&rtpof=true&sd=true).

```{r eval=FALSE}
# Establecer directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
```

```{r message=FALSE, warning=FALSE}
# Importar datos desde un archivo Excel
altura_pino <- read_excel("datos_arboles.xlsx")
```

### Análisis de la varianza

Con el paquete `agricolae`, se realiza un análisis de varianza (ANOVA) para evaluar el efecto de diferentes tratamientos.

```{r}
# Análisis de varianza
modelo_anova <- aov(altura_ft ~ tratamiento, data = altura_pino)
summary(modelo_anova)

# Prueba de Tukey
comparacion_tukey <- HSD.test(modelo_anova, "tratamiento")
print(comparacion_tukey$groups)
```

### Visualización de resultados

Se utiliza `ggplot2` para crear un gráfico de cajas que muestre la distribución del rendimiento por tratamiento.

```{r}
# Visualización de resultados
ggplot(altura_pino, aes(x = tratamiento, y = altura_ft, fill = tratamiento)) +
  geom_boxplot() +
  labs(title = "Altura por Tratamiento",
       x = "Tratamiento",
       y = "Altura en pies")+
  theme_minimal()+ # Establece el tema del gráfico 
  theme(legend.position = "none")  # Remueve la leyenda redundante

```

### Exportación de resultados

Finalmente, se exportan los resultados de la prueba de tukey a un archivo Excel utilizando el paquete `writexl`. Y el gráfico generado usando la función `ggsave`.\

```{r message=FALSE, warning=FALSE}
# Exportar resultados a Excel
write_xlsx(comparacion_tukey$groups, "resultados_tukey.xlsx", col_names = T, format_headers = T, use_zip64 = F)

# Exportar gráficos
ggsave("ggplot_pino.png")
```
