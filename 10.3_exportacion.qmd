# Uso de Git y GitHub en Proyectos de R

El control de versiones y la colaboración en línea son prácticas cada vez más importantes en el análisis estadístico y la ciencia de datos. Git y GitHub permiten gestionar de manera eficiente los cambios en los archivos de un proyecto, compartir el trabajo con otros y mantener un historial completo de todas las modificaciones realizadas. Aunque estas herramientas pueden parecer complejas al principio, su integración con RStudio y su utilidad en proyectos de cualquier tamaño justifican su aprendizaje y uso desde etapas tempranas (Bryan, 2018).

## Introducción al control de versiones y colaboración

El control de versiones es una metodología que permite registrar, organizar y recuperar los cambios realizados en los archivos de un proyecto a lo largo del tiempo. Git es el sistema de control de versiones más utilizado y se integra fácilmente con RStudio, lo que facilita su adopción en proyectos de análisis estadístico.

**Ventajas del control de versiones con Git:**

1.  Permite guardar el historial de cambios, facilitando la recuperación de versiones anteriores de los archivos.

2.  Ayuda a identificar cuándo, cómo y por qué se realizaron modificaciones, lo que mejora la trazabilidad y la transparencia.

3.  Facilita la colaboración entre varios usuarios, permitiendo que cada uno trabaje en su propia copia del proyecto y luego integre los cambios.

4.  Reduce el riesgo de pérdida de información, ya que los archivos pueden ser restaurados a cualquier estado anterior.

5.  Permite experimentar con nuevas ideas sin temor a perder el trabajo anterior, gracias a la posibilidad de crear ramas (branches) y fusionarlas posteriormente.

**GitHub** es una plataforma en línea que permite alojar repositorios de Git, compartir proyectos y colaborar con otros usuarios. Además, ofrece herramientas para la gestión de proyectos, seguimiento de problemas (issues), revisión de código y documentación.

En el contexto de proyectos de R, Git y GitHub permiten mantener un registro ordenado de los scripts, datos y resultados, facilitando la colaboración y la reproducibilidad del análisis (Bryan, 2018).

## Subida de un proyecto de R a GitHub

Subir un proyecto de R a GitHub implica crear un repositorio en la plataforma y sincronizarlo con la carpeta local del proyecto. Este proceso puede realizarse desde la interfaz de RStudio o utilizando la línea de comandos. A continuación se describe el proceso paso a paso para un usuario principiante:

**1. Crear una cuenta en GitHub**\
Para comenzar, es necesario registrarse en <https://github.com/> y crear una cuenta personal.

**2. Crear un repositorio nuevo en GitHub**\
Una vez dentro de la cuenta, se debe hacer clic en el botón “New repository”. Se recomienda asignar un nombre descriptivo al repositorio (por ejemplo, “analisis_estadistico”) y, opcionalmente, agregar una breve descripción. Es posible elegir si el repositorio será público (visible para todos) o privado (solo accesible para el usuario y quienes él autorice). Al crear el repositorio, se puede dejar vacío, ya que los archivos se agregarán desde la computadora local.

**3. Inicializar Git en la carpeta del proyecto local**\
En la computadora, se debe ubicar la carpeta del proyecto de R (la que contiene el archivo `.Rproj`, los datos, el script y los resultados exportados).

1.  Si se utiliza RStudio, se puede activar el control de versiones seleccionando “Tools \> Project Options \> Git/SVN” y eligiendo Git.

2.  Si se prefiere la terminal, se debe abrir una consola en la carpeta del proyecto y ejecutar el comando:

```{r eval= FALSE}
git init
```

Esto crea una carpeta oculta llamada `.git` que permitirá a Git rastrear los cambios en los archivos del proyecto.

**4. Conectar el repositorio local con el remoto en GitHub**\

Para vincular la carpeta local con el repositorio creado en GitHub, se debe copiar la URL del repositorio (por ejemplo, `https://github.com/usuario/analisis_estadistico.git`) y ejecutar el siguiente comando en la terminal:

```{r eval=FALSE}
git remote add origin https://github.com/usuario/analisis_estadistico.git
```

**5. Agregar y confirmar los archivos del proyecto**\

Se deben agregar los archivos del proyecto al control de versiones con el comando:

```{r eval=FALSE}
git add .
```

El punto (`.`) indica que se agregarán todos los archivos de la carpeta.\

Luego, se realiza el primer “commit” (registro de cambios) con un mensaje descriptivo:

```{r eval=FALSE}
git commit -m "Primer commit: subida inicial del proyecto"
```

**6. Subir los archivos a GitHub**\

Finalmente, se suben los archivos al repositorio remoto con el comando:

```{r eval=FALSE}
git push -u origin master
```

En algunos casos, la rama principal puede llamarse “main” en lugar de “master”, por lo que el comando sería:

```{r eval=FALSE}
git push -u origin main
```

Una vez completados estos pasos, el proyecto estará disponible en GitHub, permitiendo su consulta, descarga y colaboración. Desde la interfaz web de GitHub, se pueden visualizar los archivos, el historial de cambios y la documentación del proyecto (Bryan, 2018).

## Modificación y seguimiento de proyectos en GitHub

Una vez que el proyecto está en GitHub, es posible continuar trabajando en él y mantener un registro detallado de todas las modificaciones. El flujo de trabajo básico consiste en:

**1. Realizar cambios en los archivos del proyecto**\
Por ejemplo, modificar el script de análisis, agregar nuevos datos, actualizar los resultados exportados o mejorar la documentación.

**2. Guardar los cambios en Git**\
Cada vez que se desee registrar un avance, se puede utilizar el punto para indicarle al software que suba todos los archivos que fueron modificados y realizar un commit con un mensaje descriptivo. Por ejemplo:

```{r eval=FALSE}
git add .
git commit -m "Actualización del script con nuevos gráficos"
```

Es importante que el mensaje del commit sea claro y específico, para facilitar la comprensión del historial de cambios.

**3. Sincronizar los cambios con GitHub**\

Para mantener el repositorio remoto actualizado y respaldado, se utiliza el comando:

```{r eval=FALSE}
git push
```

Esto sube los cambios al repositorio en línea, donde pueden ser consultados por otros usuarios o por el propio autor desde cualquier lugar.

**4. Visualizar el historial y colaborar**\
GitHub permite revisar el historial completo de commits, comparar versiones de archivos y, en proyectos colaborativos, gestionar solicitudes de cambio (pull requests) y comentarios. Esto facilita la colaboración y la revisión del trabajo en equipo.

El uso regular de Git y GitHub asegura que el proyecto esté siempre respaldado, documentado y listo para ser compartido o retomado en cualquier momento (Bryan, 2018).

## Importación de repositorios de GitHub para trabajo local o personal

Importar un repositorio de GitHub permite descargar una copia completa del proyecto para trabajar localmente, modificarlo o adaptarlo a nuevas necesidades. Este proceso se conoce como “clonar” un repositorio y es útil tanto para uso personal como para colaborar en proyectos de otros usuarios.

**Pasos para clonar un repositorio de GitHub:**

**1. Obtener la URL del repositorio**\
En la página del repositorio en GitHub, hacer clic en el botón “Code” y copiar la URL que aparece (por ejemplo, `https://github.com/usuario/analisis_estadistico.git`).

**2. Clonar el repositorio en la computadora local**\
Abrir una terminal o la consola de RStudio y ejecutar el siguiente comando:

```{r eval=FALSE}
git clone https://github.com/usuario/analisis_estadistico.git
```

Esto creará una carpeta local con todos los archivos y el historial del proyecto.

**3. Trabajar localmente**\
Una vez clonado el repositorio, se puede abrir la carpeta en RStudio, modificar los archivos, ejecutar los scripts y exportar nuevos resultados. Si se tiene permiso para hacerlo, los cambios pueden subirse nuevamente a GitHub con los comandos `git add`, `git commit` y `git push`. Si el objetivo es solo uso personal, los cambios pueden mantenerse localmente sin necesidad de sincronizarlos con el repositorio remoto.

**Ventajas de clonar repositorios:**

1.  Permite reutilizar análisis existentes y aprender de otros proyectos.

2.  Facilita la colaboración en equipo, ya que todos los miembros trabajan con la misma versión del proyecto.

3.  Asegura la trazabilidad y la integridad del trabajo, ya que todo el historial de cambios se conserva.

La importación de repositorios es una práctica recomendada para quienes desean aprovechar recursos existentes, colaborar en proyectos abiertos o mantener una copia de seguridad de su trabajo (Bryan, 2018).
