# Introducción al control de versiones y la colaboración reproducible

El control de versiones y la colaboración en línea son prácticas cada vez más importantes en el análisis estadístico y la ciencia de datos. Git y GitHub permiten gestionar de manera eficiente los cambios en los archivos de un proyecto, compartir el trabajo con otros y mantener un historial completo de todas las modificaciones realizadas. Aunque estas herramientas pueden parecer complejas al principio, su integración con RStudio y su utilidad en proyectos de cualquier tamaño justifican su aprendizaje y uso desde etapas tempranas (Bryan, 2018).

## ¿Qué es Git y por qué es importante?

Git es un sistema de control de versiones distribuido ampliamente adoptado en la comunidad científica y de desarrollo de software. Su principal fortaleza radica en la capacidad de gestionar de manera eficiente el historial de cambios, facilitar la colaboración entre múltiples usuarios y permitir la experimentación segura mediante la creación de ramas (branches) (Bryan, 2018; The Turing Way Community, 2023).

La integración de Git con entornos de desarrollo como RStudio simplifica su uso en proyectos de cualquier tamaño. Esta integración permite restaurar versiones anteriores de los archivos, identificar el origen y la motivación de las modificaciones, y experimentar con nuevas ideas sin comprometer el trabajo previo. Además, Git ayuda a reducir el riesgo de pérdida de información, ya que los archivos pueden ser restaurados a cualquier estado anterior (Bryan, 2018).

![](Git-logo.png){fig-align="center" width="500"}

## GitHub: Plataforma para la colaboración y la ciencia abierta

GitHub es una plataforma en línea que permite alojar repositorios de Git, compartir proyectos y colaborar con otros usuarios. Ofrece herramientas para la gestión de proyectos, seguimiento de incidencias (issues), revisión de código y documentación, lo que la convierte en un recurso esencial para la ciencia de datos reproducible y la investigación colaborativa (Grolemund & Wickham, 2017; The Turing Way Community, 2023).

En el contexto de proyectos de R, Git y GitHub permiten mantener un registro ordenado de los scripts, datos y resultados, facilitando la colaboración y la reproducibilidad del análisis. Estas herramientas son recomendadas desde las etapas iniciales de cualquier proyecto, ya que su adopción temprana contribuye a la integridad y transparencia del trabajo científico (Bryan, 2018).

![](GitHub-Emblem.png){fig-align="center" width="500"}

## Publicación y sincronización de proyectos de R en GitHub

La publicación de un proyecto de R en GitHub implica la creación de un repositorio en la plataforma y su sincronización con la carpeta local del proyecto. Este proceso puede realizarse tanto desde la interfaz gráfica de RStudio como mediante la línea de comandos, y es recomendable implementarlo desde el inicio del proyecto para garantizar la trazabilidad y la colaboración efectiva (Bryan, 2018).

### Pasos para publicar un proyecto de R en GitHub

Antes de comenzar a utilizar Git y GitHub, es fundamental tener Git instalado en el ordenador. Git es el sistema de control de versiones que permite gestionar los cambios en los archivos del proyecto y sincronizarlos con el repositorio remoto en GitHub.

Para descargar e instalar Git, se puede acceder a la página oficial de Git (<https://git-scm.com/downloads>) y seguir las instrucciones correspondientes al sistema operativo utilizado (Windows, macOS o Linux). Una vez instalado, Git estará disponible para ser utilizado desde la línea de comandos o a través de la interfaz de RStudio (Bryan, 2018).

1.  **Creación de una cuenta y repositorio en GitHub:** El primer paso consiste en crear una cuenta personal en [GitHub](https://github.com/). Una vez registrado, se debe crear un nuevo repositorio, asignándole un nombre descriptivo y, opcionalmente, una breve descripción. Es posible elegir entre un repositorio público o privado, según las necesidades del proyecto.

2.  **Inicialización de Git en la carpeta local del proyecto:** En la computadora local, se debe ubicar la carpeta del proyecto de R (que contiene el archivo `.Rproj`, los datos, los scripts y los resultados exportados). En RStudio, se activa el control de versiones desde el menú “Tools \> Project Options \> Git/SVN”, seleccionando Git. Alternativamente, en la terminal, se ejecuta el comando:

    ```{r eval=FALSE}
    git init
    ```

    Esto crea una carpeta oculta llamada `.git` que permitirá a Git rastrear los cambios en los archivos del proyecto.

3.  **Conexión del repositorio local con el repositorio remoto en GitHub:** Para vincular la carpeta local con el repositorio creado en GitHub, se debe copiar la URL del repositorio (por ejemplo, `https://github.com/usuario/analisis_estadistico.git`) y ejecutar el siguiente comando en la terminal:

    ```{r eval=FALSE}
    git remote add origin https://github.com/usuario/repositorio.git
    ```

4.  **Agregado y confirmación de archivos:** Se agregan los archivos del proyecto al control de versiones con el comando:

    ```{r eval=FALSE}
    git add .
    ```

    El punto (`.`) indica que se agregarán todos los archivos de la carpeta.\

    Luego, se realiza el primer registro de cambios (commit) con un mensaje descriptivo:

    ```{r eval=FALSE}
    git commit -m "Primer commit: subida inicial del proyecto"
    ```

5.  **Subida de archivos al repositorio remoto:** Finalmente, los archivos se suben al repositorio remoto con el comando:

    ```{r eval=FALSE}
    git push -u origin main
    ```

    Cabe señalar que la rama principal puede denominarse “main” o “master”, dependiendo de la configuración del repositorio. Una vez completados estos pasos, el proyecto estará disponible en GitHub, permitiendo su consulta, descarga y colaboración (Bryan, 2018; Grolemund & Wickham, 2017).

## Modificación, seguimiento y colaboración en proyectos de GitHub

Una vez que el proyecto está alojado en GitHub, es posible continuar su desarrollo y mantener un registro detallado de todas las modificaciones. El flujo de trabajo básico consiste en realizar cambios en los archivos del proyecto, registrar estos cambios mediante commits con mensajes claros y específicos, y sincronizarlos con el repositorio remoto utilizando el comando `git push` (Bryan, 2018).

### Registro y documentación de cambios

La claridad en los mensajes de commit es fundamental para facilitar la comprensión del historial de cambios y la revisión por parte de otros colaboradores. Se recomienda que cada mensaje sea breve, descriptivo y específico respecto a las modificaciones realizadas.

### Sincronización y colaboración

Para mantener el repositorio remoto actualizado y respaldado, se utiliza el comando `git push`, que sube los cambios al repositorio en línea. GitHub permite visualizar el historial completo de commits, comparar versiones de archivos y gestionar solicitudes de cambio (pull requests), lo que favorece la colaboración y la revisión del trabajo en equipo (The Turing Way Community, 2023).

### Ventajas de la colaboración con Git y GitHub

El uso regular de Git y GitHub asegura que el proyecto esté siempre respaldado, documentado y listo para ser compartido o retomado en cualquier momento, promoviendo así la reproducibilidad y la transparencia en la investigación científica (Gentleman & Temple Lang, 2007; National Academies of Sciences, Engineering, and Medicine, 2019).

## Importación y reutilización de repositorios de GitHub

La importación de repositorios de GitHub, conocida como “clonación”, permite descargar una copia completa de un proyecto para trabajar localmente, modificarlo o adaptarlo a nuevas necesidades. Este procedimiento es útil tanto para uso personal como para la colaboración en proyectos de otros usuarios (Bryan, 2018).

### Pasos para clonar un repositorio

1.  Obtener la URL del repositorio desde la página del proyecto en GitHub.

2.  Ejecutar el siguiente comando en la terminal o consola de RStudio:

    ```{r eval=FALSE}
    git clone https://github.com/usuario/analisis_estadistico.git
    ```

    Esto crea una carpeta local con todos los archivos y el historial del proyecto.

### Trabajo local y sincronización de cambios

Una vez clonado el repositorio, es posible modificar los archivos, ejecutar scripts y exportar nuevos resultados. Si se cuenta con los permisos necesarios, los cambios pueden subirse nuevamente a GitHub mediante los comandos `git add`, `git commit` y `git push`. En caso contrario, los cambios pueden mantenerse localmente.

### Beneficios de la reutilización de repositorios

Clonar repositorios facilita la reutilización de análisis existentes, el aprendizaje a partir de otros proyectos y la colaboración en equipo, asegurando la trazabilidad y la integridad del trabajo (Bryan, 2018; The Turing Way Community, 2023).

## Recursos adicionales para el aprendizaje continuo

Para quienes deseen profundizar en el uso de Git y GitHub en el contexto de R y la ciencia de datos, se recomienda consultar los siguientes recursos:

1.  **Libro recomendado: Happy Git and GitHub for the useR"** de Jenny Bryan (2018) es una guía completa y accesible, disponible de forma gratuita en línea, que cubre desde los conceptos básicos del control de versiones hasta técnicas avanzadas de colaboración y gestión de proyectos en GitHub. El libro está orientado específicamente a usuarios de R y ofrece ejemplos prácticos y actualizados para el análisis estadístico y la ciencia de datos (Bryan, 2018).

2.  **Manual colaborativo: The Turing Way** (The Turing Way Community, 2023) es un manual colaborativo que aborda la reproducibilidad, la ética y la colaboración en la investigación científica. Este recurso proporciona información detallada sobre el uso de Git y GitHub en proyectos de ciencia abierta, con énfasis en las buenas prácticas y la gestión de datos.

Ambos recursos constituyen una base sólida para el aprendizaje continuo y la aplicación efectiva de Git y GitHub en proyectos de R, contribuyendo a la mejora de la reproducibilidad, la transparencia y la colaboración en la investigación científica (Gentleman & Temple Lang, 2007; National Academies of Sciences, Engineering, and Medicine, 2019).
