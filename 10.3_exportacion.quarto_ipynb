{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Uso de Git y GitHub en Proyectos de R\n",
        "\n",
        "El control de versiones y la colaboración en línea son prácticas cada vez más importantes en el análisis estadístico y la ciencia de datos. Git y GitHub permiten gestionar de manera eficiente los cambios en los archivos de un proyecto, compartir el trabajo con otros y mantener un historial completo de todas las modificaciones realizadas. Aunque estas herramientas pueden parecer complejas al principio, su integración con RStudio y su utilidad en proyectos de cualquier tamaño justifican su aprendizaje y uso desde etapas tempranas (Bryan, 2018).\n",
        "\n",
        "## Introducción al control de versiones y colaboración\n",
        "\n",
        "El control de versiones es una metodología que permite registrar, organizar y recuperar los cambios realizados en los archivos de un proyecto a lo largo del tiempo. Git es el sistema de control de versiones más utilizado y se integra fácilmente con RStudio, lo que facilita su adopción en proyectos de análisis estadístico.\n",
        "\n",
        "**Ventajas del control de versiones con Git:**\n",
        "\n",
        "1.  Permite guardar el historial de cambios, facilitando la recuperación de versiones anteriores de los archivos.\n",
        "\n",
        "2.  Ayuda a identificar cuándo, cómo y por qué se realizaron modificaciones, lo que mejora la trazabilidad y la transparencia.\n",
        "\n",
        "3.  Facilita la colaboración entre varios usuarios, permitiendo que cada uno trabaje en su propia copia del proyecto y luego integre los cambios.\n",
        "\n",
        "4.  Reduce el riesgo de pérdida de información, ya que los archivos pueden ser restaurados a cualquier estado anterior.\n",
        "\n",
        "5.  Permite experimentar con nuevas ideas sin temor a perder el trabajo anterior, gracias a la posibilidad de crear ramas (branches) y fusionarlas posteriormente.\n",
        "\n",
        "**GitHub** es una plataforma en línea que permite alojar repositorios de Git, compartir proyectos y colaborar con otros usuarios. Además, ofrece herramientas para la gestión de proyectos, seguimiento de problemas (issues), revisión de código y documentación.\n",
        "\n",
        "En el contexto de proyectos de R, Git y GitHub permiten mantener un registro ordenado de los scripts, datos y resultados, facilitando la colaboración y la reproducibilidad del análisis (Bryan, 2018).\n",
        "\n",
        "## Subida de un proyecto de R a GitHub\n",
        "\n",
        "Subir un proyecto de R a GitHub implica crear un repositorio en la plataforma y sincronizarlo con la carpeta local del proyecto. Este proceso puede realizarse desde la interfaz de RStudio o utilizando la línea de comandos. A continuación se describe el proceso paso a paso para un usuario principiante:\n",
        "\n",
        "**1. Crear una cuenta en GitHub**\\\n",
        "Para comenzar, es necesario registrarse en <https://github.com/> y crear una cuenta personal.\n",
        "\n",
        "**2. Crear un repositorio nuevo en GitHub**\\\n",
        "Una vez dentro de la cuenta, se debe hacer clic en el botón “New repository”. Se recomienda asignar un nombre descriptivo al repositorio (por ejemplo, “analisis_estadistico”) y, opcionalmente, agregar una breve descripción. Es posible elegir si el repositorio será público (visible para todos) o privado (solo accesible para el usuario y quienes él autorice). Al crear el repositorio, se puede dejar vacío, ya que los archivos se agregarán desde la computadora local.\n",
        "\n",
        "**3. Inicializar Git en la carpeta del proyecto local**\\\n",
        "En la computadora, se debe ubicar la carpeta del proyecto de R (la que contiene el archivo `.Rproj`, los datos, el script y los resultados exportados).\n",
        "\n",
        "1.  Si se utiliza RStudio, se puede activar el control de versiones seleccionando “Tools \\> Project Options \\> Git/SVN” y eligiendo Git.\n",
        "\n",
        "2.  Si se prefiere la terminal, se debe abrir una consola en la carpeta del proyecto y ejecutar el comando:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval= FALSE}\n",
        "git init\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Esto crea una carpeta oculta llamada `.git` que permitirá a Git rastrear los cambios en los archivos del proyecto.\n",
        "\n",
        "**4. Conectar el repositorio local con el remoto en GitHub**\\\n",
        "\n",
        "Para vincular la carpeta local con el repositorio creado en GitHub, se debe copiar la URL del repositorio (por ejemplo, `https://github.com/usuario/analisis_estadistico.git`) y ejecutar el siguiente comando en la terminal:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval=FALSE}\n",
        "git remote add origin https://github.com/usuario/analisis_estadistico.git\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**5. Agregar y confirmar los archivos del proyecto**\\\n",
        "\n",
        "Se deben agregar los archivos del proyecto al control de versiones con el comando:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval=FALSE}\n",
        "git add .\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "El punto (`.`) indica que se agregarán todos los archivos de la carpeta.\\\n",
        "\n",
        "Luego, se realiza el primer “commit” (registro de cambios) con un mensaje descriptivo:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval=FALSE}\n",
        "git commit -m \"Primer commit: subida inicial del proyecto\"\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**6. Subir los archivos a GitHub**\\\n",
        "\n",
        "Finalmente, se suben los archivos al repositorio remoto con el comando:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval=FALSE}\n",
        "git push -u origin master\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "En algunos casos, la rama principal puede llamarse “main” en lugar de “master”, por lo que el comando sería:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash eval=FALSE}\n",
        "git push -u origin main\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Una vez completados estos pasos, el proyecto estará disponible en GitHub, permitiendo su consulta, descarga y colaboración. Desde la interfaz web de GitHub, se pueden visualizar los archivos, el historial de cambios y la documentación del proyecto (Bryan, 2018).\n",
        "\n",
        "## Modificación y seguimiento de proyectos en GitHub\n",
        "\n",
        "Una vez que el proyecto está en GitHub, es posible continuar trabajando en él y mantener un registro detallado de todas las modificaciones. El flujo de trabajo básico consiste en:\n",
        "\n",
        "**1. Realizar cambios en los archivos del proyecto**\\\n",
        "Por ejemplo, modificar el script de análisis, agregar nuevos datos, actualizar los resultados exportados o mejorar la documentación.\n",
        "\n",
        "**2. Guardar los cambios en Git**\\\n",
        "Cada vez que se desee registrar un avance, se deben agregar los archivos modificados y realizar un commit con un mensaje descriptivo. Por ejemplo:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash}\n",
        "git add analisis.R\n",
        "git commit -m \"Actualización del script con nuevos gráficos\"\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Es importante que el mensaje del commit sea claro y específico, para facilitar la comprensión del historial de cambios.\n",
        "\n",
        "**3. Sincronizar los cambios con GitHub**\\\n",
        "\n",
        "Para mantener el repositorio remoto actualizado y respaldado, se utiliza el comando:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash}\n",
        "git push\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Esto sube los cambios al repositorio en línea, donde pueden ser consultados por otros usuarios o por el propio autor desde cualquier lugar.\n",
        "\n",
        "**4. Visualizar el historial y colaborar**\\\n",
        "GitHub permite revisar el historial completo de commits, comparar versiones de archivos y, en proyectos colaborativos, gestionar solicitudes de cambio (pull requests) y comentarios. Esto facilita la colaboración y la revisión del trabajo en equipo.\n",
        "\n",
        "El uso regular de Git y GitHub asegura que el proyecto esté siempre respaldado, documentado y listo para ser compartido o retomado en cualquier momento (Bryan, 2018)."
      ],
      "id": "e2af88bb"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}