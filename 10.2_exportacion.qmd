# Exportación de Resultados de Análisis en R

La exportación de resultados constituye una etapa fundamental en el análisis estadístico de datos, ya que permite almacenar y compartir los productos del análisis, como gráficos y tablas, para su posterior utilización en informes, presentaciones o análisis adicionales. La correcta elección del formato de exportación garantiza la accesibilidad, reutilización y compatibilidad de los resultados con otras herramientas y plataformas (R Core Team, 2023; Wickham, 2016).

En el contexto del análisis estadístico clásico, la exportación de resultados facilita la comunicación de hallazgos y la integración de los mismos en documentos científicos, reportes técnicos o presentaciones. R ofrece funciones específicas para exportar tanto gráficos como tablas de datos en los formatos más utilizados en la práctica profesional y académica, asegurando la calidad y la fidelidad de la información exportada (R Core Team, 2023).

## Exportación de gráficos: formatos PNG y PDF

La exportación de gráficos es fundamental para documentar visualmente los resultados del análisis. En R, la función `ggsave()` del paquete ggplot2 permite guardar gráficos en diversos formatos, siendo PNG y PDF los más empleados en la estadística clásica.

### Sintaxis general de ggsave()

La función `ggsave()` del paquete ggplot2 permite guardar gráficos en diferentes formatos. Su sintaxis básica es:

```{r eval= FALSE}
ggsave(
  filename,
  plot = last_plot(),
  device = NULL,
  path = NULL,
  scale = 1,
  width = NA,
  height = NA,
  units = c("in", "cm", "mm"),
  dpi = 300,
  limitsize = TRUE
)
```

A continuación, se describen los argumentos principales de la función:

1.  **filename**: Es el nombre del archivo de salida, incluyendo la extensión (por ejemplo, `"grafico.png"` o `"grafico.pdf"`). La extensión determina el formato del archivo.

2.  **plot**: Permite especificar el objeto gráfico que se desea guardar. Si se omite, se guarda el último gráfico creado en la sesión de R.

3.  **device**: Indica el tipo de formato del archivo, como `"png"` o `"pdf"`. Si no se especifica, el formato se deduce automáticamente a partir de la extensión del archivo.

4.  **path**: Define el directorio donde se guardará el archivo. Si no se proporciona, el archivo se guarda en el directorio de trabajo actual.

5.  **scale**: Ajusta el tamaño del gráfico multiplicando las dimensiones especificadas en width y height por el valor de scale. El valor predeterminado es 1 (tamaño original).

6.  **width y height**: Determinan el ancho y la altura del gráfico en las unidades especificadas por units. Si no se definen, se usan las dimensiones predeterminadas.

7.  **units**: Especifica las unidades de medida para width y height. Puede ser "in" (pulgadas), "cm" (centímetros) o "mm" (milímetros).

8.  **dpi**: Define la resolución del gráfico en puntos por pulgada, relevante para formatos rasterizados como PNG. El valor predeterminado es 300, adecuado para impresión.

9.  **limitsize**: Controla si se permite guardar gráficos con dimensiones muy grandes (mayores a 50 pulgadas). Si está en TRUE, se genera un error al intentar guardar gráficos excesivamente grandes.

Esta explicación permite comprender tanto la estructura general de la función como el propósito de cada argumento, facilitando su uso correcto en la exportación de gráficos en R (Wickham, 2016).

### Ejemplo práctico: creación y exportación de un gráfico

Supóngase que se ha creado un gráfico de barras con ggplot2:

```{r message=FALSE, warning=FALSE}
# Cargar el paquete tidyverse, que incluye ggplot2
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)

# Importar una base de datos de ejemplo
datos <- read_csv("datos_estudiantes.csv")

# Crear un gráfico de barras
mi_grafico <- ggplot(data = datos, aes(x = FACULTAD)) +
  geom_bar(fill = "steelblue", color = "black", alpha = 0.8) +
  labs(
    title = "Distribución de estudiantes por facultad",
    subtitle = "Datos del estudio de 2002, USAC",
    x = "Facultad",
    y = "Cantidad de estudiantes",
    caption = "Fuente: Estudio realizado en 2002"
  ) +
  theme_minimal()+                  
  theme(
    axis.text.x = element_text( 
      angle = 45,                       
      hjust = 1                       
    )
  )
mi_grafico
```

**Guardar el gráfico en formato PNG**

```{r}
# Guardar el gráfico en formato PNG con dimensiones de 8x6 pulgadas
ggsave(
  filename = "grafico.png", # Nombre del archivo de salida
  plot = mi_grafico,        # Objeto gráfico a guardar
  width = 8,                # Ancho en pulgadas
  height = 6,               # Alto en pulgadas
  dpi = 300                 # Resolución adecuada para impresión
)
```

En este ejemplo, el archivo “grafico.png” se guardará en el directorio de trabajo actual, con alta calidad para impresión o presentaciones digitales.

**Guardar el gráfico en formato PDF**

```{r}
# Guardar el gráfico en formato PDF con dimensiones de 8x6 pulgadas
ggsave(
  filename = "grafico.pdf", # Nombre del archivo de salida
  plot = mi_grafico,        # Objeto gráfico a guardar
  width = 8,                # Ancho en pulgadas
  height = 6                # Alto en pulgadas
  # No es necesario especificar dpi, ya que PDF es un formato vectorial
)
```

El formato PDF es ideal para informes y publicaciones científicas, ya que permite escalar el gráfico sin pérdida de calidad (Wickham, 2016).

## Exportación de tablas de datos: formatos CSV y Excel

La exportación de tablas de datos es fundamental para compartir información, documentar resultados o realizar análisis adicionales en otras herramientas. Los formatos más utilizados en la estadística clásica son CSV y Excel, por su compatibilidad y facilidad de uso.

### Exportar a CSV con write.csv()

La función `write.csv()` permite exportar un data frame o matriz a un archivo de texto plano en formato CSV (Comma Separated Values). Este formato es ampliamente compatible con programas de hojas de cálculo y software estadístico.

**Sintaxis general de `write.csv():`**

```{r eval=FALSE}
write.csv(
  x,           
  file,        
  row.names = TRUE,   
  na = "NA",          
  fileEncoding = "",  
)
```

**Explicación de los argumentos principales:**

1.  **x**: Es el objeto de datos que se desea exportar, generalmente un data frame o una matriz.

2.  **file**: Especifica el nombre del archivo de salida, incluyendo la extensión `.csv`. El archivo se guardará en el directorio de trabajo actual, a menos que se indique una ruta diferente.

3.  **row.names**: Indica si se deben incluir los nombres de las filas como una columna adicional en el archivo exportado. El valor predeterminado es `TRUE`, pero es común establecerlo en `FALSE` para evitar agregar una columna innecesaria.

4.  **na**: Define la cadena de texto que se utilizará para representar los valores faltantes (`NA`) en el archivo exportado. El valor predeterminado es `"NA"`.

5.  **fileEncoding**: Permite especificar la codificación del archivo de salida, útil para asegurar la compatibilidad con otros sistemas operativos o programas. El valor predeterminado es una cadena vacía, lo que significa que se utiliza la codificación por defecto del sistema.

**Ejemplo:**

```{r}
# Crear un data frame de ejemplo
mi_tabla <- data.frame(
  Nombre = c("Ana", "Luis", "María"),
  Edad = c(25, 30, 22),
  Ciudad = c("Madrid", "Barcelona", "Valencia")
)

# Exportar el data frame a un archivo CSV
write.csv(
  x = mi_tabla,         # Objeto de datos a exportar
  file = "resultados.csv", # Nombre del archivo de salida
  row.names = FALSE     # No incluir los nombres de las filas 
)
```

El archivo “resultados.csv” se guardará en el directorio de trabajo actual y podrá ser abierto en cualquier editor de texto o programa de hojas de cálculo (R Core Team, 2023).

### Exportar a Excel con write_xlsx() del paquete writexl

La función `write_xlsx()` del paquete writexl permite exportar un data frame o una lista de data frames a un archivo en formato Excel (`.xlsx`). Este formato es ideal para compartir datos estructurados y aprovechar las funcionalidades avanzadas de hojas de cálculo.

**Sintaxis general de `write_xlsx()`**

```{r eval=FALSE}
write_xlsx(
  x,           # Objeto de datos a exportar 
  path,        # Nombre del archivo de salida 
  col_names = TRUE, 
  format_headers = TRUE 
)
```

**Explicación de los argumentos principales:**

1.  **x**: Es el objeto de datos a exportar, que puede ser un data frame o una lista de data frames (en este caso, cada data frame se guardará en una hoja diferente del archivo Excel).

2.  **path**: Especifica el nombre del archivo de salida, incluyendo la extensión `.xlsx`. El archivo se guardará en el directorio de trabajo actual, a menos que se indique una ruta diferente.

3.  **col_names**: Indica si se deben incluir los nombres de las columnas en la primera fila del archivo. El valor predeterminado es `TRUE`.

4.  **format_headers**: Determina si los encabezados de las columnas deben tener un formato especial (por ejemplo, negrita). El valor predeterminado es `TRUE`.

**Ejemplo:**

```{r message=FALSE, warning=FALSE}
# Instalar y cargar el paquete writexl si no está disponible
if (!require("writexl")) install.packages("writexl")

# Exportar el data frame a un archivo Excel
write_xlsx(
  x = mi_tabla,            # Objeto de datos a exportar
  path = "resultados.xlsx" # Nombre del archivo de salida
  # col_names y format_headers se mantienen en TRUE por defecto
)
```

El archivo “resultados.xlsx” se podrá abrir en Microsoft Excel o software compatible, permitiendo aprovechar las funcionalidades avanzadas de hojas de cálculo (R Core Team, 2023).

## Comparación de formatos y recomendaciones de uso

La elección del formato de exportación depende del objetivo y del público destinatario. A continuación se presenta un cuadro comparativo que distingue entre formatos de imágenes y de datos, resumiendo sus principales características, ventajas y desventajas (Wickham, 2016; R Core Team, 2023):

| Tipo | Formato | Uso principal | Ventajas | Desventajas |
|----|----|----|----|----|
| Imagen | PNG | Presentaciones y documentos digitales | Alta calidad, ampliamente compatible | No escalable sin pérdida de calidad |
| Imagen | PDF | Publicaciones científicas e informes impresos | Escalable, ideal para impresión | Menos compatible con editores básicos |
| Datos | CSV | Análisis de datos en herramientas simples | Ligero, multiplataforma, fácil de manipular | No admite formatos complejos (fórmulas, etc) |
| Datos | Excel | Compartir datos estructurados y análisis | Compatible con herramientas avanzadas | Requiere software específico |
