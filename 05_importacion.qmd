# Importación de datos

```{r message=FALSE, warning=FALSE, echo=FALSE}
# Configuración del repositorio para la descarga de los paquetes
options(repos = c(CRAN = "https://cloud.r-project.org/"))
```

La importación de datos es un paso fundamental en cualquier análisis estadístico, ya que permite trabajar con información proveniente de diversas fuentes, como archivos CSV, Excel o páginas web. R proporciona funciones y paquetes especializados para importar datos de manera eficiente y reproducible, lo que facilita el manejo de grandes volúmenes de información (R Core Team, 2023).

## Configuración previa: el directorio de trabajo

Antes de importar datos, es esencial asegurarse de que el directorio de trabajo esté correctamente configurado. El directorio de trabajo, o *working directory*, es la carpeta desde la cual R buscará archivos y guardará los resultados generados. Una configuración adecuada del directorio de trabajo contribuye a la organización, reproducibilidad y eficiencia del análisis.

Cuando se utiliza un proyecto de RStudio (**.Rproj**), el directorio de trabajo se establece automáticamente al abrir el proyecto, lo que simplifica la gestión de archivos. Sin embargo, si se trabaja con scripts independientes, es necesario definir manualmente el directorio utilizando la función `setwd()`. Por ejemplo:

```{r eval=FALSE}
# Establecer directorio de trabajo
setwd("ruta/del/directorio")
```

Configurar el directorio de trabajo correctamente evita errores como "archivo no encontrado" y asegura que el código sea portable y replicable en diferentes computadoras o ubicaciones.

### Automatización del directorio de trabajo en scripts independientes

Para scripts que no forman parte de un proyecto, se puede automatizar la configuración del directorio de trabajo utilizando el paquete `rstudioapi`. Este método establece como directorio de trabajo la carpeta donde está guardado el script, facilitando la portabilidad y colaboración:

```{r eval=FALSE}
# Instalación y carga del paquete rstudioapi
if (!require("rstudioapi")) install.packages("rstudioapi")

# Linea empleada para establecer  el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
```

Este código verifica si el paquete `rstudioapi` está instalado y, de no ser así, lo instala automáticamente. Luego, obtiene la ruta del script actual y la utiliza para definir el directorio de trabajo, permitiendo acceder a los archivos de la carpeta sin necesidad de rutas completas.

### Verificación y buenas prácticas

Antes de importar datos o guardar resultados, es recomendable verificar el directorio de trabajo actual con la función `getwd()`:

```{r eval=FALSE}
# Verificación del directorio de trabajo actual
getwd()
```

Además, se sugiere guardar el script antes de ejecutar la configuración automática del directorio, ya que R necesita conocer la ubicación del archivo para establecer correctamente el entorno de trabajo.

Siempre que sea posible, se recomienda trabajar dentro de un proyecto de RStudio, ya que esto automatiza la gestión del directorio de trabajo y mejora la organización de los archivos relacionados con el análisis.

## Importación de archivos CSV y Excel en R

La importación de datos tabulares es una tarea fundamental en el análisis estadístico. R facilita este proceso mediante funciones y paquetes que permiten trabajar con archivos en formatos ampliamente utilizados, como CSV y Excel. Comprender cómo importar estos archivos correctamente es esencial para garantizar la integridad y reproducibilidad del análisis (Wickham, 2016; Wickham & Bryan, 2023).

### Importación de archivos CSV

Los archivos CSV (Comma-Separated Values) son ampliamente utilizados debido a su simplicidad y compatibilidad con diferentes plataformas. Para importar un archivo CSV en R, se emplea la función `read.csv()`, que permite leer datos tabulares de manera eficiente. Un ejemplo básico de uso es el siguiente:

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Importar un archivo CSV
datos <- read.csv("ruta/del/archivo/datos.csv", 
                  header = TRUE, 
                  sep = ",")

```

Los parámetros principales de esta función son:

1.  **header:** Indica si la primera fila del archivo contiene los nombres de las columnas (`TRUE`) o si los datos comienzan desde la primera fila (`FALSE`).

2.  **sep:** Especifica el carácter separador de los valores. Por defecto, es la coma (`,`), pero puede ajustarse a otros separadores como punto y coma (`;`) o tabulación (`\t`) según el formato del archivo.

### Importación de archivos Excel

Para trabajar con archivos de Excel (.xlsx), R dispone del paquete `readxl`, que permite importar datos directamente desde hojas de cálculo sin necesidad de convertir previamente el archivo a otro formato (Wickham & Bryan, 2023). El proceso recomendado es el siguiente:

1.  Instalar y cargar el paquete `readxl`.

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Instalar y cargar el paquete readxl
if (!require("readxl")) install.packages("readxl")

```

2.  Importar el archivo Excel utilizando la función `read_excel()`:

```{r eval=FALSE}
# Importar un archivo Excel
datos_excel <- read_excel("ruta/del/archivo/datos.xlsx",
                          sheet = "Hoja1",  
                          col_names = TRUE/FALSE) 

```

Los parámetros más relevantes son:

1.  **sheet**: Permite especificar el nombre o el número de la hoja que se desea importar.

2.  **col_names**: Indica si la primera fila debe ser utilizada como nombres de las columnas (`TRUE`) o si los datos comienzan desde la primera fila (`FALSE`).

## Ejemplo práctico: Base de datos de estudiantes USAC

Para consolidar los conceptos de importación de datos, se utilizará como ejemplo una base de datos recopilada en 2002 en la Universidad de San Carlos de Guatemala. Esta base contiene información de 460 estudiantes de distintas facultades y está disponible tanto en formato [CSV](https://drive.google.com/file/d/1ZUg9MUHNApvq0gHcr-KFu88ah1QI0D3O/view?usp=drive_link) como [Excel](https://docs.google.com/spreadsheets/d/1QKF09EHbp2H647jdDIYppKa1YEYd75VK/edit?usp=sharing&ouid=106152052819657144907&rtpof=true&sd=true). A lo largo del manual, esta base de datos servirá como referencia para los ejercicios y ejemplos prácticos.

### Importación de la base de datos

A continuación, se muestra cómo importar la base de datos en ambos formatos:

1.  Importar archivo CSV:

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Importar datos en formato CSV
datos_csv <- read.csv("datos_estudiantes.csv", 
                      header = TRUE, 
                      sep = ",")
```

2.  Importar archivo Excel: Primero, el usuario se debe asegurar de tener instalado y cargado el paquete `readxl`.

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Instalar y cargar el paquete readxl
if (!require("readxl")) install.packages("readxl")


# Importar datos en formato Excel
datos_excel <- read_excel("datos_estudiantes_2002.xlsx",
                         sheet = "datos",
                         col_names = TRUE)

```

### Verificación de la importación de datos

Una vez importados los datos, es fundamental comprobar que la importación se realizó correctamente. R ofrece varias funciones útiles para este propósito:

1.  Visualizar las primeras filas del conjunto de datos:

```{r eval=F}
# Visualizar las primeras filas de la base de datos
head(datos_csv)
```

2.  Examinar la estructura del data frame:

```{r eval=F}
# Examinar la estructura de la base de datos
str(datos_csv)
```

3.  Obtener un resumen estadístico básico:

```{r eval=F}
# Resumen estadístico básico de la base de datos
summary(datos_csv)
```

4.  Conocer las dimensiones del data frame (número de filas y columnas):

```{r eval=F}
# Conocer las dimensiones del data frame
dim(datos_csv)
```

### Consideraciones adicionales

1.  **Ubicación de archivos**: Cuando se trabaja con proyectos de RStudio, los archivos deben estar en el directorio del proyecto para facilitar su acceso.

2.  **Codificación de caracteres**: En caso de problemas con caracteres especiales (ñ, tildes), se puede especificar la codificación:

    ```{r eval=FALSE}
    datos <- read.csv("archivo.csv", encoding = "UTF-8")
    ```
