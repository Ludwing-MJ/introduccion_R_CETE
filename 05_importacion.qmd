# Importaci√≥n de datos

```{r message=FALSE, warning=FALSE, echo=FALSE}
# Configuraci√≥n del repositorio para la descarga de los paquetes
options(repos = c(CRAN = "https://cloud.r-project.org/"))
```

La importaci√≥n de datos es uno de los primeros pasos esenciales en cualquier an√°lisis estad√≠stico. En R, los datos pueden provenir de diversas fuentes, como archivos CSV, Excel o incluso p√°ginas web en formato HTML. La capacidad de importar datos de manera eficiente y reproducible permite trabajar con grandes vol√∫menes de informaci√≥n sin necesidad de manipularlos manualmente. Adem√°s, establecer un directorio de trabajo adecuado facilita la organizaci√≥n y asegura que los scripts sean portables y reproducibles en diferentes entornos.

En esta secci√≥n, se explicar√° c√≥mo importar datos desde archivos CSV, Excel y HTML, as√≠ como la configuraci√≥n del directorio de trabajo cuando se trabaja en un script que no pertenece a ning√∫n proyecto `.Rproj`.

## Importaci√≥n de archivos CSV

Los archivos CSV (Comma-Separated Values) son una de las formas m√°s comunes de almacenar datos tabulares. Estos archivos son ligeros, universales y f√°ciles de manejar en R. Para importar un archivo CSV, se utiliza la funci√≥n `read.csv()`, que permite leer el contenido del archivo y almacenarlo como un data frame.

### Pasos para importar de un archivo CSV

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Importar un archivo CSV
datos <- read.csv("ruta/del/archivo/datos.csv", header = TRUE, sep = ",")

# Visualizar los primeros registros del data frame
head(datos)
```

**`header = TRUE`**: Indica que el archivo tiene una fila de encabezado con los nombres de las columnas.

**`sep = ","`**: Especifica que los valores est√°n separados por comas (el argumento de esta parte de la funci√≥n puede variar si el archivo utiliza un separador distinto como por ejemplo **";"**).

**Nota:** Es importante asegurarse de que el archivo est√© en el directorio de trabajo o proporcionar la ruta completa.

### Ejemplo de importaci√≥n de un archivo CSV

En 2002, se llev√≥ a cabo un estudio en la Universidad de San Carlos de Guatemala, en el que se recopilaron datos de 460 estudiantes de diversas facultades. Esta base de datos, disponible para su descarga en formato CSV a trav√©s del siguiente [enlace](https://drive.google.com/file/d/1ZUg9MUHNApvq0gHcr-KFu88ah1QI0D3O/view?usp=sharing), incluye una amplia variedad de variables, lo que la convierte en un recurso ideal para los ejercicios pr√°cticos de este manual. A lo largo del documento, se utilizar√° esta base de datos para aplicar las herramientas y conceptos desarrollados. Para realizar el siguiente ejemplo, es necesario que el usuario descargue el archivo y lo guarde en la carpeta correspondiente al proyecto en curso.

```{r eval=FALSE}
# Importar el archivo CSV con los datos 
datos <- read.csv("datos_estudiantes.csv", header = TRUE, sep = ",")

# Visualizar los primeros registros del data frame
head(datos)
```

La funci√≥n `head()` en R se utiliza para visualizar las primeras filas de un data frame, vector, matriz u otro objeto de datos. Su prop√≥sito principal es proporcionar una vista r√°pida de los datos, permitiendo al usuario verificar la estructura, los nombres de las columnas y los primeros valores sin tener que imprimir todo el conjunto de datos.

**Nota:** En el ejemplo para importar el archivo solamente se coloc√≥ el nombre del archivo (incluyendo su extensi√≥n) sin necesidad de colocar la ruta exacta del archivo y R interpret√≥ autom√°ticamente que deb√≠a importar el archivo con ese nombre ubicado en la misma carpeta que el script. Esto se debe a que al estar trabajando en un proyecto con un directorio de trabajo establecido no hay necesidad de colocar la ruta de los archivos que se quieran importar siempre que estos se encuentren en la misma carpeta.

## Importaci√≥n de archivos Excel

Los archivos Excel son ampliamente utilizados para almacenar datos en hojas de c√°lculo. En R, se puede importar este tipo de archivos utilizando el paquete `readxl`, que permite leer datos de archivos `.xlsx` sin necesidad de convertirlos previamente a otro formato.

### Pasos para importar un archivo Excel

1.  Instalar y cargar el paquete `readxl`.

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Instalar y cargar el paquete readxl
if (!require("readxl")) install.packages("readxl")

```

**Explicaci√≥n de la linea de c√≥digo anterior**

a.  `require("nombre del paquete")`: Esta funci√≥n intenta cargar el paquete especificado. Si el paquete est√° instalado, lo carga en la sesi√≥n actual y devuelve `TRUE`. Si el paquete no est√° instalado, devuelve `FALSE`.

b.  `!require("nombre del paquete")`: El signo de exclamaci√≥n (`!`) niega el resultado de la funci√≥n `require()`. Por lo tanto, esta expresi√≥n ser√° `TRUE` si el paquete no est√° instalado o no puede ser cargado.

c.  `if (...) install.packages("nombre del paquete")`: Esta es una estructura condicional. Si la condici√≥n entre par√©ntesis es `TRUE` (es decir, si el paquete no est√° instalado o no puede ser cargado), entonces se ejecuta `install.packages("nombre del paquete")`, que descarga e instala el paquete desde el repositorio de CRAN.

<!-- -->

2.  Importar el archivo Excel

```{r eval=FALSE}
# Importar un archivo Excel
datos_excel <- read_excel("ruta/del/archivo/datos.xlsx",
                          sheet = "Hoja1", 
                          col_names = TRUE/FALSE)

# Visualizar los primeros registros del data frame
head(datos_excel)
```

**Explicaci√≥n de la linea de c√≥digo anterior**

a.  **`sheet = "Hoja1"`**: Especifica la hoja del archivo que se desea importar.

b.  **`col_names = TRUE/FALSE`**: Indica si la primera fila contiene los nombres de las columnas

### Ejemplo de importaci√≥n de un archivo Excel

En este ejemplo, se utilizar√° la misma base de datos empleada en el caso de importaci√≥n de archivos CSV. Esta base de datos, ahora en formato Excel, est√° disponible para su descarga a trav√©s de este [enlace](https://docs.google.com/spreadsheets/d/1QKF09EHbp2H647jdDIYppKa1YEYd75VK/edit?usp=sharing&ouid=106152052819657144907&rtpof=true&sd=true){.uri}. Al igual que en el ejemplo anterior para realizar este ejemplo, es necesario que el usuario descargue el archivo y lo guarde en la carpeta correspondiente al proyecto en curso.

```{r message=FALSE, warning=FALSE, eval=FALSE}
# Instalar y cargar el paquete readxl
if (!require("readxl")) install.packages("readxl")

# Importar un archivo Excel
datos_excel <- read_excel("datos_estudiantes_2002.xlsx",
                          sheet = "datos", 
                          col_names = TRUE)

# Visualizar los primeros registros del data frame
head(datos_excel)
```

## Directorio de trabajo o Working Directory

El directorio de trabajo en R puede considerarse como el "punto de partida" en un mapa: es la carpeta donde el software buscar√° autom√°ticamente los archivos necesarios (datos, scripts) y guardar√° los resultados generados. Cuando se trabaja con un script que no forma parte de un proyecto en RStudio, establecer un directorio de trabajo es esencial para garantizar la organizaci√≥n y la reproducibilidad del an√°lisis. Si no se define correctamente, se corre el riesgo de perder tiempo buscando rutas manualmente y de que el c√≥digo deje de funcionar al mover el proyecto a otra ubicaci√≥n o computadora.

### Razones para establecer un directorio de trabajo

1.  **Reproducibilidad:** Permite que el c√≥digo funcione en cualquier computadora sin depender de rutas absolutas como `C:/Usuario/MiPC/...`.

2.  **Organizaci√≥n:** Reduce errores como "archivo no encontrado" al mantener todos los elementos (datos, scripts, resultados) en una estructura clara y accesible.

3.  **Eficiencia:** Facilita el acceso a los archivos, ya que no es necesario escribir rutas completas, solo los nombres de los archivos.

### Configuraci√≥n autom√°tica del directorio de trabajo

Cuando se trabaja con scripts independientes, se puede utilizar la siguiente l√≠nea de c√≥digo para establecer autom√°ticamente el directorio de trabajo como la carpeta donde est√° guardado el script:

```{r eval=FALSE}
# Instalar y cargar el paquete rstudioapi
if (!require("rstudioapi")) install.packages("rstudioapi")

# Establecer el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

```

#### Explicaci√≥n del c√≥digo

1.  **`if (...) install.packages("rstudioapi")`** **:** Esta estructura condicional instala y carga el paquete rstudioapi necesario para que la linea de c√≥digo que estable el directorio de trabajo pueda funcionar.

2.  **`rstudioapi::getActiveDocumentContext()$path`:** Obtiene la ruta completa del script actual (por ejemplo, `C:/proyecto/scripts/analisis.R`).

3.  **`dirname()`:** Extrae la carpeta que contiene el script (por ejemplo, `C:/proyecto/scripts/` ‚Üí `C:/proyecto/`).

4.  **`setwd()`:** Establece esa carpeta como el directorio de trabajo.

#### Beneficios de establecer un directorio de trabajo

1.  **Portabilidad:** Si se mueve toda la carpeta del proyecto a otra ubicaci√≥n, el c√≥digo seguir√° funcionando sin necesidad de ajustes.

2.  **Automatizaci√≥n:** No es necesario modificar manualmente las rutas al compartir el script con otros usuarios.

#### Consecuencias de no establecer un directorio de trabajo

1.  **Errores frecuentes:** R buscar√° archivos en una ubicaci√≥n predeterminada (como la carpeta "Documentos"), lo que puede generar errores si los datos no est√°n all√≠.

2.  **C√≥digo no reproducible:** Si otra persona ejecuta el script, ser√° necesario modificar manualmente todas las rutas para que funcione.

üìå **Recomendaci√≥n:** Antes de ejecutar la l√≠nea autom√°tica, es importante guardar el script, ya que R necesita conocer su ubicaci√≥n para establecer el directorio de trabajo correctamente. Adem√°s, se puede verificar el directorio actual utilizando la funci√≥n `getwd()`.
