[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción al entorno de programacón R y su aplicacion en el análisis estadístico de datos",
    "section": "",
    "text": "Introducción\nLa ciencia de datos, con un enfoque estadístico, permite transformar datos en bruto en información comprensible y útil para la toma de decisiones. Este manual está diseñado para principiantes y busca introducir las herramientas fundamentales de R, un lenguaje ampliamente utilizado en el análisis estadístico y la ciencia de datos. A lo largo del texto, se abordan conceptos básicos y se presentan ejemplos prácticos que facilitan la comprensión de técnicas estadísticas esenciales. El objetivo es proporcionar una base sólida que permita aplicar R de manera efectiva en el análisis de datos, incluso sin experiencia previa.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1 ¿Qué es R?\nR es un lenguaje de programación y entorno computacional especializado en análisis estadístico y visualización científica, diseñado para investigación reproducible (Ihaka & Gentleman, 1996).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "11  Material de apoyo y referencias",
    "section": "",
    "text": "11.1 Material de apoyo",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Material de apoyo y referencias</span>"
    ]
  },
  {
    "objectID": "teoria.html",
    "href": "teoria.html",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "",
    "text": "1.1 ¿Qué es R?\nR es un lenguaje de programación y entorno computacional especializado en análisis estadístico y visualización científica, diseñado para investigación reproducible (Ihaka & Gentleman, 1996).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#qué-es-r",
    "href": "teoria.html#qué-es-r",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "",
    "text": "1.1.1 ¿Qué hace tan especial a R para el análisis estadístico?\n\nCódigo Abierto: Sin costos de licencia, ideal para proyectos académicos (R Core Team, 2023).\nExtensible: Hasta 2023 existen más de 19,000 paquetes disponibles en CRAN (Comprehensive R Archive Network) especializados en añadirle nuevas funciones para resolver necesidades especificas usando R, la funcionalidad de estos paquetes va desde hacer mejores gráficos de una manera sencilla hasta facilita procesos estadísticos (CRAN, 2023).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#qué-es-rstudio",
    "href": "teoria.html#qué-es-rstudio",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.2 ¿Qué es RStudio?",
    "text": "1.2 ¿Qué es RStudio?\nRStudio es un Entorno de Desarrollo Integrado (IDE) que optimiza el flujo de trabajo en R, destacándose por su sistema de proyectos y herramientas para reproducibilidad (Allaire et al., 2022).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#reproducibilidad-replicabilidad-qué-tienen-que-ver-con-r-y-rstudio",
    "href": "teoria.html#reproducibilidad-replicabilidad-qué-tienen-que-ver-con-r-y-rstudio",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.3 Reproducibilidad, Replicabilidad ¿Qué tienen que ver con R y RStudio?",
    "text": "1.3 Reproducibilidad, Replicabilidad ¿Qué tienen que ver con R y RStudio?\nEl 64% de los investigadores enfrentan dificultades para replicar estudios previos debido a documentación insuficiente (Baker, 2016).\n\nSituación: Usas Excel y/o infostat. Tus cálculos están en celdas ocultas, y los gráficos se ajustan manualmente.\nResultado: Nadie, ni tú en 6 meses, podrá repetir exactamente tu análisis.\nSolución: Realizar el análisis de los datos y la construcción de los gráficos aprovechando las herramientas que nos provee R para generar un script donde se documenta el paso a paso que se siguió para realizar el análisis y llegar a las conclusiones.\n\n\n\n\n“Un script de R es como una receta: cualquiera puede seguirla paso a paso para recrear tu ‘platillo’ científico. Así como, cualquiera puede re interpretarla para crear su propio ‘platillo’ científico.”\n\n\n\n1.3.1 Definición formal de reproducibilidad y replicabilidad\nLa reproducibilidad (capacidad de obtener los mismos resultados con los mismos datos y métodos) y la replicabilidad (consistencia de hallazgos en nuevos contextos) son fundamentales para la credibilidad científica (National Academies of Sciences, Engineering, and Medicine, 2019).\n\n\n1.3.2 Beneficios de la adopción de R para la Ciencia\n\nTransparencia: Código accesible para revisión por pares (The Turing Way Community, 2023).\nEficiencia: Reutilización de métodos en nuevos estudios (Gentleman & Temple Lang, 2007).\nCredibilidad: Cumplimiento de estándares FAIR (Wilkinson et al., 2016).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#cómo-obtengo-r-y-rstudio-para-mi-uso-personal",
    "href": "teoria.html#cómo-obtengo-r-y-rstudio-para-mi-uso-personal",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.4 ¿Cómo obtengo R y RStudio para mi uso personal?",
    "text": "1.4 ¿Cómo obtengo R y RStudio para mi uso personal?\nInstalar R y RStudio en nuestro ordenador es bastante sencillo. Para ello primero debemos descargar una versión de R estable, en el momento de elaboración de este material la ultima versión de R es R 4.4.2, sin embargo, utilizar la ultima versión de R nos puede llegar a dar problemas al utilizar paquetes los cuales no han recibido actualizaciones para poderse utilizar en esa versión de R es por ello que se recomienda instalar la ultima versión estable conocida de R. Con base a lo anteriormente explicado en este curso utilizaremos la versión de R 4.3.1.\nEl enlace para ir al repositorio donde se encuentran todas la versiones de R es el siguiente: https://cran.r-project.org/bin/windows/base/old/. En esta página encontraremos un directorio con todas las versiones de R que alguna vez han existido para descargar una versión en específico, le damos clic al nombre de la versión y nos abrirá un directorio con toda la documentación de esa versión de R, a nosotros nos interesa el archivo con una terminación -win. exe la cual al darle clic automáticamente nos descargara el instalador de la versión de R.\nPara descargar la ultima versión de RStudio nos dirigimos a la Página oficial de RStudio donde al dar clic sobre el botón “Download RStudio Desknop for Windows” la pagina iniciara la descarga del instalador de RStudio. En caso de que nuestro dispositivo no tenga como sistema operativo Windows en la misma pagina en la sección siguiente se encuentran las respectivas versiones de RStudio para todos los sistemas operativos con los que es compatible.\nLa instalación de los dos programas debe realizarse en un orden específico para evitar conflictos y errores. Primero debemos instalar la versión de R y posteriormente instalamos RStudio. Cabe resaltar que en un mismo dispositivo pueden convivir más de una versión de R y dentro de la configuración de RStudio es posible seleccionar cuál versión sera con la que trabajaremos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#trabajo-práctico-para-familiarizarnos-con-el-software",
    "href": "teoria.html#trabajo-práctico-para-familiarizarnos-con-el-software",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.5 Trabajo práctico para familiarizarnos con el software",
    "text": "1.5 Trabajo práctico para familiarizarnos con el software\nAprender desde cero a usar un software como R y RStudio. Es como cuando nos iniciamos en la cocina: por más que leamos recetas, solo dominaremos los sabores y técnicas al encender la estufa y experimentar. Según la teoría del aprendizaje experimental de Kolb (1984), internalizamos conceptos cuando hacemos, no solo cuando escuchamos. Imaginemos que preparamos una salsa: si la sal es excesiva (error), ajustamos la próxima vez (prueba), y así hasta lograr el equilibrio (éxito). De la misma forma, al programar en RStudio, cada línea de código es nuestro ingrediente. Si un gráfico no se renderiza, depuramos el error; si un cálculo falla, corregimos la sintaxis. Este ciclo de prueba-error, respaldado por el constructivismo (Hmelo-Silver et al., 2007), transforma funciones abstractas en habilidades concretas. No memorizamos funciones: los saboreamos en la práctica, como los chefs que aprenden a medir ‘a ojo’ la pimienta. La pantalla es nuestra cocina, y cada script, un plato que perfeccionamos.\n\n\n\n\n\n\n1.5.1 Empecemos creando un nuevo script de R\nCuando abrimos por primera vez RStudio nos encontramos con la siguiente interfaz:\n\n\n\n\n\nNormalmente nos toca crear un script nuevo para trabajar cuando entramos para ello existen dos rutas habituales y estas son:\n\nManualmente: Desplegamos la pestaña “File” de la cinta de opciones ubicada en la parte superior izquierda del programa, sucesivamente seleccionamos la opción “New File” y después seleccionamos el tipo de archivo que para nuestro caso es “R Script”.\n\n\n\n\n\n\n\nUtilizando atajos de teclado: Para crear un nuevo script se puede utilizar la combinación de teclas Ctrl+Shift+N como un atajo de teclado, el cual nos creara automáticamente un script nuevo.\n\n\n\n1.5.2 Guardemos nuestro script para evitar perder nuestro trabajo\nUna vez ya hemos creado el script en donde trabajaremos este es un lienzo en blanco en donde desarrollaremos el análisis de nuestros datos, para evitar perder nuestro progreso por cualquier inconveniente es recomendable guardarlo desde el principio. Para ello nuevamente desplegamos la pestaña “File” y seleccionamos la opción “Save as…” esta opción nos abrirá el menú predeterminado para seleccionar dónde guardar nuestro script y con qué nombre.\n\n\n\n\n\n\n1.5.2.1 Recomendaciones para la organización de archivos\nAsí como en la cocina separamos los utensilios, los ingredientes frescos y las especias en cajones etiquetados, en RStudio necesitamos un sistema claro para guardar nuestros scripts, datos y resultados. Un proyecto desorganizado es como una alacena caótica: perderemos tiempo buscando archivos y arriesgaremos errores. Para evitarlo, sigamos estas recomendaciones de organización:\n\nNombres descriptivos y consistentes:\n\n❌ analisis1.R, datos_finales.xlsx\n✅ 20231015_analisis_rendimiento_maiz.R, datos_suelo_antigua_2023.csv\n\nEvitar espacios y caracteres especiales:\n\nUsar guiones bajos (_) o medios (-) en vez de espacios:\n\n❌ analisis suelo.R\n✅ analisis_suelo.R\n\n\nIncluir fechas en un formato estandarizado (YYYY-MM-DD):\n\n2023-10-15_importacion_datos.R\n\nCrear una carpeta en nuestro ordenador para cada proyecto\n\nCon este sistema, cualquier colaborador (o nuestro “yo” del futuro) encontrará todo al primer vistazo, como un chef que sabe dónde está cada ingrediente en su cocina. La organización no es burocracia: es la base de la eficiencia y la reproducibilidad.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#iniciemos-conociendo-los-objetos-en-r",
    "href": "teoria.html#iniciemos-conociendo-los-objetos-en-r",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.6 Iniciemos conociendo los objetos en R",
    "text": "1.6 Iniciemos conociendo los objetos en R\nEn R, todo es un objeto. Un objeto es una estructura que almacena datos y tiene atributos (nombre, tipo, etc.).\n\n1.6.1 Recomendaciones para nombrar objetos:\n\nSensibles a mayúsculas: pH ≠ ph.\nNo usar espacios:\n\n❌ rendimiento ha\n✅ rendimiento_ha\n\nNombres descriptivos y consistentes:\n\nA diferencia de cuando nombramos archivos acá es recomendable que el nombre sea breve pero que al mismo tiempo nos brinde la mayor cantidad de información posible. Cuando esto no es viable por la especificidad de los datos o cualquier otra razón podemos guardar un archivo con la metadata de nuestra base de datos en la misma carpeta como parte de la documentación que facilitara la comprensión del análisis a cualquier colaborador (o nuestro “yo” del futuro).\n\n\n\n\n1.6.2 ¿Cómo creo un objeto?\nPara la creación de cualquier objeto en R existen dos operadores de asignación los cuales son: “=” y “&lt;-” estos operadores cumplen la misma función. Sin embargo, el signo de igualdad no se recomienda utilizarlo debido a que puede llegar a causar conflictos al usar operadores lógicos en nuestro codigo es por ello que para fines profesionales se ha estandarizado el uso de “&lt;-” como operador de asignación en R.\nLa estructura de sintaxis utilizada en R para crear cualquier objeto es la siguiente:\n\n\n\n\n\n\n\n\nNOMRE DEL OBJETO\n&lt;-\nInformación que contendrá nuestro objeto\n\n\nSiguiendo las recomendaciones para su nomenclatura\nVector de asignación\nLos objetos en R pueden contener distintos tipos de información ya sea texto, números…\n\n\n\nNota: Para visualizar en la consola el valor de un objeto se escribe el nombre asignado y se ejecuta la linea de código.\n\n\n1.6.3 Tipos de objetos\nEn R, cada objeto puede almacenar distintos tipos de datos. Sin embargo, solo pueden almacenar un tipo de dato en cada objeto. Los tipos de objetos existentes en R son:\n\n1.6.3.1 Objetos numéricos\nUn objeto numérico es aquel que almacena datos con números enteros o decimales, estos nos sirven para almacenar información de variables cuantitativas como por ejemplo: Edad, Altura, Peso. También nos puede servir para guardar factores de conversión para convertir entre distintas unidades de medida por ejemplo el factor de conversión entre libras y kilogramos es 2.2. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto correspondiente a cada uno de los ejemplos dados utilizando nuestra información:\n\n# EJEMPLO DE CREACIÓN DE OBJETOS NUMÉRICOS\nedad &lt;- 21\naltura_m &lt;- 1.70\npeso_lb &lt;- 150\nlb_kg &lt;- 2.20\n\nPara ejecutar el código que acabamos de escribir existen dos maneras las cuales son:\n\nManualmente: Nos ubicamos en la linea de código que queremos ejecutar y damos clic sobre la opción “Run” que se encuentra en la esquina superior derecha del área del script.\nUsando atajos de teclado: Seleccionamos la/las lineas de código que queremos ejecutar y presionamos la combinación de teclas Ctrl+Enter.\n\nIndistintamente de cuál de los métodos utilicemos veremos como en la consola aparecerán las lineas de código que hayamos ejecutado y al mismo tiempo en el Environment (Ambiente) nos aparecerán los nombres de nuestros objetos creados y su contenido.\nNota: En R si antes de un texto colocamos el símbolo numeral (#) el software lo interpreta como un comentario, estas lineas no se ejecutaran. Sin embargo, son muy útiles para explicar ¿Qué hicimos? en cada sección de nuestro código, para que sea más fácil de entender para nuestro “yo” del futuro.\n\n\n1.6.3.2 Objetos tipo carácter o texto\nLos objetos de tipo carácter nos sirven para almacenar variables cualitativas, este tipo de objeto almacena el texto entre comillas (” “), habitualmente se utiliza para almacenar nombres y categorías no estructuradas como por ejemplo: nuestro color favorito o el nombre de nuestra comida favorita. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto correspondiente a cada uno de los ejemplos dados:\n\n# EJEMPLO DE CREACIÓN DE OBJETOS TIPO CARACTER \ncolor_fav &lt;- \"negro\"\ncomida_fav &lt;- \"pizza\"\n\n\n\n1.6.3.3 Objetos de tipo factor\nLos objetos de tipo factor nos sirven para almacenar variables categóricas estructuradas con niveles definidos. Usualmente se utiliza para almacenar escalas o categorías definidas como por ejemplo: una escala de calificaciones (aprobado o reprobado) o el estado civil de una persona (casado, soltero o divorciado). Para crear este tipo de objetos utilizamos la función “factor()” para indicarle a R que este objeto no es de tipo carácter ya que al igual que los objetos tipo carácter los niveles de nuestras categorías se ingresan entre comias. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto de tipo factor estado civil y sexo con nuestra información.\n\n# EJEMPLO DE CREACIÓN DE OBJETOS TIPO FACTOR \nestado_civil &lt;- factor(\"soltero\")\nsexo &lt;- factor(\"masculino\")\n\nNota: Los objetos de tipo factor son muy útiles cuando trabajamos con bases de datos complejas ya que estos nos sirven para clasificar y categorizar variables para su análisis\n\n\n1.6.3.4 Objetos lógicos\nLos objetos de tipo lógico también conocidos como los termómetros de condiciones nos sirven para aplicar filtros y se crean normalmente como el resultado de una comparación en donde estuvo involucrado un operador lógico (en la siguiente sección hablaremos de los distintos tipos de operadores que existen en R). Su nombre de termómetros de condiciones es más acertado con los ejemplos tipicos de su uso. Para el caso de nuestros objetos anteriormente creados podemos crear un objeto de tipo lógico comparando si nuestra edad cumple con la condición necesaria para ser considerados mayores de edad que para el caso de Guatemala esta condición seria que nuestra edad sea mayor a 18 años. A continuación vamos a poner en práctica la creación de este tipo de objetos creando el objeto del ejemplo antes descrito.\n\n# EJEMPLO DE CREACIÓN DE UN OBJETO TIPO LOGICO\nmayoria_de_edad &lt;- edad &gt;18 ; mayoria_de_edad\n\n[1] TRUE\n\n\nNota: si al acabar la asignación de un objeto colocamos un punto y coma seguido del nombre del objeto R nos devolverá en la consola el valor del objeto esto es útil cuando el objeto es el resultado de una operación. Para el ejemplo anterior podemos ver como en la consola nos aparece el valor de nuestro objeto que para este caso al cumplirse la condición el valor es TRUE (verdadero).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#y-si-quiero-un-objeto-con-dos-o-más-valores",
    "href": "teoria.html#y-si-quiero-un-objeto-con-dos-o-más-valores",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.7 ¿Y si, quiero un objeto con dos o más valores?",
    "text": "1.7 ¿Y si, quiero un objeto con dos o más valores?\nImaginemos que estamos organizando la información de un salón de clase: no trabajamos con un solo alumno, sino con un grupo de estudiantes, cada uno con información diferente como nombre, edad, peso en libras y sexo. En R, los vectores y data frames son nuestras herramientas para manejar colecciones de datos de manera estructurada y eficiente. A continuación, exploraremos cómo crear y gestionar estos objetos.\nUn vector en R es un objeto el cual esta compuesto por un número determinado de elementos del mismo tipo para su creación en R se utiliza la función “c()” y dentro de los paréntesis se colocan todos los elementos que formaran parte de nuestro vector separados por comas. A continuación elaboraremos un ejemplo de como crear un vector para cada uno de los distintos tipos de objetos que hay en R utilizando datos de un salón de clases.\n\n# EJEMPLO DE CREACIÓN DE VECTORES \n# VECTORES DE TIPO CARACTER\nnombre &lt;- c(\"Juan\", \"Pedro\", \"Luis\", \"Ana\", \"Andrea\")\n\n# VECTORES DE TIPO NUMÉRICO\nedad &lt;- c(18, 17, 21, 20, 19) \npeso_lb &lt;- c(125.20, 130.5, 145.6, 120.1, 110.5)\n\n# VECTORES DE TIPO CATEGORICO\nsexo &lt;- factor(c(\"H\", \"H\", \"H\", \"M\", \"M\"))\n\n# VECTORES DE TIPO LOGICO\nmayoria_de_edad &lt;- edad &gt;=18\n\n\n1.7.1 Tengo muchos vectores… ¿Cómo los puedo agrupar para tener una mejor organización?\nCuando trabajamos con múltiples vectores relacionados (por ejemplo, datos de estudiantes en un salón de clase), la mejor manera de organizarlos es utilizando estructuras de datos integradas en R que permiten agrupar vectores de manera coherente. Las dos opciones principales son los data frames y las listas. A continuación, exploraremos cómo usarlas:\n\n\n1.7.2 Data Frames: Tablas estructuradas para análisis\nUn data frame es una estructura tabular (similar a una hoja de Excel) que combina vectores de igual longitud pero de distintos tipos (numéricos, caracteres, factores, etc.). Es ideal para bases de datos organizadas, donde cada fila representa una observación y cada columna una variable.\n\n1.7.2.1 Creemos un data frame con nuestros vectores\nPara la creación de un data frame se emplea la función data.frame(), los argumentos que se colocan en esta función son los nombres de todos los vectores que queremos unir en un mismo data frame separados por comas, como se muestra a continuación:\n\n# EJEMPLO DE CREACIÓN DE UN DATAFRAME\ndatos_estudiantes &lt;- data.frame(nombre, edad, mayoria_de_edad, peso_lb, sexo)\ndatos_estudiantes\n\n  nombre edad mayoria_de_edad peso_lb sexo\n1   Juan   18            TRUE   125.2    H\n2  Pedro   17           FALSE   130.5    H\n3   Luis   21            TRUE   145.6    H\n4    Ana   20            TRUE   120.1    M\n5 Andrea   19            TRUE   110.5    M\n\n\n\n\n1.7.2.2 Ventajas de los data frames\n\nPermiten manipulación y análisis estadístico directo.\nCompatibles con funciones de visualización.\nFáciles de exportar/importar.\n\n\n\n\n1.7.3 Listas: Colecciones flexibles de objetos\nUna lista es una estructura que puede contener cualquier tipo de objeto (vectores, matrices, otros data frames, funciones, etc.), incluso si tienen longitudes o tipos diferentes. Son útiles para organizar resultados complejos o grupos heterogéneos de datos.\nMás adelante cuando queramos guardar los resultados de nuestros analisis estadisticos aprenderemos más sobre las listas. Por el momento solo trabajaremos con data frames.\n\n1.7.3.1 Comparación entre data frames y listas\n\n\n\n\n\n\n\nData Frame\nLista\n\n\n\n\nVectores de igual longitud.\nObjetos de cualquier tipo o longitud.\n\n\nIdeal para análisis estadístico.\nIdeal para almacenar resultados mixtos.\n\n\nColumnas con nombres definidos.\nElementos pueden nombrarse o no.\n\n\n\n\n\n\n1.7.4 ¿Qué pasa si mis datos ya los tengo almacenados en un archivo de delimitado por comas (CSV) o excel?\nImaginemos que los datos son ingredientes guardados en recipientes: los archivos CSV y Excel son como frascos etiquetados que R puede abrir para extraer información. Para ello tenemos que importarlos así, evitando el tedioso copiar/pegar manual, y mantener la reproducibilidad de nuestro análisis.\n\n1.7.4.1 Archivos delimitados por comas (.csv)\n\nEstructura: Archivo de texto plano donde cada valor está separado por una coma (ej: nombre, edad, altura, peso).\nCaracterísticas técnicas:\n\nSin formato: No admite colores, fórmulas o múltiples hojas.\nUniversal: Lo abre cualquier editor de texto o programa (Bloc de notas, Excel, R).\nLigero: Ideal para datos simples y transferencias rápidas.\n\nEjemplo de cómo importar un archivo .csv a R\n\nPara importar un data frame que se encuentra almacenado en formato .csv a R se emplea la siguiente sintaxis para la función: “read.csv(”nombre del documento”, header = (indicar si tiene o no encabezado), sep =”(indicar que tipo de separador utilizamos)”)”\n\nInstalar los paquetes necesarios para esta tarea\n\n#1 INSTALAMOS LOS PAQUETES DE R NECESARIOS PARA ESTA TAREA\nif (!require(\"rstudioapi\")) install.packages(\"rstudioapi\") \n# Lo usaremos para establecer nuestro directorio de trabajo facilmente\n\nEstablecemos la carpeta de nuestro proyecto como directorio de trabajo\n\n#2 ESTABLECER NUESTRO DIRECTORIO DE TRABAJO\nsetwd (dirname(rstudioapi::getActiveDocumentContext()$path)) \n\nImportamos nuestro dataframe\n\n#3 IMPORTAMOS NUESTRO DATAFRAME\ndatos&lt;-read.csv(\"datos_estudiantes_2002.csv\", \n                header = TRUE, \n                sep = \";\")\n\n\nNota: La siguiente linea de código “setwd (dirname(rstudioapi::getActiveDocumentContext()$path))” es una”receta mágica” que establece automáticamente la misma carpeta donde tenemos guardado nuestro script como nuestro directorio de trabajo.\n\n\n1.7.4.2 Archivos de excel (.xlsx)\n\nEstructura: Archivo binario con múltiples hojas, fórmulas, gráficos y formato (ej: colores, fuentes).\nCaracterísticas técnicas:\n\nComplejo: Diseñado para análisis interactivos y presentaciones.\nPropietario: Desarrollado por Microsoft, pero compatible con herramientas como R.\nPesado: Puede ralentizarse con grandes volúmenes de datos (&gt;1 millón de filas).\n\nEjemplo de cómo importar un archivo .xlsx a R\n\nPara importar un data frame que se encuentra almacenado en formato .xlsx a R se emplea la siguiente sintaxis para la función: “read_excel(”nombre del documento”, col_names = (indicar si tiene o no encabezado), sheet =”nombre de la hoja”)”\n\nInstalar los paquetes necesarios para esta tarea\n\n#1 INSTALAMOS LOS PAQUETES DE R NECESARIOS PARA ESTA TAREA\nif (!require(\"rstudioapi\")) install.packages(\"rstudioapi\") # Lo usaremos para \n#establecer nuestro directorio de trabajo facilmente\nif (!require(\"readxl\")) install.packages((\"readxl\")) # Este paquete nos sirve \n#para que R pueda importar archivos de excel\n\nEstablecemos la carpeta de nuestro proyecto como directorio de trabajo\n\n#2 ESTABLECER NUESTRO DIRECTORIO DE TRABAJO\nsetwd (dirname(rstudioapi::getActiveDocumentContext()$path)) \n\nImportamos nuestro dataframe\n\n#3 IMPORTAMOS NUESTRO DATAFRAME\ndatos_2002 &lt;- read_excel(\"datos_estudiantes_2002.xlsx\", \n                  col_names = TRUE, \n                  sheet = \"datos\")\n\n\n\n\n\n1.7.5 ¿Cómo acceder a las variables de un Data frame?\nPara acceder a la información guardada como una columna en un data frame, no podemos acceder de la misma manera que lo hacíamos con los vectores para esta tarea accedemos usando el operador $: La “Llave Maestra”. Este operador accede directamente a una columna/variable del data frame por su nombre. Para esto usamos la sintaxis siguiente: (nombre del data frame)$(nombre de la columna)\nEjemplo :\n\n# Acceder a la columna \"edad\" del data frame datos_estudiantes\ndatos_estudiantes$edad      \n\n[1] 18 17 21 20 19\n\n\nUso común:\n\nIdeal para operaciones rápidas o cuando trabajas con pocas variables.\nFunciona con cualquier funcion u operador con el que estemos trabajando.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#la-importancia-de-un-directorio-de-trabajo",
    "href": "teoria.html#la-importancia-de-un-directorio-de-trabajo",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.8 La importancia de un directorio de trabajo",
    "text": "1.8 La importancia de un directorio de trabajo\nImagina que el directorio de trabajo es como el “punto de partida” en un mapa: es la carpeta donde R buscará automáticamente tus archivos (datos, scripts) y guardará tus resultados. Si no lo defines, es como intentar cocinar sin saber dónde están los ingredientes: perderás tiempo buscando rutas manualmente y el código dejará de funcionar si mueves el proyecto a otra computadora.\n\n1.8.1 ¿Por qué establecer un directorio de trabajo?\n\nReproducibilidad: Garantiza que tu código funcione en cualquier computadora, sin depender de rutas como C:/Usuario/MiPC....\nOrganización: Evita errores del tipo “archivo no encontrado” al mantener todo (datos, scripts, resultados) en una estructura clara.\nEficiencia: Simplifica el acceso a archivos. En vez de escribir rutas completas, usas nombres simples.\n\n\n\n1.8.2 La “Receta Mágica”\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n\n1.8.2.1 ¿Qué hace esta línea?\n\nrstudioapi::getActiveDocumentContext()$path: Obtiene la ruta del script actual (ej: C:/proyecto/scripts/analisis.R).\ndirname(): Extrae la carpeta padre de esa ruta (ej: C:/proyecto/scripts/ → C:/proyecto/).\nsetwd(): Establece esa carpeta como directorio de trabajo.\n\n\n\n\n1.8.3 Beneficios clave\n\nPortabilidad: Si mueves toda la carpeta del proyecto a otra ubicación, el código sigue funcionando.\nAutomatización: No necesitas ajustar manualmente rutas al compartir el proyecto.\n\n\n\n1.8.4 ¿Qué pasa si no se establece?\n\nErrores constantes: R buscará archivos en una ubicación predeterminada (ej: Documentos), no donde están tus datos.\nCódigo no reproducible: Si alguien más ejecuta tu script, tendrá que modificar manualmente todas las rutas.\n\n📌 Consejo: Ejecuta getwd() para verificar tu directorio actual. Si usas la línea automática, ¡asegúrate de guardar el script antes de ejecutarla!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#operadores-en-r-es-r-otra-calculadora-pero-más-difícil-de-utilizar",
    "href": "teoria.html#operadores-en-r-es-r-otra-calculadora-pero-más-difícil-de-utilizar",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.9 Operadores en R ¿Es R otra calculadora pero más difícil de utilizar?",
    "text": "1.9 Operadores en R ¿Es R otra calculadora pero más difícil de utilizar?\n\n\n\n\n\nImaginemos que R es un taller de herramientas completo: no solo tiene destornilladores y martillos (operadores básicos), sino también taladros, niveles láser y equipos de soldadura (funciones avanzadas, paquetes y estructuras de datos). Cada herramienta tiene un propósito único, y combinarlas permite construir soluciones robustas. A continuación, exploraremos cómo estas “herramientas” se integran en un flujo de trabajo profesional.\n\n1.9.1 Operadores básicos: Los “Destornilladores” de R\nDefinición: Realizan operaciones matemáticas o lógicas sencillas, similares a una calculadora, pero con potencial escalable.\n\n1.9.1.1 Operadores aritméticos\n\n\n\nOperador\nAcción\n\n\n\n\n+\nSuma\n\n\n-\nResta\n\n\n*\nMultiplicación\n\n\n/\nDivisión\n\n\n^\nPotencia\n\n\n\n\n\n1.9.1.2 Operadores lógicos\n\n\n\nOperador\nAcción\n\n\n\n\n&gt;\nMayor que\n\n\n&lt;\nMenor que\n\n\n==\nIgualdad\n\n\n!=\nDesigualdad\n\n\n\nRespondiendo nuestra pregunta inicial\nSí, R puede sumar y restar como una calculadora, pero su verdadero poder está en integrar operadores con funciones, visualizaciones y estructuras de datos para resolver problemas complejos. Como un carpintero que transforma madera en muebles, R transforma datos en conocimiento.\n\n\n\n1.9.2 Experimentemos usar operadores en R\nA partir de acá, para nuestro ejercicio de aplicación, vamos a utilizar el data frame que importamos de excel, este objeto lo identificamos con el nombre “datos_2002”, esta base de datos incluye 11 variables obtenidas de una encuesta realizada a estudiantes de la universidad de San Carlos de Guatemala en el año 2002, como ejercicio de aplicación vamos a crear nuevas variables a partir de las variables ya existentes. Las nuevas variables que vamos a crear serán: Peso_Kg, IMC, Mayoría_edad (variable lógica).\nSolución del ejercicio:\n\nPeso_Kg &lt;- datos_2002$PESO_lbs / lb_kg\nIMC &lt;- Peso_Kg / (datos_2002$TALLA)^2\nMayoria_edad &lt;- datos_2002$EDAD &gt;= \"18\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#paquetes-de-r-recursos-compartidos-por-la-comunidad-para-mejorar-nuestros-análisis-estadísticos",
    "href": "teoria.html#paquetes-de-r-recursos-compartidos-por-la-comunidad-para-mejorar-nuestros-análisis-estadísticos",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.10 Paquetes de R: Recursos Compartidos por la Comunidad para mejorar nuestros análisis estadísticos",
    "text": "1.10 Paquetes de R: Recursos Compartidos por la Comunidad para mejorar nuestros análisis estadísticos\nAsí como un chef no se limita a sal y pimienta, en R no te conformas con funciones básicas. Los paquetes son esos ingredientes secretos (ggplot2, dplyr, tidyr) que convierten un análisis simple en un banquete de insights.\n\n\n\n\n\n\n1.10.1 ¿Qué son los paquetes en R?\nDefinición: Los paquetes son colecciones de funciones, datos y documentación que amplían las capacidades básicas de R, como agregar especias a una receta. Son desarrollados por la comunidad y permiten resolver problemas específicos:\n\nEjemplo: ggplot2 (gráficos profesionales) y dplyr (manipulación de datos).\n\nMetáfora: “Si R es una cocina básica, los paquetes son licuadoras, batidoras y especias exóticas que transforman ingredientes crudos (datos) en platillos sofisticados (análisis).”\nOrígenes comunes:\n\nCRAN: El “supermercado oficial” de paquetes (más de 19,000 opciones).\nGitHub: La “tienda de ingredientes artesanales” para paquetes en desarrollo.\n\n\n\n1.10.2 ¿Cómo instalar paquetes en R?\nLa función utilizada en R para instalar paquetes desde CRAN (lo habitual) es install.packages() pero al instalar un paquete este no se carga automáticamente, debemos de cargarlo a nuestro entorno de trabajo para empezar a usarlo. Para esta tarea utilizamos la función library(). A continuación vamos a hacer este ejemplo con el paquete que utilizaremos para elaborar gráficos en la siguiente sección este se llama ggplot2.\n\ninstall.packages(\"ggplot2\")\nlibrary(\"ggplot2\")\n\nConsejo: Con fines de limpieza de nuestro código y facilitar su reproducibilidad es recomendable colocar al principio de nuestro script una sección dedicada a la instalación y carga de los paquetes que utilizamos en nuestro análisis.\n\n\n1.10.3 La “receta mágica” para instalar paquetes\nif (!require(\"nombre del paquete\")) install.packages(\"nombre del paquete\")\n\n1.10.3.1 ¿Qué hace esta linea?\n\nrequire(\"nombre del paquete\"): Esta función intenta cargar el paquete especificado. Si el paquete está instalado, lo carga en la sesión actual y devuelve TRUE. Si el paquete no está instalado, devuelve FALSE.\n!require(\"nombre del paquete\"): El signo de exclamación (!) niega el resultado de la función require(). Por lo tanto, esta expresión será TRUE si el paquete NO está instalado o NO puede ser cargado.\nif (...) install.packages(\"nombre del paquete\"): Esta es una estructura condicional. Si la condición entre paréntesis es TRUE (es decir, si el paquete no está instalado o no puede ser cargado), entonces se ejecuta install.packages(\"nombre del paquete\"), que descarga e instala el paquete desde el repositorio CRAN.\n\nEn resumen, esta línea de código:\n\nPrimero intenta cargar el paquete con require()\nSi el paquete está instalado, lo carga y continúa con el código\nSi el paquete NO está instalado, entonces lo instala automáticamente con install.packages() y luego lo carga.\n\nEsta es una técnica muy eficiente porque:\n\nEvita reinstalar paquetes que ya están disponibles.\nAsegura que el código funcione incluso si el usuario no tiene el paquete instalado.\nHace el código más portable entre diferentes computadora.\nAutomatiza la gestión de dependencias\n\nPara usar esta receta con un paquete específico, simplemente reemplazas “nombre del paquete” con el nombre real del paquete. Por ejemplo:\n\nif (!require(\"ggplot2\")) install.packages(\"ggplot2\")\n\nEsta línea intentará cargar ggplot2 y, si no está instalado, lo instalará automáticamente.\n\n\n\n1.10.4 ¿Cómo saber qué paquete usar para cada tarea?\nEn R, la elección del paquete adecuado para una tarea específica puede marcar la diferencia entre un análisis eficiente y uno complicado. Dado que R cuenta con más de 19,000 paquetes disponibles en CRAN, es importante conocer cuáles son los más utilizados y recomendados para cada tipo de tarea. A continuación, se presenta una guía práctica para identificar y seleccionar el paquete adecuado según las necesidades del análisis.\n\n1.10.4.1 Categorías principales de paquetes\nLos paquetes en R se pueden clasificar en diferentes categorías según su propósito. Aquí se presentan las más comunes y los paquetes más destacados en cada una:\n\nManipulación de datos:\n\nPaquetes como dplyr y tidyr son ideales para filtrar, transformar, agrupar y reorganizar datos.\nEjemplo: Calcular el promedio de edad por sexo o transformar datos de formato ancho a largo.\n\nVisualización de datos:\n\nggplot2 es el estándar para crear gráficos personalizados y de alta calidad.\nEjemplo: Crear gráficos de barras, histogramas o scatterplots para explorar relaciones entre variables.\n\nAnálisis estadístico básico:\n\nLas funciones base de R (stats) incluyen herramientas para realizar pruebas t, ANOVA y cálculos de medias.\nEjemplo: Comparar tratamientos de un experimento mediante un ANOVA.\n\nAnálisis estadístico avanzado:\n\nPaquetes como agricolae que es útil para diseños experimentales en agronomía.\nEjemplo: Analizar efectos aleatorios en un diseño de bloques completos al azar.\n\n\n\n\n1.10.4.2 Criterios para elegir un paquete\nAl seleccionar un paquete, es importante considerar los siguientes aspectos:\n\nPropósito: ¿Qué tarea específica necesitas realizar? Por ejemplo, si deseas manipular datos, dplyr es una excelente opción; si necesitas gráficos avanzados, ggplot2 es ideal.\nPopularidad y soporte: Los paquetes más populares suelen tener mejor documentación, tutoriales y una comunidad activa. Por ejemplo, ggplot2 y dplyr son ampliamente utilizados y cuentan con numerosos recursos en línea.\nCompatibilidad: Algunos paquetes están diseñados para integrarse con otros. Por ejemplo, dplyr y ggplot2 forman parte del ecosistema tidyverse, lo que facilita su uso conjunto.\nDocumentación: Un paquete bien documentado es más fácil de aprender y utilizar. Revisa la documentación oficial y los ejemplos proporcionados.\n\n\n\n1.10.4.3 Recursos para identificar paquetes\nSi no estás seguro de qué paquete usar, puedes recurrir a los siguientes recursos:\n\nCRAN Task Views: Una colección de listas temáticas en CRAN que agrupan paquetes según su propósito. Por ejemplo, la Task View de “Agriculture” incluye paquetes relacionados con análisis de suelos, cultivos y experimentos agrícolas.\n\nEnlace: CRAN Task Views\n\nCheatsheets: Las hojas de referencia rápida (cheatsheets) de RStudio son una excelente manera de explorar las capacidades de paquetes populares como ggplot2, dplyr y tidyr.\n\n-   Enlace: [Cheatsheets de RStudio](https://www.rstudio.com/resources/cheatsheets/)\n\nForos y comunidades: Plataformas como Stack Overflow, RStudio Community y GitHub son útiles para buscar recomendaciones y ejemplos de uso.\nLibros y tutoriales: Recursos como R for Data Science de Hadley Wickham y Garrett Grolemund ofrecen una introducción práctica a los paquetes más utilizados en el ecosistema tidyverse.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#manipulación-de-datos-con-dplyr-y-tidyr",
    "href": "teoria.html#manipulación-de-datos-con-dplyr-y-tidyr",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.11 Manipulación de datos con dplyr y tidyr",
    "text": "1.11 Manipulación de datos con dplyr y tidyr\nLa manipulación de datos es una tarea esencial en el análisis estadístico, ya que permite transformar, organizar y preparar los datos para su análisis. En R, los paquetes dplyr y tidyr del ecosistema tidyverse son herramientas clave para realizar estas tareas de manera eficiente y reproducible. A continuación, exploraremos las principales funciones de estos paquetes, el concepto de pipes y la utilidad de transformar datos entre formatos ancho y largo, con ejemplos prácticos, incluyendo aplicaciones en el ámbito agrícola.\n\n1.11.1 ¿Qué es dplyr?\ndplyr es un paquete diseñado para realizar operaciones comunes de manipulación de datos, como filtrar, seleccionar columnas, agrupar y resumir datos. Su sintaxis es intuitiva y está optimizada para trabajar con data frames y tibbles (una versión mejorada de los data frames).\n\n1.11.1.1 Operaciones básicas con dplyr\n\nFiltrar filas: Selecciona observaciones que cumplen una condición específica.\n\n# Filtrar estudiantes que miden más de 1.90m   \nestudiantes_altos &lt;- datos_2002 %&gt;% filter(TALLA &gt; 1.9)   \n\nSeleccionar columnas: Extrae variables específicas de un data frame.\n\n# Seleccionar solo las columnas de peso en libras y talla\nseleccion &lt;- datos_2002 %&gt;% select(PESO_lbs, TALLA)\n\n\n\n\nCrear nuevas columnas: Añade variables calculadas.\n\n# Crear una nueva columna con el pesoo en kilogramos   \ndatos_2002 &lt;- datos_2002 %&gt;% mutate(PESO_Kg = PESO_lbs / 2.2) \n\n\n\n\nAgrupar y resumir datos: Calcula estadísticas por grupo.\n\n# Calcular la edad promedio por facultad \npromedio_edad &lt;- datos %&gt;%     group_by(FACULTAD) %&gt;%     summarize(edad_promedio = mean(EDAD, na.rm = TRUE)) \n\n\n\n\n1.11.1.2 ¿Qué son las pipes (%&gt;%)?\nEl operador pipe (%&gt;%) es una herramienta clave en el tidyverse que permite encadenar funciones de manera legible y eficiente. En lugar de anidar funciones, el pipe pasa el resultado de una función como entrada a la siguiente.\n\n1.11.1.2.1 Ejemplo sin pipes:\n\npromedio &lt;- summarize(group_by(datos_2002, FACULTAD), edad_promedio = mean(EDAD, na.rm = TRUE))   \n\n\n\n1.11.1.2.2 Ejemplo con pipes:\n\n# Calcular la edad promedio por facultad \npromedio_pipe &lt;- datos_2002 %&gt;%     group_by(FACULTAD) %&gt;%     summarize(edad_promedio = mean(EDAD, na.rm = TRUE))   \n\nEl uso de pipes mejora la legibilidad del código, especialmente en flujos de trabajo complejos.\n\n\n\n\n1.11.2 Visualización de datos: Introducción a gráficos básicos con ggplot2\nLa visualización de datos es una herramienta fundamental para explorar patrones, comunicar resultados y validar supuestos en el análisis estadístico. En R, el paquete ggplot2 es ampliamente utilizado debido a su flexibilidad y capacidad para crear gráficos de alta calidad.\n\n1.11.2.1 ¿Qué es ggplot2?\nggplot2 es un paquete de R diseñado para crear gráficos personalizados y profesionales. Su enfoque se basa en una lógica de capas, donde cada capa representa un componente del gráfico (datos, tipo de gráfico, etiquetas, etc.). Esto permite construir gráficos complejos de manera modular y reproducible.\n\n\n1.11.2.2 Estructura básica de ggplot2\nLa estructura general de un gráfico en ggplot2 sigue esta sintaxis:\n\nggplot(data = DATOS, aes(x = VARIABLE_X, y = VARIABLE_Y)) +\n  GEOM_FUNCION() +     \n  labs(title = \"Título del gráfico\", \n       x = \"Etiqueta eje X\", \n       y = \"Etiqueta eje Y\")\n\n\ndata: El conjunto de datos que se usará para el gráfico.\naes(): Define las variables estéticas (ejes, colores, tamaños, etc.).\nGEOM_FUNCION(): Especifica el tipo de gráfico (e.g., barras, puntos, líneas).\nlabs(): Añade etiquetas y títulos.\n\n\n\n1.11.2.3 Ejemplo 1: Crear un histograma\nUn histograma es útil para explorar la distribución de una variable numérica.\n\n# Crear un histograma de la variable \"peso\"   \nggplot(data = datos_2002, aes(x = PESO_lbs)) +  \n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"black\") +     \n  labs(title = \"Distribución del peso de los estudiantes\",\n       x = \"Peso (libras)\",\n       y = \"Frecuencia\")   \n\n\n\n\n\n\n\n\n\ngeom_histogram(): Crea el histograma.\nbinwidth: Define el ancho de las barras.\n\n\n\n1.11.2.4 Ejemplo 2: Crear un scatterplot\nUn scatterplot permite explorar la relación entre dos variables numéricas.\n\n# Relación entre peso y edad   \nggplot(data = datos_2002, aes(x = EDAD, y = PESO_lbs)) +\n  geom_point(color = \"blue\", size = 3) +     \n  labs(title = \"Relación entre edad y peso\",          \n       x = \"Edad (años)\",          \n       y = \"Peso (libras)\")   \n\n\n\n\n\n\n\n\n\ngeom_point(): Dibuja los puntos en el gráfico.\n\n\n\n1.11.2.5 Ejemplo 3: Crear un boxplot\nUn boxplot es útil para comparar la distribución de una variable numérica entre grupos.\n\n# Comparar el peso por sexo   \nggplot(data = datos_2002, aes(x = SEXO, y = PESO_lbs, fill = SEXO)) +\n  geom_boxplot() +     \n  labs(title = \"Distribución del peso por sexo\",\n       x = \"Sexo\",          \n       y = \"Peso (libras)\")   \n\n\n\n\n\n\n\n\n\nfill: Colorea las cajas según el grupo.\n\n\n\n\n1.11.3 Exportación de resultados: Guardar gráficos y tablas\nUna vez que se han generado gráficos o tablas, es importante exportarlos para su uso en informes o presentaciones. R ofrece funciones para guardar resultados en formatos como PNG, PDF o CSV.\n\n1.11.3.1 Guardar gráficos con ggsave()\nLa función ggsave() permite guardar el último gráfico generado.\n\n# Guardar un gráfico en formato PNG   \nggsave(\"grafico_peso.png\", width = 8, height = 6, dpi = 300)      \n# Guardar un gráfico en formato PDF   \nggsave(\"grafico_peso.pdf\", width = 8, height = 6)   \n\n\nwidth y height: Dimensiones del gráfico.\ndpi: Resolución del gráfico (300 es ideal para publicaciones).\n\n\n\n1.11.3.2 Guardar tablas en formato CSV\nPara exportar un data frame como archivo CSV, se utiliza la función write.csv().\n\n# Guardar el data frame en un archivo CSV   \nwrite.csv(datos_2002, \"datos_estudiantes.csv\", row.names = FALSE)   \n\n\nrow.names = FALSE: Evita incluir los índices como una columna adicional.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#material-de-apoyo",
    "href": "teoria.html#material-de-apoyo",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.12 Material de apoyo",
    "text": "1.12 Material de apoyo\n\nGuia de instalación de R y RStudio elaborada por el Dr. Byron Gonzalez\nTutorial en YouTube “Cómo instalar R y RStudio en menos de 2 minutos - 2024”. Elaborado por Herbert Lizama.\nR para ciencia de datos por Handley Wickham & Garrett Grolemund",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "teoria.html#referencias",
    "href": "teoria.html#referencias",
    "title": "1  INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS",
    "section": "1.13 Referencias",
    "text": "1.13 Referencias\nAllaire, J. J., Xie, Y., & McPherson, J. (2022). R Markdown: The Definitive Guide. Chapman & Hall/CRC. https://www.taylorfrancis.com/books/mono/10.1201/9781138359444/markdown-yihui-xie-allaire-garrett-grolemund\nIhaka, R., & Gentleman, R. (1996). R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics, 5(3), 299–314.\nR Core Team. (2023). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.Rproject.org\nBaker, M. (2016). 1,500 scientists lift the lid on reproducibility. Nature, 533(7604), 452–454. https://doi.org/10.1038/533452a\nNational Academies of Sciences, Engineering, and Medicine. (2019). Reproducibility and replicability in science. National Academies Press. https://doi.org/10.17226/25303\nThe Turing Way Community. (2023). The Turing Way: A handbook for reproducible, ethical and collaborative research. https://the-turing-way.netlify.app\nGentleman, R., & Temple Lang, D. (2007). Statistical analyses and reproducible research. Journal of Computational and Graphical Statistics, 16(1), 1-23. https://doi.org/10.1198/106186007X178663\nWilkinson, M. D. et al. (2016). The FAIR Guiding Principles for scientific data management and stewardship. Scientific Data, 3(1), 160018. https://doi.org/10.1038/sdata.2016.18\nKolb, D. A. (1984). Experiential learning: Experience as the source of learning and development. Prentice Hall.\nHmelo-Silver, C. E., Duncan, R. G., & Chinn, C. A. (2007). Scaffolding and achievement in problem-based and inquiry learning: A response to Kirschner, Sweller, and Clark (2006). Educational Psychologist, 42(2), 99–107. https://doi.org/10.1080/00461520701263368",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>INTRODUCCIÓN AL ENTORNO DE PROGRAMACIÓN R Y SU APLICACIÓN EN EL ANÁLISIS ESTADÍSTICO DE DATOS</span>"
    ]
  },
  {
    "objectID": "summary.html#qué-es-r",
    "href": "summary.html#qué-es-r",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1.1 ¿Qué hace tan especial a R para el análisis estadístico?\n\nCódigo Abierto: Sin costos de licencia, ideal para proyectos académicos (R Core Team, 2023).\nExtensible: Hasta 2023 existen más de 19,000 paquetes disponibles en CRAN (Comprehensive R Archive Network) especializados en añadirle nuevas funciones para resolver necesidades especificas usando R, la funcionalidad de estos paquetes va desde hacer mejores gráficos de una manera sencilla hasta facilita procesos estadísticos (CRAN, 2023).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "summary.html#qué-es-rstudio",
    "href": "summary.html#qué-es-rstudio",
    "title": "1  Conceptos básicos de R",
    "section": "1.2 ¿Qué es RStudio?",
    "text": "1.2 ¿Qué es RStudio?\nRStudio es un Entorno de Desarrollo Integrado (IDE) que optimiza el flujo de trabajo en R, destacándose por su sistema de proyectos y herramientas para reproducibilidad (Allaire et al., 2022).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "summary.html#reproducibilidad-replicabilidad-qué-tienen-que-ver-con-r-y-rstudio",
    "href": "summary.html#reproducibilidad-replicabilidad-qué-tienen-que-ver-con-r-y-rstudio",
    "title": "1  Conceptos básicos de R",
    "section": "1.3 Reproducibilidad, Replicabilidad ¿Qué tienen que ver con R y RStudio?",
    "text": "1.3 Reproducibilidad, Replicabilidad ¿Qué tienen que ver con R y RStudio?\nEl 64% de los investigadores enfrentan dificultades para replicar estudios previos debido a documentación insuficiente (Baker, 2016).\n\nSituación: Usas Excel y/o infostat. Tus cálculos están en celdas ocultas, y los gráficos se ajustan manualmente.\nResultado: Nadie, ni tú en 6 meses, podrá repetir exactamente tu análisis.\nSolución: Realizar el análisis de los datos y la construcción de los gráficos aprovechando las herramientas que nos provee R para generar un script donde se documenta el paso a paso que se siguió para realizar el análisis y llegar a las conclusiones.\n\n\n\n\n“Un script de R es como una receta: cualquiera puede seguirla paso a paso para recrear tu ‘platillo’ científico. Así como, cualquiera puede re interpretarla para crear su propio ‘platillo’ científico.”\n\n\n\n1.3.1 Definición formal de reproducibilidad y replicabilidad\nLa reproducibilidad (capacidad de obtener los mismos resultados con los mismos datos y métodos) y la replicabilidad (consistencia de hallazgos en nuevos contextos) son fundamentales para la credibilidad científica (National Academies of Sciences, Engineering, and Medicine, 2019).\n\n\n1.3.2 Beneficios de la adopción de R para la Ciencia\n\nTransparencia: Código accesible para revisión por pares (The Turing Way Community, 2023).\nEficiencia: Reutilización de métodos en nuevos estudios (Gentleman & Temple Lang, 2007).\nCredibilidad: Cumplimiento de estándares FAIR (Wilkinson et al., 2016).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "summary.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "href": "summary.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "title": "1  Conceptos básicos de R",
    "section": "1.3 Reproducibilidad y replicabilidad en la investigación científica",
    "text": "1.3 Reproducibilidad y replicabilidad en la investigación científica\nEl 64% de los investigadores enfrenta dificultades para replicar estudios previos debido a una documentación insuficiente (Baker, 2016).\nProblemática: En herramientas como Excel o Infostat, los cálculos suelen realizarse en celdas ocultas y los gráficos se ajustan manualmente. Esto dificulta la replicación exacta de los análisis, incluso por parte del mismo autor después de un tiempo.\nSolución: el uso de R permite documentar cada paso del análisis mediante scripts, lo que garantiza que los procedimientos puedan ser replicados y reinterpretados en el futuro.\n\n\n\nUn script en R puede compararse con una receta, ya que documenta cada paso necesario para reproducir un análisis científico. Además, este enfoque permite reinterpretar los procedimientos para adaptarlos a nuevos contextos.\n\n\n\n1.3.1 Reproducibilidad\nLa reproducibilidad se define como la capacidad de obtener los mismos resultados utilizando los mismos datos y métodos que se emplearon en un análisis original. Este concepto es esencial en la investigación científica, ya que permite verificar y validar los resultados de un estudio. Según el informe de las National Academies of Sciences, Engineering, and Medicine (2019), la reproducibilidad garantiza que los resultados puedan ser replicados por otros investigadores o por el mismo autor en el futuro, siempre que se disponga de los datos y métodos originales.\n\n1.3.1.1 Características clave de la reproducibilidad:\n\nUso de los mismos datos: Los datos originales deben estar disponibles y ser accesibles para que otros puedan replicar el análisis.\nMétodos documentados: Es necesario que los pasos, herramientas y configuraciones utilizadas en el análisis estén claramente documentados.\nResultados consistentes: Al repetir el análisis con los mismos datos y métodos, los resultados deben ser idénticos.\n\n\n\n1.3.1.2 Importancia de la reproducibilidad:\n\nTransparencia: Permite que otros investigadores comprendan cómo se obtuvieron los resultados.\nVerificación: Facilita la identificación de errores o inconsistencias en el análisis original.\nColaboración: Proporciona una base sólida para que otros investigadores puedan construir sobre el trabajo existente.\n\nEn el contexto de R y RStudio, la reproducibilidad se logra mediante el uso de scripts que documentan cada paso del análisis. Estos scripts actúan como una “receta” que otros pueden seguir para obtener los mismos resultados. Además, herramientas como R Markdown y Quarto permiten combinar código, texto y resultados en un solo documento, lo que mejora aún más la transparencia y la reproducibilidad.\n\n\n\n1.3.2 Replicabilidad\nLa replicabilidad, por otro lado, se refiere a la capacidad de obtener resultados consistentes al realizar un estudio similar en un contexto diferente, utilizando nuevos datos o métodos ligeramente modificados. Este concepto evalúa la generalización de los hallazgos y su aplicabilidad en diferentes escenarios. De acuerdo con las National Academies of Sciences, Engineering, and Medicine (2019), la replicabilidad es fundamental para evaluar la robustez y la aplicabilidad de los resultados científicos en nuevos contextos.\n\n1.3.2.1 Características clave de la replicabilidad:\n\nNuevos datos: Se utilizan datos diferentes a los del estudio original, pero que representan un contexto similar.\nMétodos adaptados: Los métodos pueden ser ajustados o modificados para adaptarse a las características de los nuevos datos.\nResultados consistentes: Los hallazgos deben ser coherentes con los del estudio original, aunque no necesariamente idénticos.\n\n\n\n1.3.2.2 Importancia de la replicabilidad:\n\nGeneralización: Evalúa si los resultados del estudio original son aplicables en otros contextos o poblaciones.\nCredibilidad científica: Refuerza la confianza en los hallazgos al demostrar que no son producto de circunstancias específicas.\nAvance del conocimiento: Permite explorar nuevas aplicaciones o extensiones de los hallazgos originales.\n\nEn el contexto de R y RStudio, la replicabilidad se facilita mediante el uso de herramientas que permiten adaptar los análisis a nuevos conjuntos de datos. Por ejemplo, los scripts en R pueden ser reutilizados y ajustados para trabajar con datos diferentes, mientras que los paquetes como dplyr y ggplot2 permiten realizar análisis y visualizaciones de manera flexible y adaptable.\n\n\n\n1.3.3 Beneficios de la adopción de R para la Ciencia\n\nTransparencia: El código generado en R es accesible para revisión por pares, lo que fomenta la transparencia en los análisis (The Turing Way Community, 2023).\nEficiencia: Los métodos desarrollados en R pueden ser reutilizados en nuevos estudios, lo que optimiza los recursos y el tiempo (Gentleman & Temple Lang, 2007).\nCredibilidad: El uso de R facilita el cumplimiento de los principios FAIR (Findable, Accessible, Interoperable, Reusable), promoviendo la gestión adecuada de los datos científicos (Wilkinson et al., 2016).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1 ¿Qué es R?\nR es un lenguaje de programación y entorno computacional especializado en análisis estadístico y visualización científica, diseñado para investigación reproducible (Ihaka & Gentleman, 1996).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "basics.html#qué-es-r",
    "href": "basics.html#qué-es-r",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1.1 ¿Qué hace tan especial a R para el análisis estadístico?\n\nCódigo Abierto: Sin costos de licencia, ideal para proyectos académicos (R Core Team, 2023).\nExtensible: Hasta 2023 existen más de 19,000 paquetes disponibles en CRAN (Comprehensive R Archive Network) especializados en añadirle nuevas funciones para resolver necesidades especificas usando R, la funcionalidad de estos paquetes va desde hacer mejores gráficos de una manera sencilla hasta facilita procesos estadísticos (CRAN, 2023).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "basics.html#qué-es-rstudio",
    "href": "basics.html#qué-es-rstudio",
    "title": "1  Conceptos básicos de R",
    "section": "1.2 ¿Qué es RStudio?",
    "text": "1.2 ¿Qué es RStudio?\nRStudio es un Entorno de Desarrollo Integrado (IDE) que optimiza el flujo de trabajo en R, destacándose por su sistema de proyectos y herramientas para reproducibilidad (Allaire et al., 2022).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "basics.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "href": "basics.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "title": "1  Conceptos básicos de R",
    "section": "1.3 Reproducibilidad y replicabilidad en la investigación científica",
    "text": "1.3 Reproducibilidad y replicabilidad en la investigación científica\nEl 64% de los investigadores enfrenta dificultades para replicar estudios previos debido a una documentación insuficiente (Baker, 2016).\nProblemática: En herramientas como Excel o Infostat, los cálculos suelen realizarse en celdas ocultas y los gráficos se ajustan manualmente. Esto dificulta la replicación exacta de los análisis, incluso por parte del mismo autor después de un tiempo.\nSolución: el uso de R permite documentar cada paso del análisis mediante scripts, lo que garantiza que los procedimientos puedan ser replicados y reinterpretados en el futuro.\n\n\n\n“Un script de R es como una receta: cualquiera puede seguirla paso a paso para recrear tu ‘platillo’ científico. Así como, cualquiera puede re interpretarla para crear su propio ‘platillo’ científico.”\n\n\n\n1.3.1 Reproducibilidad\nLa reproducibilidad se define como la capacidad de obtener los mismos resultados utilizando los mismos datos y métodos que se emplearon en un análisis original. Este concepto es esencial en la investigación científica, ya que permite verificar y validar los resultados de un estudio. Según el informe de las National Academies of Sciences, Engineering, and Medicine (2019), la reproducibilidad garantiza que los resultados puedan ser replicados por otros investigadores o por el mismo autor en el futuro, siempre que se disponga de los datos y métodos originales.\n\n1.3.1.1 Características clave de la reproducibilidad:\n\nUso de los mismos datos: Los datos originales deben estar disponibles y ser accesibles para que otros puedan replicar el análisis.\nMétodos documentados: Es necesario que los pasos, herramientas y configuraciones utilizadas en el análisis estén claramente documentados.\nResultados consistentes: Al repetir el análisis con los mismos datos y métodos, los resultados deben ser idénticos.\n\n\n\n1.3.1.2 Importancia de la reproducibilidad:\n\nTransparencia: Permite que otros investigadores comprendan cómo se obtuvieron los resultados.\nVerificación: Facilita la identificación de errores o inconsistencias en el análisis original.\nColaboración: Proporciona una base sólida para que otros investigadores puedan construir sobre el trabajo existente.\n\nEn el contexto de R y RStudio, la reproducibilidad se logra mediante el uso de scripts que documentan cada paso del análisis. Estos scripts actúan como una “receta” que otros pueden seguir para obtener los mismos resultados. Además, herramientas como R Markdown y Quarto permiten combinar código, texto y resultados en un solo documento, lo que mejora aún más la transparencia y la reproducibilidad.\n\n\n\n1.3.2 Replicabilidad\nLa replicabilidad, por otro lado, se refiere a la capacidad de obtener resultados consistentes al realizar un estudio similar en un contexto diferente, utilizando nuevos datos o métodos ligeramente modificados. Este concepto evalúa la generalización de los hallazgos y su aplicabilidad en diferentes escenarios. De acuerdo con las National Academies of Sciences, Engineering, and Medicine (2019), la replicabilidad es fundamental para evaluar la robustez y la aplicabilidad de los resultados científicos en nuevos contextos.\n\n1.3.2.1 Características clave de la replicabilidad:\n\nNuevos datos: Se utilizan datos diferentes a los del estudio original, pero que representan un contexto similar.\nMétodos adaptados: Los métodos pueden ser ajustados o modificados para adaptarse a las características de los nuevos datos.\nResultados consistentes: Los hallazgos deben ser coherentes con los del estudio original, aunque no necesariamente idénticos.\n\n\n\n1.3.2.2 Importancia de la replicabilidad:\n\nGeneralización: Evalúa si los resultados del estudio original son aplicables en otros contextos o poblaciones.\nCredibilidad científica: Refuerza la confianza en los hallazgos al demostrar que no son producto de circunstancias específicas.\nAvance del conocimiento: Permite explorar nuevas aplicaciones o extensiones de los hallazgos originales.\n\nEn el contexto de R y RStudio, la replicabilidad se facilita mediante el uso de herramientas que permiten adaptar los análisis a nuevos conjuntos de datos. Por ejemplo, los scripts en R pueden ser reutilizados y ajustados para trabajar con datos diferentes, mientras que los paquetes como dplyr y ggplot2 permiten realizar análisis y visualizaciones de manera flexible y adaptable.\n\n\n\n1.3.3 Beneficios de la adopción de R para la Ciencia\n\nTransparencia: El código generado en R es accesible para revisión por pares, lo que fomenta la transparencia en los análisis (The Turing Way Community, 2023).\nEficiencia: Los métodos desarrollados en R pueden ser reutilizados en nuevos estudios, lo que optimiza los recursos y el tiempo (Gentleman & Temple Lang, 2007).\nCredibilidad: El uso de R facilita el cumplimiento de los principios FAIR (Findable, Accessible, Interoperable, Reusable), promoviendo la gestión adecuada de los datos científicos (Wilkinson et al., 2016).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "Entorno.html",
    "href": "Entorno.html",
    "title": "Entorno de desarrollo: RStudio",
    "section": "",
    "text": "¿Qué es RStudio?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de desarrollo: RStudio</span>"
    ]
  },
  {
    "objectID": "Entorno.html#características-y-ventajas-de-rstudio",
    "href": "Entorno.html#características-y-ventajas-de-rstudio",
    "title": "Entorno de desarrollo: RStudio",
    "section": "Características y ventajas de RStudio",
    "text": "Características y ventajas de RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de desarrollo: RStudio</span>"
    ]
  },
  {
    "objectID": "Entorno.html#reproducibilidad-y-replicabilidad-en-r-y-rstudio",
    "href": "Entorno.html#reproducibilidad-y-replicabilidad-en-r-y-rstudio",
    "title": "Entorno de desarrollo: RStudio",
    "section": "Reproducibilidad y replicabilidad en R y RStudio",
    "text": "Reproducibilidad y replicabilidad en R y RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Entorno de desarrollo: RStudio</span>"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Instalación y configuración",
    "section": "",
    "text": "Descarga de R y RStudio",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "install.html#instalación-de-r-y-rstudio",
    "href": "install.html#instalación-de-r-y-rstudio",
    "title": "Instalación y configuración",
    "section": "Instalación de R y RStudio",
    "text": "Instalación de R y RStudio",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "install.html#configuración-inicial",
    "href": "install.html#configuración-inicial",
    "title": "Instalación y configuración",
    "section": "Configuración inicial",
    "text": "Configuración inicial",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "install.html#organización-de-proyectos",
    "href": "install.html#organización-de-proyectos",
    "title": "Instalación y configuración",
    "section": "Organización de proyectos",
    "text": "Organización de proyectos",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "inicio.html",
    "href": "inicio.html",
    "title": "3  Primeros pasos en R",
    "section": "",
    "text": "3.1 Creación de scripts en RStudio\nPara comenzar a trabajar en RStudio, es fundamental crear un script donde se pueda escribir y guardar el código. Un script es un archivo que contiene las instrucciones que se ejecutarán en R. Existen dos métodos principales para crear un script en RStudio:\nUna vez creado, el script se convierte en un espacio de trabajo donde se desarrollarán los análisis y se documentarán los pasos realizados.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "inicio.html#guardado-y-organización-de-archivos",
    "href": "inicio.html#guardado-y-organización-de-archivos",
    "title": "3  Primeros pasos en R",
    "section": "3.2 Guardado y organización de archivos",
    "text": "3.2 Guardado y organización de archivos\nEs importante guardar el script desde el inicio para evitar la pérdida de trabajo. Para ello, se debe seleccionar la opción “Save As…” en la pestaña “File”, lo que permitirá elegir la ubicación y el nombre del archivo. Se recomienda utilizar nombres descriptivos y consistentes para facilitar la identificación de los archivos en el futuro.\nAdemás, se sugiere organizar los archivos en carpetas específicas para cada proyecto. Esto incluye para proyectos demasiado grandes separar los scripts, datos y resultados en directorios bien definidos. Si antes de crear nuestro script creamos un proyecto de R .Rproj al que ya sea le asignamos una carpeta como directorio de trabajo, al guardar nuestros scripts pertenecientes a ese proyecto lo debemos hacer en la misma carpeta donde se encuentra el archivo .Rproj.\nLa organización adecuada no solo ahorra tiempo, sino que también mejora la reproducibilidad del análisis, permitiendo que otros colaboradores o al propio usuario en el futuro entender y replicar el trabajo realizado.\n\n3.2.1 Recomendaciones para la organización de archivos\nLa organización de archivos en RStudio es fundamental para garantizar un flujo de trabajo eficiente y reproducible. Así como en una cocina bien organizada se separan los utensilios, ingredientes frescos y especias en cajones etiquetados, en RStudio es necesario establecer un sistema claro para guardar scripts, datos y resultados. Un proyecto desorganizado puede compararse con una alacena caótica: se pierde tiempo buscando archivos y se corre el riesgo de cometer errores. Para evitar estos problemas, se recomienda seguir las siguientes prácticas:\n\n3.2.1.1 Utilizar nombres descriptivos y consistentes\nEs importante asignar nombres que describan claramente el contenido del archivo y que sigan un formato uniforme. Por ejemplo:\n\nPara scripts: analisis1.R o 20231015_analisis_rendimiento_maiz.R.\nPara datos: datos_finales.xlsx o datos_suelo_antigua_2023.csv.\n\n\n\n3.2.1.2 Evitar espacios y caracteres especiales\nLos nombres de los archivos y los objetos en R no deben incluir espacios ni caracteres especiales, ya que esto puede generar problemas al trabajar con ellos en R. En su lugar, se recomienda usar guiones bajos (_) o guiones medios (-). Por ejemplo:\nEn lugar de analisis suelo.R, usar analisis_suelo.R.\n\n\n3.2.1.3 Incluir fechas en un formato estandarizado\nIncorporar fechas en los nombres de los archivos es una práctica útil para identificar rápidamente versiones o actualizaciones. Se sugiere utilizar el formato estándar YYYY-MM-DD. Por ejemplo:\n2023-10-15_importacion_datos.R.\n\n\n3.2.1.4 Crear una carpeta específica para cada proyecto\nEs recomendable organizar los archivos de cada proyecto en carpetas separadas. Esto facilita el acceso y asegura que todos los elementos relacionados con un proyecto estén agrupados en un solo lugar.\nAdoptar estas prácticas permite que cualquier colaborador, o incluso uno mismo en el futuro, pueda encontrar y comprender rápidamente los archivos necesarios. La organización no es un detalle menor, sino la base para trabajar de manera eficiente y garantizar la reproducibilidad de los análisis.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "inicio.html#introducción-a-los-objetos-en-r",
    "href": "inicio.html#introducción-a-los-objetos-en-r",
    "title": "3  Primeros pasos en R",
    "section": "3.3 Introducción a los objetos en R",
    "text": "3.3 Introducción a los objetos en R\nEn R, todo se maneja como un objeto. Un objeto es una estructura que almacena datos y tiene atributos como nombre y tipo. Los objetos son fundamentales para trabajar en R, ya que permiten almacenar y manipular información de manera eficiente.\nPara crear un objeto, se utiliza un operador de asignación, que puede ser ‘=’ o ‘&lt;-’. Sin embargo, se recomienda el uso de ‘&lt;-’ por ser el estándar en la comunidad de R. Por ejemplo, para asignar el valor 10 a un objeto llamado ‘x’, se puede escribir:\n\n# Creación del primer objeto en R\nx &lt;- 10",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "inicio.html#tipos-de-objetos-en-r-numéricos-texto-factores-lógicos",
    "href": "inicio.html#tipos-de-objetos-en-r-numéricos-texto-factores-lógicos",
    "title": "3  Primeros pasos en R",
    "section": "3.4 Tipos de objetos en R (numéricos, texto, factores, lógicos)",
    "text": "3.4 Tipos de objetos en R (numéricos, texto, factores, lógicos)\n\n3.4.1 Objetos Numéricos\nLos objetos numéricos almacenan datos como números enteros o decimales. Son útiles para representar variables cuantitativas como edad, altura o peso. Por ejemplo, se puede crear un objeto numérico de la siguiente manera:\n\n# Creación de objetos numéricos\nedad &lt;- 21 \naltura_m &lt;- 1.70 \npeso_lb &lt;- 150\n\n\n\n3.4.2 Objetos de Texto\nLos objetos de texto, también conocidos como objetos de tipo carácter, almacenan cadenas de texto. Estos se escriben entre comillas dobles. Por ejemplo, para almacenar el nombre y color favorito de una persona, se puede escribir el siguiente codigo:\n\n# Creación de objetos tipo carácter\nnombre &lt;- \"Juan\" \ncolor_favorito &lt;- \"azul\"\n\n\n\n3.4.3 Objetos de Tipo Factor\nLos objetos de tipo factor se utilizan para almacenar variables categóricas con niveles definidos, como escalas o categorías. Por ejemplo, para representar el estado civil y sexo de una persona, se puede escribir:\n\nestado_civil &lt;- factor(\"soltero\") \nsexo &lt;- factor(\"masculino\")\n\n\n\n3.4.4 Objetos Lógicos\nLos objetos lógicos almacenan valores de tipo TRUE o FALSE, que resultan de comparaciones lógicas. Por ejemplo, para verificar si la persona del ejemplo que se esta desarrollando es mayor de edad, se puede resolver con el siguiente código:\n\nmayoria_de_edad &lt;- edad &gt;= 18\nmayoria_de_edad\n\n[1] TRUE\n\n\nEstos objetos son útiles para aplicar filtros y realizar análisis condicionales en los datos.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "datos.html",
    "href": "datos.html",
    "title": "4  Estructura de datos en R",
    "section": "",
    "text": "4.1 Vectores\nEn R, las estructuras de datos son fundamentales para organizar, almacenar y manipular información de manera eficiente. Estas estructuras permiten trabajar con diferentes tipos de datos, desde valores individuales hasta colecciones complejas, facilitando el análisis estadístico y la visualización. Entre las principales estructuras de datos en R se encuentran los vectores, data frames y listas, cada una con características específicas que las hacen adecuadas para distintas tareas.\nUn vector es la estructura de datos más básica y fundamental en R. Es una colección ordenada de elementos del mismo tipo, como números, texto o valores lógicos. Los vectores son unidimensionales, lo que significa que los datos se almacenan en una sola fila o columna. Por ejemplo, un vector puede representar una lista de edades, nombres o resultados de un experimento.\nEn R, los vectores son esenciales porque muchas otras estructuras de datos, como los data frames, están construidas a partir de ellos. Todos los elementos de un vector deben ser del mismo tipo de dato, lo que garantiza consistencia en las operaciones realizadas sobre ellos.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "datos.html#data-frames-creación-ventajas-y-manipulación",
    "href": "datos.html#data-frames-creación-ventajas-y-manipulación",
    "title": "4  Estructura de datos en R",
    "section": "4.2 Data frames: creación, ventajas y manipulación",
    "text": "4.2 Data frames: creación, ventajas y manipulación",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "datos.html#comparación-entre-data-frames-y-listas",
    "href": "datos.html#comparación-entre-data-frames-y-listas",
    "title": "4  Estructura de datos en R",
    "section": "4.4 Comparación entre data frames y listas",
    "text": "4.4 Comparación entre data frames y listas\n\n\n\n\n\n\n\n\nCaracterística\nData Frame\nLista\n\n\n\n\nEstructura\nTabular (filas y columnas)\nColección de objetos heterogéneos\n\n\nTipos de datos\nColumnas con tipos diferentes\nElementos de cualquier tipo\n\n\nUso principal\nAnálisis estadístico y visualización\nAlmacenamiento de resultados complejos\n\n\nAcceso a elementos\nPor columnas o índices\nPor nombres o índices\n\n\n\nAmbas estructuras son fundamentales en R, y su elección depende del tipo de datos y del análisis que se desee realizar. En análisis estadístico habitualmente se emplean los data frames para almacenar datos y las listas se emplean para almacenar los resultados de pruebas y análisis.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "importacion.html",
    "href": "importacion.html",
    "title": "5  Importacion de datos",
    "section": "",
    "text": "5.1 Importación de archivos CSV",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importacion de datos</span>"
    ]
  },
  {
    "objectID": "importacion.html#importación-de-archivos-excel",
    "href": "importacion.html#importación-de-archivos-excel",
    "title": "5  Importacion de datos",
    "section": "5.2 Importación de archivos Excel",
    "text": "5.2 Importación de archivos Excel",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importacion de datos</span>"
    ]
  },
  {
    "objectID": "importacion.html#configuración-del-directorio-de-trabajo",
    "href": "importacion.html#configuración-del-directorio-de-trabajo",
    "title": "5  Importacion de datos",
    "section": "5.3 Configuración del directorio de trabajo",
    "text": "5.3 Configuración del directorio de trabajo",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importacion de datos</span>"
    ]
  },
  {
    "objectID": "operadores.html",
    "href": "operadores.html",
    "title": "6  Operadores en R",
    "section": "",
    "text": "6.1 Operadores aritméticos y lógicos",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "operadores.html#ejemplos-prácticos-de-uso-de-operadores",
    "href": "operadores.html#ejemplos-prácticos-de-uso-de-operadores",
    "title": "6  Operadores en R",
    "section": "6.2 Ejemplos prácticos de uso de operadores",
    "text": "6.2 Ejemplos prácticos de uso de operadores",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "manipulacion.html",
    "href": "manipulacion.html",
    "title": "8  Manipulación de datos",
    "section": "",
    "text": "8.1 Introducción a los paquetes dplyr y tidyr",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Manipulación de datos</span>"
    ]
  },
  {
    "objectID": "manipulacion.html#operaciones-básicas-filtrar-seleccionar-agrupar-y-resumir-datos",
    "href": "manipulacion.html#operaciones-básicas-filtrar-seleccionar-agrupar-y-resumir-datos",
    "title": "8  Manipulación de datos",
    "section": "8.2 Operaciones básicas: filtrar, seleccionar, agrupar y resumir datos",
    "text": "8.2 Operaciones básicas: filtrar, seleccionar, agrupar y resumir datos",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Manipulación de datos</span>"
    ]
  },
  {
    "objectID": "manipulacion.html#uso-de-pipes-para-mejorar-la-legibilidad-del-código",
    "href": "manipulacion.html#uso-de-pipes-para-mejorar-la-legibilidad-del-código",
    "title": "8  Manipulación de datos",
    "section": "8.3 Uso de pipes (%>%) para mejorar la legibilidad del código",
    "text": "8.3 Uso de pipes (%&gt;%) para mejorar la legibilidad del código",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Manipulación de datos</span>"
    ]
  },
  {
    "objectID": "visualizacion.html",
    "href": "visualizacion.html",
    "title": "9  visualización de datos",
    "section": "",
    "text": "9.1 Introducción al paquete ggplot2",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>visualización de datos</span>"
    ]
  },
  {
    "objectID": "visualizacion.html#creación-de-gráficos-básicos-histogramas-scatterplots-boxplots",
    "href": "visualizacion.html#creación-de-gráficos-básicos-histogramas-scatterplots-boxplots",
    "title": "9  visualización de datos",
    "section": "9.2 Creación de gráficos básicos: histogramas, scatterplots, boxplots",
    "text": "9.2 Creación de gráficos básicos: histogramas, scatterplots, boxplots",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>visualización de datos</span>"
    ]
  },
  {
    "objectID": "visualizacion.html#personalización-de-gráficos",
    "href": "visualizacion.html#personalización-de-gráficos",
    "title": "9  visualización de datos",
    "section": "9.3 Personalización de gráficos",
    "text": "9.3 Personalización de gráficos",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>visualización de datos</span>"
    ]
  },
  {
    "objectID": "exportacion.html",
    "href": "exportacion.html",
    "title": "10  Exportación de resultados",
    "section": "",
    "text": "10.1 Guardar gráficos con ggsave",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exportación de resultados</span>"
    ]
  },
  {
    "objectID": "exportacion.html#exportación-de-tablas-en-formato-csv",
    "href": "exportacion.html#exportación-de-tablas-en-formato-csv",
    "title": "10  Exportación de resultados",
    "section": "10.2 Exportación de tablas en formato CSV",
    "text": "10.2 Exportación de tablas en formato CSV",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exportación de resultados</span>"
    ]
  },
  {
    "objectID": "paquetes.html",
    "href": "paquetes.html",
    "title": "7  Paquetes en R",
    "section": "",
    "text": "7.1 ¿Qué son los paquetes en R?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Paquetes en R</span>"
    ]
  },
  {
    "objectID": "paquetes.html#instalación-y-carga-de-paquetes",
    "href": "paquetes.html#instalación-y-carga-de-paquetes",
    "title": "7  Paquetes en R",
    "section": "7.2 Instalación y carga de paquetes",
    "text": "7.2 Instalación y carga de paquetes",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Paquetes en R</span>"
    ]
  },
  {
    "objectID": "paquetes.html#paquetes-recomendados-para-tareas-específicas",
    "href": "paquetes.html#paquetes-recomendados-para-tareas-específicas",
    "title": "7  Paquetes en R",
    "section": "7.3 Paquetes recomendados para tareas específicas",
    "text": "7.3 Paquetes recomendados para tareas específicas",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Paquetes en R</span>"
    ]
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Creative Commons Legal Code\nCC0 1.0 Universal\nCREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\nLEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\nATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\nINFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\nREGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\nPROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\nTHE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\nHEREUNDER.\nStatement of Purpose\nThe laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an “owner”) of an original work of authorship and/or a database (each, a “Work”).\nCertain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (“Commons”) that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.\nFor these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the “Affirmer”), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.\n\nCopyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (“Copyright and Related Rights”). Copyright and Related Rights include, but are not limited to, the following:\n\n\n\nthe right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;\nmoral rights retained by the original author(s) and/or performer(s);\npublicity and privacy rights pertaining to a person’s image or likeness depicted in a Work;\nrights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;\nrights protecting the extraction, dissemination, use and reuse of data in a Work;\ndatabase rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and\nother similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.\n\n\n\nWaiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer’s heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer’s express Statement of Purpose.\nPublic License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “License”). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer’s express Statement of Purpose.\nLimitations and Disclaimers.\n\n\n\nNo trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.\nAffirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.\nAffirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person’s Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.\nAffirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work."
  },
  {
    "objectID": "index.html#en-qué-consiste-este-manual",
    "href": "index.html#en-qué-consiste-este-manual",
    "title": "Introducción al entorno de programacón R y su aplicacion en el análisis estadístico de datos",
    "section": "¿En qué consiste este manual?",
    "text": "¿En qué consiste este manual?\nEl presente manual, tiene como objetivo proporcionar una guía práctica y estructurada para el aprendizaje y uso del lenguaje de programación R. Este se diseñó para facilitar la comprensión de conceptos fundamentales, desde la instalación de R y RStudio hasta la manipulación de datos, visualización gráfica y exportación de resultados.\nR, como herramienta de código abierto, se ha consolidado como un estándar en el análisis estadístico y la ciencia de datos, gracias a su flexibilidad, extensibilidad y capacidad para garantizar la reproducibilidad científica. A lo largo de este documento, se exploran las principales características de R y su entorno de desarrollo integrado (IDE), RStudio, destacando su utilidad en proyectos académicos y profesionales. Además, se incluyen ejemplos prácticos, recomendaciones de buenas prácticas y recursos adicionales para profundizar en el aprendizaje.\nEste manual está dirigido a estudiantes, investigadores y profesionales interesados en adquirir habilidades en análisis de datos y programación estadística, con un enfoque en la claridad, la organización y la reproducibilidad.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#cómo-esta-organizado-este-manual",
    "href": "index.html#cómo-esta-organizado-este-manual",
    "title": "Introducción al entorno de programacón R y su aplicacion en el análisis estadístico de datos",
    "section": "¿Cómo esta organizado este manual?",
    "text": "¿Cómo esta organizado este manual?\nEste manual está diseñado para guiar a principiantes en el uso del lenguaje de programación R, con un enfoque en el análisis estadístico. Su estructura sigue un enfoque progresivo, comenzando con los conceptos más básicos y avanzando hacia herramientas y técnicas más complejas. Cada sección incluye explicaciones claras, ejemplos prácticos y ejercicios que permiten aplicar lo aprendido. Además, se han incorporado recomendaciones y buenas prácticas para facilitar el aprendizaje y fomentar la reproducibilidad en los análisis.\nEl contenido se organiza en los siguientes capítulos principales:\n\nIntroducción a R y RStudio: Se presenta qué es R, sus características principales y cómo instalar tanto R como RStudio. También se explica cómo configurar el entorno de trabajo.\nConceptos básicos de R: Se abordan los fundamentos del lenguaje, como la creación de objetos, tipos de datos y operadores.\nManipulación de datos: Se introduce el uso de herramientas como dplyr y tidyr para transformar y organizar datos de manera eficiente.\nVisualización de datos: Se enseña a crear gráficos básicos y personalizados utilizando el paquete ggplot2.\nExportación de resultados: Se explica cómo guardar gráficos, tablas y otros resultados en formatos útiles para informes y presentaciones.\nMaterial de apoyo y referencias: Se incluyen recursos adicionales para profundizar en el aprendizaje de R.\n\nCada capítulo está diseñado para ser independiente, permitiendo que los lectores avancen a su propio ritmo y consulten las secciones según sus necesidades.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#pre-requisitos",
    "href": "index.html#pre-requisitos",
    "title": "Introducción al entorno de programacón R y su aplicacion en el análisis estadístico de datos",
    "section": "Pre requisitos",
    "text": "Pre requisitos\nEste manual no requiere conocimientos previos en programación ni en análisis estadístico. Está diseñado específicamente para principiantes, por lo que se parte desde cero, explicando cada concepto de manera clara y detallada. Todo lo que se necesita es:\n\nInterés por aprender: La curiosidad y disposición para explorar un nuevo lenguaje de programación.\nAcceso a una computadora: Con capacidad para instalar R y RStudio, herramientas que se explican paso a paso en el manual.\nPaciencia y práctica: Como cualquier habilidad nueva, aprender R requiere tiempo y dedicación. Los ejemplos y ejercicios incluidos están diseñados para facilitar este proceso.\n\nCon este enfoque, cualquier persona, independientemente de su experiencia previa, podrá utilizar este manual como una guía para iniciarse en el análisis estadístico con R.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#colofón",
    "href": "index.html#colofón",
    "title": "Introducción al entorno de programacón R y su aplicacion en el análisis estadístico de datos",
    "section": "Colofón",
    "text": "Colofón\nLa versión en línea de este manual estará disponible en https://introduccion-r-cete.vercel.app/. La fuente del manual en español se encuentra en el repositorio: https://github.com/Ludwing-MJ/introduccion_R_CETE. Este manual ha sido desarrollado utilizando Quarto, una herramienta que facilita la conversión de archivos .qmd en formatos publicables como HTML, PDF y EPUB. Además, Quarto permite trabajar con una interfaz visual y amigable para el desarrollador desde RStudio, optimizando la creación de contenido reproducible y accesible.\nEste manual fue construido con:\n\ndevtools::session_info()\n\nWarning in system2(\"quarto\", \"-V\", stdout = TRUE, env = paste0(\"TMPDIR=\", : el\ncomando ejecutado '\"quarto\"\nTMPDIR=C:/Users/Usuario/AppData/Local/Temp/Rtmpgfxc2N/file2fc87e0b3edd -V'\ntiene el estatus 1\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.2 (2024-10-31 ucrt)\n os       Windows 11 x64 (build 26100)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Spanish_Guatemala.utf8\n ctype    Spanish_Guatemala.utf8\n tz       America/Guatemala\n date     2025-03-21\n pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   NA @ C:\\\\Users\\\\Usuario\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cachem        1.1.0   2024-05-16 [1] CRAN (R 4.4.2)\n cli           3.6.3   2024-06-21 [1] CRAN (R 4.4.2)\n devtools      2.4.5   2022-10-11 [1] CRAN (R 4.4.3)\n digest        0.6.37  2024-08-19 [1] CRAN (R 4.4.2)\n ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.4.3)\n evaluate      1.0.3   2025-01-10 [1] CRAN (R 4.4.2)\n fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.2)\n fs            1.6.5   2024-10-30 [1] CRAN (R 4.4.2)\n glue          1.8.0   2024-09-30 [1] CRAN (R 4.4.2)\n htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.2)\n htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.3)\n httpuv        1.6.15  2024-03-26 [1] CRAN (R 4.4.3)\n jsonlite      1.8.9   2024-09-20 [1] CRAN (R 4.4.2)\n knitr         1.49    2024-11-08 [1] CRAN (R 4.4.2)\n later         1.4.1   2024-11-27 [1] CRAN (R 4.4.3)\n lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.2)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.2)\n memoise       2.0.1   2021-11-26 [1] CRAN (R 4.4.2)\n mime          0.12    2021-09-28 [1] CRAN (R 4.4.0)\n miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.4.3)\n pkgbuild      1.4.6   2025-01-16 [1] CRAN (R 4.4.3)\n pkgload       1.4.0   2024-06-28 [1] CRAN (R 4.4.3)\n profvis       0.4.0   2024-09-20 [1] CRAN (R 4.4.3)\n promises      1.3.2   2024-11-28 [1] CRAN (R 4.4.3)\n purrr         1.0.4   2025-02-05 [1] CRAN (R 4.4.2)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.2)\n Rcpp          1.0.14  2025-01-12 [1] CRAN (R 4.4.2)\n remotes       2.5.0   2024-03-17 [1] CRAN (R 4.4.3)\n rlang         1.1.5   2025-01-17 [1] CRAN (R 4.4.2)\n rmarkdown     2.29    2024-11-04 [1] CRAN (R 4.4.2)\n rstudioapi    0.17.1  2024-10-22 [1] CRAN (R 4.4.2)\n sessioninfo   1.2.3   2025-02-05 [1] CRAN (R 4.4.3)\n shiny         1.10.0  2024-12-14 [1] CRAN (R 4.4.3)\n urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.4.3)\n usethis       3.1.0   2024-11-26 [1] CRAN (R 4.4.3)\n vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.2)\n xfun          0.50    2025-01-07 [1] CRAN (R 4.4.2)\n xtable        1.8-4   2019-04-21 [1] CRAN (R 4.4.3)\n\n [1] C:/Users/Usuario/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.4.2/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "references.html#material-de-apoyo",
    "href": "references.html#material-de-apoyo",
    "title": "11  Material de apoyo y referencias",
    "section": "",
    "text": "Tutorial en YouTube “Cómo instalar R y RStudio en menos de 2 minutos - 2024”. Elaborado por Herbert Lizama.\nR para ciencia de datos por Handley Wickham & Garrett Grolemund",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Material de apoyo y referencias</span>"
    ]
  },
  {
    "objectID": "references.html#referencias",
    "href": "references.html#referencias",
    "title": "11  Material de apoyo y referencias",
    "section": "11.2 Referencias",
    "text": "11.2 Referencias\n\nAllaire, J. J., Xie, Y., & McPherson, J. (2022). R Markdown: The Definitive Guide. Chapman & Hall/CRC. https://www.taylorfrancis.com/books/mono/10.1201/9781138359444/markdown-yihui-xie-allaire-garrett-grolemund\nBaker, M. (2016). 1,500 scientists lift the lid on reproducibility. Nature, 533(7604), 452–454. https://doi.org/10.1038/533452a\nGentleman, R., & Temple Lang, D. (2007). Statistical analyses and reproducible research. Journal of Computational and Graphical Statistics, 16(1), 1–23. https://doi.org/10.1198/106186007X178663\nHmelo-Silver, C. E., Duncan, R. G., & Chinn, C. A. (2007). Scaffolding and achievement in problem-based and inquiry learning: A response to Kirschner, Sweller, and Clark (2006). Educational Psychologist, 42(2), 99–107. https://doi.org/10.1080/00461520701263368\nIhaka, R., & Gentleman, R. (1996). R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics, 5(3), 299–314.\nKolb, D. A. (1984). Experiential learning: Experience as the source of learning and development. Prentice Hall.\nNational Academies of Sciences, Engineering, and Medicine. (2019). Reproducibility and replicability in science. National Academies Press. https://doi.org/10.17226/25303\nR Core Team. (2023). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.Rproject.org\nThe Turing Way Community. (2023). The Turing Way: A handbook for reproducible, ethical and collaborative research. https://the-turing-way.netlify.app\nWilkinson, M. D. et al. (2016). The FAIR Guiding Principles for scientific data management and stewardship. Scientific Data, 3(1), 160018. https://doi.org/10.1038/sdata.2016.18",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Material de apoyo y referencias</span>"
    ]
  },
  {
    "objectID": "01_cbasicos.html",
    "href": "01_cbasicos.html",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1 ¿Qué es R?\nR es un lenguaje de programación y un entorno computacional ampliamente utilizado en el análisis estadístico, la ciencia de datos y la visualización científica. Fue desarrollado por Ross Ihaka y Robert Gentleman en 1996 con el propósito de ofrecer una herramienta poderosa y flexible para realizar análisis reproducibles y visualizaciones de alta calidad. Desde su creación, R se ha consolidado como una de las herramientas más populares en las comunidades científica, académica y profesional (Ihaka & Gentleman, 1996).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "01_cbasicos.html#qué-es-r",
    "href": "01_cbasicos.html#qué-es-r",
    "title": "1  Conceptos básicos de R",
    "section": "",
    "text": "1.1.1 Características principales de R\nEspecialización en análisis estadístico: R está diseñado para realizar análisis estadísticos complejos, desde pruebas básicas como t-tests y ANOVA hasta modelos avanzados como regresión, análisis multivariado y aprendizaje automático.\nVisualización de datos: Incluye herramientas para crear gráficos de alta calidad y personalizables. Con paquetes como ggplot2, es posible generar visualizaciones avanzadas que permiten explorar y comunicar patrones en los datos de manera efectiva.\nLenguaje de código abierto: R es un software de código abierto, lo que lo hace gratuito y accesible para todos. Esto fomenta la colaboración y el desarrollo continuo por parte de una comunidad global de usuarios y desarrolladores.\nExtensibilidad mediante paquetes: R cuenta con una amplia colección de paquetes (más de 19,000 disponibles en CRAN hasta 2023) que amplían sus capacidades. Estos paquetes permiten realizar tareas específicas, como análisis genómico, minería de texto, modelado espacial y más (R Core Team, 2023).\nReproducibilidad: R promueve la investigación reproducible al permitir que los análisis se documenten en scripts, asegurando que los resultados puedan ser replicados por otros investigadores o por el mismo usuario en el futuro.\nInteroperabilidad: R puede integrarse con otros lenguajes de programación como Python, C++ y SQL, y es compatible con múltiples formatos de datos, como CSV, Excel, JSON y bases de datos relacionales.\n\n\n1.1.2 ¿Por qué es especial R?\nR no solo es una herramienta para realizar cálculos estadísticos, sino que también es un entorno completo para la manipulación de datos, la creación de gráficos y la automatización de flujos de trabajo. Su flexibilidad y capacidad de personalización lo convierten en una opción ideal para investigadores, analistas de datos y profesionales de diversas disciplinas.\nAdemás, R es altamente extensible gracias a su comunidad activa, que constantemente desarrolla nuevos paquetes y recursos. Esto lo convierte en una herramienta en constante evolución, capaz de adaptarse a las necesidades cambiantes de la ciencia y la industria.\nEn resumen, R es mucho más que un lenguaje de programación: es una plataforma integral para el análisis de datos, la visualización y la investigación reproducible, lo que lo hace indispensable en el ámbito académico y profesional.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "01_cbasicos.html#qué-es-rstudio",
    "href": "01_cbasicos.html#qué-es-rstudio",
    "title": "1  Conceptos básicos de R",
    "section": "1.2 ¿Qué es RStudio?",
    "text": "1.2 ¿Qué es RStudio?\nRStudio es un Entorno de Desarrollo Integrado (IDE, por sus siglas en inglés) diseñado específicamente para trabajar con el lenguaje de programación R. Este entorno proporciona una interfaz amigable y herramientas avanzadas que optimizan el flujo de trabajo en R, facilitando tanto el análisis estadístico como la visualización de datos. Su diseño está orientado a mejorar la productividad y la reproducibilidad en proyectos de análisis de datos, investigación científica y desarrollo de aplicaciones (Allaire et al. 2022).\n\n\n\n\n\n\n1.2.1 Características principales de RStudio\nInterfaz intuitiva y organizada: RStudio divide su interfaz en paneles que permiten acceder fácilmente a diferentes herramientas y funciones. Estos paneles incluyen:\n\nEditor de scripts: Donde se escribe y edita el código R.\nConsola: Para ejecutar comandos y ver resultados en tiempo real.\nEnvironment/History: Muestra los objetos creados en la sesión actual y el historial de comandos ejecutados.\nPlots/Files/Packages/Help: Panel multifuncional para visualizar gráficos, gestionar archivos, instalar paquetes y acceder a documentación.\n\nSistema de proyectos: RStudio permite organizar el trabajo en proyectos, lo que facilita la gestión de archivos, scripts y datos relacionados con un análisis específico. Cada proyecto tiene su propio directorio de trabajo, lo que mejora la organización y la reproducibilidad.\nCompatibilidad con múltiples formatos: RStudio soporta la importación y exportación de datos en diversos formatos, como CSV, Excel, html y bases de datos SQL. Además, permite trabajar con gráficos interactivos y aplicaciones web mediante paquetes como shiny y plotly.\nIntegración con paquetes y extensiones: RStudio facilita la instalación y el uso de paquetes de R, como ggplot2 para gráficos, dplyr para manipulación de datos y tidyr para transformación de datos. También permite gestionar dependencias y actualizar paquetes de manera sencilla.\nSoporte multiplataforma: RStudio está disponible para sistemas operativos Windows, macOS y Linux, lo que lo hace accesible para una amplia variedad de usuarios.\nPersonalización y extensibilidad: Los usuarios pueden personalizar la apariencia y el comportamiento de RStudio, como cambiar temas, atajos de teclado y configuraciones de paneles. Además, se pueden integrar herramientas externas, como Git para control de versiones.\n\n\n1.2.2 Beneficios de usar RStudio\nEficiencia: Su diseño permite realizar tareas de análisis de datos de manera más rápida y organizada.\nReproducibilidad: Las herramientas integradas, como R Markdown y el sistema de proyectos, garantizan que los análisis puedan ser replicados fácilmente.\nAccesibilidad: Su interfaz gráfica es ideal tanto para principiantes como para usuarios avanzados.\nFlexibilidad: Permite trabajar con datos, gráficos, modelos estadísticos y aplicaciones interactivas en un solo entorno.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "01_cbasicos.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "href": "01_cbasicos.html#reproducibilidad-y-replicabilidad-en-la-investigación-científica",
    "title": "1  Conceptos básicos de R",
    "section": "1.3 Reproducibilidad y replicabilidad en la investigación científica",
    "text": "1.3 Reproducibilidad y replicabilidad en la investigación científica\nEl 64% de los investigadores enfrenta dificultades para replicar estudios previos debido a una documentación insuficiente (Baker, 2016).\nProblemática: En herramientas como Excel o Infostat, los cálculos suelen realizarse en celdas ocultas y los gráficos se ajustan manualmente. Esto dificulta la replicación exacta de los análisis, incluso por parte del mismo autor después de un tiempo.\nSolución: el uso de R permite documentar cada paso del análisis mediante scripts, lo que garantiza que los procedimientos puedan ser replicados y reinterpretados en el futuro.\n\n\n\nUn script de R puede compararse con una receta, ya que permite ser seguido paso a paso para reproducir el mismo análisis. De manera similar a una receta que puede ser reinterpretada al modificar los ingredientes, un script puede adaptarse para realizar un análisis diferente utilizando nuevos datos.\n\n\n\n1.3.1 Reproducibilidad\nLa reproducibilidad se define como la capacidad de obtener los mismos resultados utilizando los mismos datos y métodos que se emplearon en un análisis original. Este concepto es esencial en la investigación científica, ya que permite verificar y validar los resultados de un estudio. Según el informe de las National Academies of Sciences, Engineering, and Medicine (2019), la reproducibilidad garantiza que los resultados puedan ser replicados por otros investigadores o por el mismo autor en el futuro, siempre que se disponga de los datos y métodos originales.\n\n1.3.1.1 Características clave de la reproducibilidad:\nUso de los mismos datos: Los datos originales deben estar disponibles y ser accesibles para que otros puedan replicar el análisis.\nMétodos documentados: Es necesario que los pasos, herramientas y configuraciones utilizadas en el análisis estén claramente documentados.\nResultados consistentes: Al repetir el análisis con los mismos datos y métodos, los resultados deben ser idénticos.\n\n\n1.3.1.2 Importancia de la reproducibilidad:\nTransparencia: Permite que otros investigadores comprendan cómo se obtuvieron los resultados.\nVerificación: Facilita la identificación de errores o inconsistencias en el análisis original.\nColaboración: Proporciona una base sólida para que otros investigadores puedan construir sobre el trabajo existente.\n\n\n\n1.3.2 Replicabilidad\nLa replicabilidad, por otro lado, se refiere a la capacidad de obtener resultados consistentes al realizar un estudio similar en un contexto diferente, utilizando nuevos datos o métodos ligeramente modificados. Este concepto evalúa la generalización de los hallazgos y su aplicabilidad en diferentes escenarios. De acuerdo con las National Academies of Sciences, Engineering, and Medicine (2019), la replicabilidad es fundamental para evaluar la robustez y la aplicabilidad de los resultados científicos en nuevos contextos.\n\n1.3.2.1 Características clave de la replicabilidad:\nNuevos datos: Se utilizan datos diferentes a los del estudio original, pero que representan un contexto similar.\nMétodos adaptados: Los métodos pueden ser ajustados o modificados para adaptarse a las características de los nuevos datos.\nResultados consistentes: Los hallazgos deben ser coherentes con los del estudio original, aunque no necesariamente idénticos.\n\n\n1.3.2.2 Importancia de la replicabilidad:\nGeneralización: Evalúa si los resultados del estudio original son aplicables en otros contextos o poblaciones.\nCredibilidad científica: Refuerza la confianza en los hallazgos al demostrar que no son producto de circunstancias específicas.\nAvance del conocimiento: Permite explorar nuevas aplicaciones o extensiones de los hallazgos originales.\n\n\n\n1.3.3 Beneficios de la adopción de R para la Ciencia\nTransparencia: El código generado en R es accesible para revisión por pares, lo que fomenta la transparencia en los análisis (The Turing Way Community, 2023).\nEficiencia: Los métodos desarrollados en R pueden ser reutilizados en nuevos estudios, lo que optimiza los recursos y el tiempo (Gentleman & Temple Lang, 2007).\nCredibilidad: El uso de R facilita el cumplimiento de los principios FAIR (Findable, Accessible, Interoperable, Reusable), promoviendo la gestión adecuada de los datos científicos (Wilkinson et al., 2016).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Conceptos básicos de R</span>"
    ]
  },
  {
    "objectID": "02_instalacion_confi.html",
    "href": "02_instalacion_confi.html",
    "title": "2  Instalación y configuración",
    "section": "",
    "text": "2.1 Descarga de R y RStudio\nPara comenzar a trabajar con R y RStudio, es necesario descargar ambos programas. R es un lenguaje de programación y entorno computacional, mientras que RStudio es un Entorno de Desarrollo Integrado (IDE) que facilita el uso de R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "02_instalacion_confi.html#descarga-de-r-y-rstudio",
    "href": "02_instalacion_confi.html#descarga-de-r-y-rstudio",
    "title": "2  Instalación y configuración",
    "section": "",
    "text": "2.1.1 Descarga de R\nSe recomienda descargar una versión estable de R para evitar problemas de compatibilidad con paquetes que aún no han sido actualizados para las versiones más recientes. Por ejemplo, en este curso se utiliza la versión R 4.3.1, ya que es una versión estable conocida.\nEl repositorio oficial de R se encuentra en el siguiente enlace: https://cran.r-project.org/bin/windows/base/old/.\nEn esta página, se puede acceder a un directorio con todas las versiones de R disponibles. Para descargar una versión específica, basta con hacer clic en el nombre de la versión deseada. Esto abrirá un directorio con la documentación y los archivos correspondientes. El archivo que se debe descargar tiene una terminación -win.exe, y al hacer clic en él, se descargará automáticamente el instalador.\n\n\n2.1.2 Descarga de RStudio\nPara obtener RStudio, se debe visitar la página oficial de descargas de RStudio.\nEn esta página, se puede descargar la versión más reciente de RStudio haciendo clic en el botón “Download RStudio Desktop for Windows”.\nSi el dispositivo utiliza un sistema operativo diferente a Windows, en la misma página se encuentran las versiones compatibles con otros sistemas operativos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "02_instalacion_confi.html#instalación-de-r-y-rstudio",
    "href": "02_instalacion_confi.html#instalación-de-r-y-rstudio",
    "title": "2  Instalación y configuración",
    "section": "2.2 Instalación de R y RStudio",
    "text": "2.2 Instalación de R y RStudio\nLa instalación de R y RStudio debe realizarse en un orden específico para evitar conflictos y errores:\n\n2.2.1 Instalación de R\n\nUna vez descargado el instalador de R, se debe ejecutar el archivo .exe y seguir las instrucciones del asistente de instalación.\nDurante el proceso, se pueden aceptar las configuraciones predeterminadas.\n\n\n\n2.2.2 Instalación de RStudio\n\nDespués de instalar R, se debe ejecutar el instalador de RStudio descargado previamente.\nAl igual que con R, se pueden aceptar las configuraciones predeterminadas durante la instalación.\n\nEs importante mencionar que en un mismo dispositivo pueden coexistir varias versiones de R. RStudio permite seleccionar cuál de estas versiones se utilizará en cada proyecto desde su configuración.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "02_instalacion_confi.html#configuración-inicial",
    "href": "02_instalacion_confi.html#configuración-inicial",
    "title": "2  Instalación y configuración",
    "section": "2.3 Configuración inicial",
    "text": "2.3 Configuración inicial\nUna vez instalados R y RStudio, es recomendable realizar una configuración inicial para optimizar el entorno de trabajo:\n\n2.3.1 Seleccionar la versión de R\nEn RStudio, se puede elegir la versión de R que se utilizará. Esto es útil si se tienen múltiples versiones instaladas. Para configurarlo, se debe ir a Tools &gt; Global Options &gt; General y seleccionar la versión deseada en el apartado R version.\n\n\n2.3.2 Configurar la apariencia de RStudio\nRStudio permite personalizar su apariencia para adaptarse a las preferencias del usuario y mejorar la experiencia de trabajo. A continuación, se describen los pasos para configurar la apariencia de la interfaz:\n\n2.3.2.1 Cambiar el tema de la interfaz\n\nEn la barra de menú, se debe seleccionar Tools &gt; Global Options.\nEn la ventana emergente, se accede a la pestaña Appearance.\nEn esta sección, es posible elegir entre diferentes temas para la interfaz, como temas claros u oscuros. Por ejemplo, los temas oscuros como Cobalt son recomendables para reducir la fatiga visual durante sesiones prolongadas.\nTambién se pueden ajustar el tamaño y el tipo de fuente para facilitar la lectura del código, según las preferencias del usuario.\n\n\n\n2.3.2.2 Configurar el panel de trabajo\nLa interfaz de RStudio está organizada en cuatro paneles principales: el editor de scripts, la consola, el entorno/archivos y los gráficos/ayuda. Estos paneles pueden reorganizarse según las necesidades del usuario.\n\nDesde la barra de menú, se selecciona Tools &gt; Global Options &gt; Pane Layout.\nEn esta sección, se ajusta la disposición de los paneles. Por ejemplo, se puede colocar el editor de scripts en la parte superior izquierda y la consola en la parte inferior para facilitar el acceso.\nUna vez realizada la configuración, se guardan los cambios para aplicar la nueva disposición.\n\n\n\n2.3.2.3 Habilitar el número de líneas en el editor de scripts\nLa numeración de líneas en el editor de scripts facilita la navegación y depuración del código.\n\nSe accede a Tools &gt; Global Options &gt; Code &gt; Display.\nEn esta sección, se marca la casilla Show line numbers para activar la numeración de líneas.\n\n\n\n2.3.2.4 Activar el ajuste de línea (Word Wrap)\nCuando se trabaja con líneas de código largas, habilitar el ajuste de línea evita que el texto se desborde fuera del área visible.\n\nEn la barra de menú, se selecciona Tools &gt; Global Options &gt; Code &gt; Display.\nSe activa la opción Soft-wrap R source files para habilitar el ajuste de línea.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "02_instalacion_confi.html#organización-de-proyectos",
    "href": "02_instalacion_confi.html#organización-de-proyectos",
    "title": "2  Instalación y configuración",
    "section": "2.4 Organización de proyectos",
    "text": "2.4 Organización de proyectos\nLa organización de proyectos en RStudio es fundamental para mantener un flujo de trabajo eficiente y reproducible. A continuación, se presentan las mejores prácticas para organizar proyectos:\n\n2.4.1 Crear un proyecto en RStudio\n\nEn la barra de menú, selecciona File &gt; New Project.\nElige entre las opciones disponibles:\n\nNew Directory: Crea un proyecto desde cero en una nueva carpeta.\nExisting Directory: Convierte una carpeta existente en un proyecto de RStudio.\nVersion Control: Clona un repositorio de Git para trabajar en un proyecto versionado.\n\nConfigura el nombre y la ubicación del proyecto, y haz clic en Create Project.\n\n\n\n2.4.2 Establecer un directorio de trabajo\nEl directorio de trabajo es la carpeta donde R buscará automáticamente los archivos y guardará los resultados.\nPara establecer el directorio de trabajo, utiliza la función:\n\nsetwd(\"ruta/del/directorio\")\n\nAlternativamente, en un proyecto de RStudio, el directorio de trabajo se configura automáticamente al abrir el proyecto.\n\n\n2.4.3 Uso de archivos .Rproj\nEl archivo .Rproj es el núcleo del proyecto en RStudio. Al abrir este archivo, se cargará automáticamente el entorno de trabajo, el directorio y las configuraciones específicas del proyecto.\n\n\n2.4.4 Beneficios de la organización de proyectos\nReproducibilidad: Facilita que otros usuarios (o el propio usuario en el futuro) comprendan y reproduzcan el análisis.\nEficiencia: Reduce el tiempo perdido buscando archivos o configurando rutas manualmente.\nColaboración: Mejora la comunicación y el trabajo en equipo al mantener una estructura clara y consistente.\nPersonalizar la apariencia y organizar los proyectos en RStudio no solo mejora la comodidad visual, sino que también optimiza el flujo de trabajo, permitiendo que el usuario se enfoque en el análisis de datos de manera más eficiente y profesional.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instalación y configuración</span>"
    ]
  },
  {
    "objectID": "inicio.html#creación-de-scripts-en-rstudio",
    "href": "inicio.html#creación-de-scripts-en-rstudio",
    "title": "3  Primeros pasos en R",
    "section": "",
    "text": "Manualmente: El usuario debe desplegar la pestaña ‘File’ en la barra de opciones superior, seleccionar ‘New File’ y luego elegir ‘R Script’.\nUtilizando atajos de teclado: Se puede presionar la combinación de teclas Ctrl+Shift+N para crear un nuevo script de manera rápida.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "03_inicio.html",
    "href": "03_inicio.html",
    "title": "3  Primeros pasos en R",
    "section": "",
    "text": "3.1 Creación de scripts en RStudio\nIniciar el trabajo en R y RStudio puede parecer desafiante al principio, pero con una guía clara y organizada, el proceso se vuelve mucho más accesible. Esta sección está diseñada para acompañar al usuario en sus primeros pasos dentro de este entorno de programación, abordando desde la creación de scripts hasta la comprensión de los objetos básicos en R. Un script en RStudio no solo es un espacio para escribir código, sino también una herramienta esencial para documentar y reproducir análisis de datos de manera eficiente.\nAdemás, se explorarán las mejores prácticas para guardar y organizar archivos, lo que garantiza un flujo de trabajo ordenado y reproducible. También se introducirá el concepto de objetos en R, fundamentales para almacenar y manipular datos, junto con una descripción de los principales tipos de objetos (numéricos, texto, factores y lógicos). Este conocimiento inicial permitirá al usuario sentar las bases del conocimiento para utilizar R para realizar análisis estadístico y visualizaciones más adelante.\nPara comenzar a trabajar en RStudio, es fundamental crear un script donde se pueda escribir y guardar el código. Un script es un archivo que contiene las instrucciones que se ejecutarán en R. Existen dos métodos principales para crear un script en RStudio:\nUna vez creado, el script se convierte en un espacio de trabajo donde se desarrollarán los análisis y se documentarán los pasos realizados.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "03_inicio.html#creación-de-scripts-en-rstudio",
    "href": "03_inicio.html#creación-de-scripts-en-rstudio",
    "title": "3  Primeros pasos en R",
    "section": "",
    "text": "Manualmente: El usuario debe desplegar la pestaña ‘File’ en la barra de opciones superior, seleccionar ‘New File’ y luego elegir ‘R Script’.\nUtilizando atajos de teclado: Se puede presionar la combinación de teclas Ctrl+Shift+N para crear un nuevo script de manera rápida.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "03_inicio.html#guardado-y-organización-de-archivos",
    "href": "03_inicio.html#guardado-y-organización-de-archivos",
    "title": "3  Primeros pasos en R",
    "section": "3.2 Guardado y organización de archivos",
    "text": "3.2 Guardado y organización de archivos\nEs importante guardar el script desde el inicio para evitar la pérdida de trabajo. Para ello, se debe seleccionar la opción “Save As…” en la pestaña “File”, lo que permitirá elegir la ubicación y el nombre del archivo. Se recomienda utilizar nombres descriptivos y consistentes para facilitar la identificación de los archivos en el futuro.\nAdemás, se sugiere organizar los archivos en carpetas específicas para cada proyecto. Esto incluye para proyectos demasiado grandes separar los scripts, datos y resultados en directorios bien definidos. Si antes de crear nuestro script creamos un proyecto de R .Rproj al que ya sea le asignamos una carpeta como directorio de trabajo, al guardar nuestros scripts pertenecientes a ese proyecto lo debemos hacer en la misma carpeta donde se encuentra el archivo .Rproj.\nLa organización adecuada no solo ahorra tiempo, sino que también mejora la reproducibilidad del análisis, permitiendo que otros colaboradores o al propio usuario en el futuro entender y replicar el trabajo realizado.\n\n3.2.1 Recomendaciones para la organización de archivos\nLa organización de archivos en RStudio es fundamental para garantizar un flujo de trabajo eficiente y reproducible. Así como en una cocina bien organizada se separan los utensilios, ingredientes frescos y especias en cajones etiquetados, en RStudio es necesario establecer un sistema claro para guardar scripts, datos y resultados. Un proyecto desorganizado puede compararse con una alacena caótica: se pierde tiempo buscando archivos y se corre el riesgo de cometer errores. Para evitar estos problemas, se recomienda seguir las siguientes prácticas:\n\n3.2.1.1 Utilizar nombres descriptivos y consistentes\nEs importante asignar nombres que describan claramente el contenido del archivo y que sigan un formato uniforme. Por ejemplo:\nPara scripts: analisis1.R o 20231015_analisis_rendimiento_maiz.R.\nPara datos: datos_finales.xlsx o datos_suelo_antigua_2023.csv.\n\n\n3.2.1.2 Evitar espacios y caracteres especiales\nLos nombres de los archivos y los objetos en R no deben incluir espacios ni caracteres especiales, ya que esto puede generar problemas al trabajar con ellos en R. En su lugar, se recomienda usar guiones bajos (_) o guiones medios (-). Por ejemplo:\nEn lugar de analisis suelo.R, usar analisis_suelo.R.\n\n\n3.2.1.3 Incluir fechas en un formato estandarizado\nIncorporar fechas en los nombres de los archivos es una práctica útil para identificar rápidamente versiones o actualizaciones. Se sugiere utilizar el formato estándar YYYY-MM-DD. Por ejemplo:\n2023-10-15_importacion_datos.R.\n\n\n3.2.1.4 Crear una carpeta específica para cada proyecto\nEs recomendable organizar los archivos de cada proyecto en carpetas separadas. Esto facilita el acceso y asegura que todos los elementos relacionados con un proyecto estén agrupados en un solo lugar.\nAdoptar estas prácticas permite que cualquier colaborador, o incluso uno mismo en el futuro, pueda encontrar y comprender rápidamente los archivos necesarios. La organización no es un detalle menor, sino la base para trabajar de manera eficiente y garantizar la reproducibilidad de los análisis.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "03_inicio.html#introducción-a-los-objetos-en-r",
    "href": "03_inicio.html#introducción-a-los-objetos-en-r",
    "title": "3  Primeros pasos en R",
    "section": "3.3 Introducción a los objetos en R",
    "text": "3.3 Introducción a los objetos en R\nEn R, todo se maneja como un objeto. Un objeto es una estructura que almacena datos y tiene atributos como nombre y tipo. Los objetos son fundamentales para trabajar en R, ya que permiten almacenar y manipular información de manera eficiente.\nPara crear un objeto, se utiliza un operador de asignación, que puede ser ‘=’ o ‘&lt;-’. Sin embargo, se recomienda el uso de ‘&lt;-’ por ser el estándar en la comunidad de R. Por ejemplo, para asignar el valor 10 a un objeto llamado ‘x’, se puede escribir:\n\n# Creación del primer objeto en R\nx &lt;- 10",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "03_inicio.html#tipos-de-objetos-en-r-numéricos-texto-factores-lógicos",
    "href": "03_inicio.html#tipos-de-objetos-en-r-numéricos-texto-factores-lógicos",
    "title": "3  Primeros pasos en R",
    "section": "3.4 Tipos de objetos en R (numéricos, texto, factores, lógicos)",
    "text": "3.4 Tipos de objetos en R (numéricos, texto, factores, lógicos)\n\n3.4.1 Objetos Numéricos\nLos objetos numéricos almacenan datos como números enteros o decimales. Son útiles para representar variables cuantitativas como edad, altura o peso. Por ejemplo, se puede crear un objeto numérico de la siguiente manera:\n\n# Creación de objetos numéricos\nedad &lt;- 21 \naltura_m &lt;- 1.70 \npeso_lb &lt;- 150\n\nNota: En R, el símbolo numeral (#) se utiliza para incluir comentarios dentro del código. Las líneas que comienzan con este símbolo no son ejecutadas por el programa, ya que su propósito es servir como anotaciones que explican o documentan el código. Esto resulta especialmente útil para describir los pasos realizados, aclarar la funcionalidad de ciertas líneas o facilitar la comprensión del script a otros usuarios o al propio autor en el futuro.\n\n\n3.4.2 Objetos de Texto\nLos objetos de texto, también conocidos como objetos de tipo carácter, almacenan cadenas de texto. Estos se escriben entre comillas dobles. Por ejemplo, para almacenar el nombre y color favorito de una persona, se puede escribir el siguiente codigo:\n\n# Creación de objetos tipo carácter\nnombre &lt;- \"Juan\" \ncolor_favorito &lt;- \"azul\"\n\n\n\n3.4.3 Objetos de Tipo Factor\nLos objetos de tipo factor se utilizan para almacenar variables categóricas con niveles definidos, como escalas o categorías. Por ejemplo, para representar el estado civil y sexo de una persona, se puede escribir:\n\n# Creación de objetos tipo factor\nestado_civil &lt;- factor(\"soltero\") \nsexo &lt;- factor(\"masculino\")\n\n\n\n3.4.4 Objetos Lógicos\nLos objetos lógicos almacenan valores de tipo TRUE o FALSE, que resultan de comparaciones lógicas. Por ejemplo, para verificar si la persona del ejemplo que se esta desarrollando es mayor de edad, se puede resolver con el siguiente código:\n\n# Creación de objetos lógicos\nmayoria_de_edad &lt;- edad &gt;= 18\nmayoria_de_edad\n\n[1] TRUE\n\n\nEstos objetos son útiles para aplicar filtros y realizar análisis condicionales en los datos.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Primeros pasos en R</span>"
    ]
  },
  {
    "objectID": "datos.html#vectores",
    "href": "datos.html#vectores",
    "title": "4  Estructura de datos en R",
    "section": "",
    "text": "4.1.1 Creación de vectores\nPara crear un vector, se utiliza la función c(), donde los elementos se separan por comas. Por ejemplo:\n\n# Creación de un vector numérico\nedades &lt;- c(17, 20, 18, 25)\n\n# Creación de un vector de texto\nnombres &lt;- c(\"Juan\", \"Ana\", \"Luis\", \"María\")\n\n# Creación de un vector lógico\nmayores_de_edad &lt;- edades &gt;= 18\n\n\n\n4.1.2 Manipulación de vectores\nLos vectores permiten realizar operaciones matemáticas, lógicas y de manipulación de datos. Por ejemplo, se pueden filtrar elementos, realizar cálculos o combinar vectores. Algunas operaciones comunes incluyen:\n\nAcceso a elementos específicos: Utilizando índices entre corchetes []\n\n\n# Acceder al primer elemento del vector\nedades[1]\n\n[1] 17\n\n\n\nFiltrado de elementos: Aplicando condiciones lógicas.\n\n\n# Filtrar edades mayores a 20\nedades[edades &gt; 20]\n\n[1] 25\n\n\n\nCombinación de vectores:\n\n\n# Combinar dos vectores\nnuevo_vector &lt;- c(edades, c(22, 21))\nnuevo_vector\n\n[1] 17 20 18 25 22 21",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "datos.html#data-frames",
    "href": "datos.html#data-frames",
    "title": "4  Estructura de datos en R",
    "section": "4.2 Data frames",
    "text": "4.2 Data frames\nUn data frame es una estructura de datos tabular en R, similar a una hoja de cálculo o una tabla de base de datos. Organiza los datos en filas y columnas, donde cada columna es un vector y puede contener un tipo de dato diferente (por ejemplo, números, texto o factores). Cada fila representa una observación, y cada columna representa una variable.\nLos data frames son ideales para trabajar con datos estructurados, como encuestas, experimentos o bases de datos, ya que permiten realizar análisis estadísticos y visualizaciones de manera eficiente. Además, son compatibles con muchas funciones y paquetes en R, lo que los convierte en una de las estructuras más utilizadas.\n\n4.2.1 Creación de data frames\nPara crear un data frame, se utiliza la función data.frame(), combinando vectores de igual longitud separados por comas. Por ejemplo:\n\n# Creación de un data frame con vectores\ndatos &lt;- data.frame(nombres,  edades,  mayores_de_edad)\n\n# Visualización del data frame\ndatos\n\n  nombres edades mayores_de_edad\n1    Juan     17           FALSE\n2     Ana     20            TRUE\n3    Luis     18            TRUE\n4   María     25            TRUE\n\n\n\n\n4.2.2 Ventajas de un data frame\n\nEstructura clara: Cada fila representa una observación y cada columna una variable.\nCompatibilidad: Es compatible con funciones estadísticas y de visualización.\nFlexibilidad: Permite almacenar diferentes tipos de datos en columnas.\n\n\n\n4.2.3 Manipulación de data frames\nLos data frames pueden manipularse fácilmente utilizando funciones como filter(), select() o mutate() del paquete dplyr. También se puede acceder a columnas específicas utilizando el operador $. Por ejemplo:\n\n# Acceso a una columna\ndatos$nombres\n\n[1] \"Juan\"  \"Ana\"   \"Luis\"  \"María\"\n\n# Filtrar filas donde la edad sea mayor a 20\ndatos_filtrados &lt;- datos[datos$edades &gt; 20, ]\ndatos_filtrados\n\n  nombres edades mayores_de_edad\n4   María     25            TRUE\n\n\nLos data frames son una herramienta poderosa para organizar y analizar datos, y su versatilidad los hace indispensables en el trabajo con R.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "datos.html#listas",
    "href": "datos.html#listas",
    "title": "4  Estructura de datos en R",
    "section": "4.3 Listas",
    "text": "4.3 Listas\nLas listas son estructuras de datos más flexibles que los data frames, ya que pueden contener elementos de diferentes tipos y longitudes, como vectores, data frames, matrices o incluso funciones. Para crear una lista, se utiliza la función list():\n\n# Creación de una lista\nmi_lista &lt;- list(\n  nombres = c(\"Juan\", \"Ana\"),\n  edades = c(18, 20),\n  datos_completos = datos\n)\n\nLas listas son útiles para almacenar resultados complejos o datos heterogéneos. Los elementos de una lista pueden accederse mediante índices o nombres:\n\n# Acceso a un elemento por nombre\nmi_lista$nombres\n\n[1] \"Juan\" \"Ana\" \n\n# Acceso a un elemento por índice\nmi_lista[[1]]\n\n[1] \"Juan\" \"Ana\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "04_datos.html",
    "href": "04_datos.html",
    "title": "4  Estructura de datos en R",
    "section": "",
    "text": "4.1 Vectores\nEn R, las estructuras de datos son fundamentales para organizar, almacenar y manipular información de manera eficiente. Estas estructuras permiten trabajar con diferentes tipos de datos, desde valores individuales hasta colecciones complejas, facilitando el análisis estadístico y la visualización. Entre las principales estructuras de datos en R se encuentran los vectores, data frames y listas, cada una con características específicas que las hacen adecuadas para distintas tareas.\nUn vector es la estructura de datos más básica y fundamental en R. Es una colección ordenada de elementos del mismo tipo, como números, texto o valores lógicos. Los vectores son unidimensionales, lo que significa que los datos se almacenan en una sola fila o columna. Por ejemplo, un vector puede representar una lista de edades, nombres o resultados de un experimento.\nEn R, los vectores son esenciales porque muchas otras estructuras de datos, como los data frames, están construidas a partir de ellos. Todos los elementos de un vector deben ser del mismo tipo de dato, lo que garantiza consistencia en las operaciones realizadas sobre ellos.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "04_datos.html#vectores",
    "href": "04_datos.html#vectores",
    "title": "4  Estructura de datos en R",
    "section": "",
    "text": "4.1.1 Creación de vectores\nPara crear un vector, se utiliza la función c(), donde los elementos se separan por comas. Por ejemplo:\n\n# Creación de un vector numérico\nedades &lt;- c(17, 20, 18, 25)\n\n# Creación de un vector de texto\nnombres &lt;- c(\"Juan\", \"Ana\", \"Luis\", \"María\")\n\n# Creación de un vector lógico\nmayores_de_edad &lt;- edades &gt;= 18\n\n\n\n4.1.2 Manipulación de vectores\nLos vectores permiten realizar operaciones matemáticas, lógicas y de manipulación de datos. Por ejemplo, se pueden filtrar elementos, realizar cálculos o combinar vectores. Algunas operaciones comunes incluyen:\n\nAcceso a elementos específicos: Utilizando índices entre corchetes []\n\n\n# Acceder al primer elemento del vector\nedades[1]\n\n[1] 17\n\n\n\nFiltrado de elementos: Aplicando condiciones lógicas.\n\n\n# Filtrar edades mayores a 20\nedades[edades &gt; 20]\n\n[1] 25\n\n\n\nCombinación de vectores:\n\n\n# Combinar dos vectores\nnuevo_vector &lt;- c(edades, c(22, 21))\nnuevo_vector\n\n[1] 17 20 18 25 22 21",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "04_datos.html#data-frames",
    "href": "04_datos.html#data-frames",
    "title": "4  Estructura de datos en R",
    "section": "4.2 Data frames",
    "text": "4.2 Data frames\nUn data frame es una estructura de datos tabular en R, similar a una hoja de cálculo o una tabla de base de datos. Organiza los datos en filas y columnas, donde cada columna es un vector y puede contener un tipo de dato diferente (por ejemplo, números, texto o factores). Cada fila representa una observación, y cada columna representa una variable.\nLos data frames son ideales para trabajar con datos estructurados, como encuestas, experimentos o bases de datos, ya que permiten realizar análisis estadísticos y visualizaciones de manera eficiente. Además, son compatibles con muchas funciones y paquetes en R, lo que los convierte en una de las estructuras más utilizadas.\n\n4.2.1 Creación de data frames\nPara crear un data frame, se utiliza la función data.frame(), combinando vectores de igual longitud separados por comas. Por ejemplo:\n\n# Creación de un data frame con vectores\ndatos &lt;- data.frame(nombres,  edades,  mayores_de_edad)\n\n# Visualización del data frame\ndatos\n\n  nombres edades mayores_de_edad\n1    Juan     17           FALSE\n2     Ana     20            TRUE\n3    Luis     18            TRUE\n4   María     25            TRUE\n\n\n\n\n4.2.2 Ventajas de un data frame\n\nEstructura clara: Cada fila representa una observación y cada columna una variable.\nCompatibilidad: Es compatible con funciones estadísticas y de visualización.\nFlexibilidad: Permite almacenar diferentes tipos de datos en columnas.\n\n\n\n4.2.3 Manipulación de data frames\nLos data frames pueden manipularse fácilmente utilizando funciones como filter(), select() o mutate() del paquete dplyr. También se puede acceder a columnas específicas utilizando el operador $. Por ejemplo:\n\n# Acceso a una columna\ndatos$nombres\n\n[1] \"Juan\"  \"Ana\"   \"Luis\"  \"María\"\n\n# Filtrar filas donde la edad sea mayor a 20\ndatos_filtrados &lt;- datos[datos$edades &gt; 20, ]\ndatos_filtrados\n\n  nombres edades mayores_de_edad\n4   María     25            TRUE\n\n\nLos data frames son una herramienta poderosa para organizar y analizar datos, y su versatilidad los hace indispensables en el trabajo con R.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "04_datos.html#listas",
    "href": "04_datos.html#listas",
    "title": "4  Estructura de datos en R",
    "section": "4.3 Listas",
    "text": "4.3 Listas\nLas listas son estructuras de datos más flexibles que los data frames, ya que pueden contener elementos de diferentes tipos y longitudes, como vectores, data frames, matrices o incluso funciones. Para crear una lista, se utiliza la función list():\n\n# Creación de una lista\nmi_lista &lt;- list(\n  nombres = c(\"Juan\", \"Ana\"),\n  edades = c(18, 20),\n  datos_completos = datos\n)\n\nLas listas son útiles para almacenar resultados complejos o datos heterogéneos. Los elementos de una lista pueden accederse mediante índices o nombres:\n\n# Acceso a un elemento por nombre\nmi_lista$nombres\n\n[1] \"Juan\" \"Ana\" \n\n# Acceso a un elemento por índice\nmi_lista[[1]]\n\n[1] \"Juan\" \"Ana\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "04_datos.html#comparación-entre-data-frames-y-listas",
    "href": "04_datos.html#comparación-entre-data-frames-y-listas",
    "title": "4  Estructura de datos en R",
    "section": "4.4 Comparación entre data frames y listas",
    "text": "4.4 Comparación entre data frames y listas\n\n\n\n\n\n\n\n\nCaracterística\nData Frame\nLista\n\n\n\n\nEstructura\nTabular (filas y columnas)\nColección de objetos heterogéneos\n\n\nTipos de datos\nColumnas con tipos diferentes\nElementos de cualquier tipo\n\n\nUso principal\nAnálisis estadístico y visualización\nAlmacenamiento de resultados complejos\n\n\nAcceso a elementos\nPor columnas o índices\nPor nombres o índices\n\n\n\nAmbas estructuras son fundamentales en R, y su elección depende del tipo de datos y del análisis que se desee realizar. En análisis estadístico habitualmente se emplean los data frames para almacenar datos y las listas se emplean para almacenar los resultados de pruebas y análisis.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Estructura de datos en R</span>"
    ]
  },
  {
    "objectID": "05_importacion.html",
    "href": "05_importacion.html",
    "title": "5  Importación de datos",
    "section": "",
    "text": "5.1 Importación de archivos CSV\nLa importación de datos es uno de los primeros pasos esenciales en cualquier análisis estadístico. En R, los datos pueden provenir de diversas fuentes, como archivos CSV, Excel o incluso páginas web en formato HTML. La capacidad de importar datos de manera eficiente y reproducible permite trabajar con grandes volúmenes de información sin necesidad de manipularlos manualmente. Además, establecer un directorio de trabajo adecuado facilita la organización y asegura que los scripts sean portables y reproducibles en diferentes entornos.\nEn esta sección, se explicará cómo importar datos desde archivos CSV, Excel y HTML, así como la configuración del directorio de trabajo cuando se trabaja en un script que no pertenece a ningún proyecto .Rproj.\nLos archivos CSV (Comma-Separated Values) son una de las formas más comunes de almacenar datos tabulares. Estos archivos son ligeros, universales y fáciles de manejar en R. Para importar un archivo CSV, se utiliza la función read.csv(), que permite leer el contenido del archivo y almacenarlo como un data frame.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importación de datos</span>"
    ]
  },
  {
    "objectID": "05_importacion.html#importación-de-archivos-csv",
    "href": "05_importacion.html#importación-de-archivos-csv",
    "title": "5  Importación de datos",
    "section": "",
    "text": "5.1.1 Pasos para importar de un archivo CSV\n\n# Importar un archivo CSV\ndatos &lt;- read.csv(\"ruta/del/archivo/datos.csv\", header = TRUE, sep = \",\")\n\n# Visualizar los primeros registros del data frame\nhead(datos)\n\nheader = TRUE: Indica que el archivo tiene una fila de encabezado con los nombres de las columnas.\nsep = \",\": Especifica que los valores están separados por comas (el argumento de esta parte de la función puede variar si el archivo utiliza un separador distinto como por ejemplo “;”).\nNota: Es importante asegurarse de que el archivo esté en el directorio de trabajo o proporcionar la ruta completa.\n\n\n5.1.2 Ejemplo de importación de un archivo CSV\nEn 2002, se llevó a cabo un estudio en la Universidad de San Carlos de Guatemala, en el que se recopilaron datos de 460 estudiantes de diversas facultades. Esta base de datos, disponible para su descarga en formato CSV a través del siguiente enlace, incluye una amplia variedad de variables, lo que la convierte en un recurso ideal para los ejercicios prácticos de este manual. A lo largo del documento, se utilizará esta base de datos para aplicar las herramientas y conceptos desarrollados. Para realizar el siguiente ejemplo, es necesario que el usuario descargue el archivo y lo guarde en la carpeta correspondiente al proyecto en curso.\n\n# Importar el archivo CSV con los datos \ndatos &lt;- read.csv(\"datos_estudiantes.csv\", header = TRUE, sep = \",\")\n\n# Visualizar los primeros registros del data frame\nhead(datos)\n\nLa función head() en R se utiliza para visualizar las primeras filas de un data frame, vector, matriz u otro objeto de datos. Su propósito principal es proporcionar una vista rápida de los datos, permitiendo al usuario verificar la estructura, los nombres de las columnas y los primeros valores sin tener que imprimir todo el conjunto de datos.\nNota: En el ejemplo para importar el archivo solamente se colocó el nombre del archivo (incluyendo su extensión) sin necesidad de colocar la ruta exacta del archivo y R interpretó automáticamente que debía importar el archivo con ese nombre ubicado en la misma carpeta que el script. Esto se debe a que al estar trabajando en un proyecto con un directorio de trabajo establecido no hay necesidad de colocar la ruta de los archivos que se quieran importar siempre que estos se encuentren en la misma carpeta.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importación de datos</span>"
    ]
  },
  {
    "objectID": "05_importacion.html#importación-de-archivos-excel",
    "href": "05_importacion.html#importación-de-archivos-excel",
    "title": "5  Importación de datos",
    "section": "5.2 Importación de archivos Excel",
    "text": "5.2 Importación de archivos Excel\nLos archivos Excel son ampliamente utilizados para almacenar datos en hojas de cálculo. En R, se puede importar este tipo de archivos utilizando el paquete readxl, que permite leer datos de archivos .xlsx sin necesidad de convertirlos previamente a otro formato.\n\n5.2.1 Pasos para importar un archivo Excel\n\nInstalar y cargar el paquete readxl.\n\n\n# Instalar y cargar el paquete readxl\nif (!require(\"readxl\")) install.packages(\"readxl\")\n\nExplicación de la linea de código anterior\n\nrequire(\"nombre del paquete\"): Esta función intenta cargar el paquete especificado. Si el paquete está instalado, lo carga en la sesión actual y devuelve TRUE. Si el paquete no está instalado, devuelve FALSE.\n!require(\"nombre del paquete\"): El signo de exclamación (!) niega el resultado de la función require(). Por lo tanto, esta expresión será TRUE si el paquete no está instalado o no puede ser cargado.\nif (...) install.packages(\"nombre del paquete\"): Esta es una estructura condicional. Si la condición entre paréntesis es TRUE (es decir, si el paquete no está instalado o no puede ser cargado), entonces se ejecuta install.packages(\"nombre del paquete\"), que descarga e instala el paquete desde el repositorio de CRAN.\n\n\nImportar el archivo Excel\n\n\n# Importar un archivo Excel\ndatos_excel &lt;- read_excel(\"ruta/del/archivo/datos.xlsx\", sheet = \"Hoja1\", col_names = TRUE/FALSE)\n\n# Visualizar los primeros registros del data frame\nhead(datos_excel)\n\nExplicación de la linea de código anterior\n\nsheet = \"Hoja1\": Especifica la hoja del archivo que se desea importar.\ncol_names = TRUE/FALSE: Indica si la primera fila contiene los nombres de las columnas\n\n\n\n5.2.2 Ejemplo de importación de un archivo Excel\nEn este ejemplo, se utilizará la misma base de datos empleada en el caso de importación de archivos CSV. Esta base de datos, ahora en formato Excel, está disponible para su descarga a través de este enlace. Al igual que en el ejemplo anterior para realizar este ejemplo, es necesario que el usuario descargue el archivo y lo guarde en la carpeta correspondiente al proyecto en curso.\n\n# Instalar y cargar el paquete readxl\nif (!require(\"readxl\")) install.packages(\"readxl\")\n\n# Importar un archivo Excel\ndatos_excel &lt;- read_excel(\"datos_estudiantes_2002.xlsx\", sheet = \"datos\", col_names = TRUE)\n\n# Visualizar los primeros registros del data frame\nhead(datos_excel)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importación de datos</span>"
    ]
  },
  {
    "objectID": "05_importacion.html#configuración-del-directorio-de-trabajo",
    "href": "05_importacion.html#configuración-del-directorio-de-trabajo",
    "title": "5  Importación de datos",
    "section": "5.3 Configuración del directorio de trabajo",
    "text": "5.3 Configuración del directorio de trabajo",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importación de datos</span>"
    ]
  },
  {
    "objectID": "05_importacion.html#directorio-de-trabajo-o-working-directory",
    "href": "05_importacion.html#directorio-de-trabajo-o-working-directory",
    "title": "5  Importación de datos",
    "section": "5.3 Directorio de trabajo o Working Directory",
    "text": "5.3 Directorio de trabajo o Working Directory\nEl directorio de trabajo en R puede considerarse como el “punto de partida” en un mapa: es la carpeta donde el software buscará automáticamente los archivos necesarios (datos, scripts) y guardará los resultados generados. Cuando se trabaja con un script que no forma parte de un proyecto en RStudio, establecer un directorio de trabajo es esencial para garantizar la organización y la reproducibilidad del análisis. Si no se define correctamente, se corre el riesgo de perder tiempo buscando rutas manualmente y de que el código deje de funcionar al mover el proyecto a otra ubicación o computadora.\n\n5.3.1 Razones para establecer un directorio de trabajo\n\nReproducibilidad: Permite que el código funcione en cualquier computadora sin depender de rutas absolutas como C:/Usuario/MiPC/....\nOrganización: Reduce errores como “archivo no encontrado” al mantener todos los elementos (datos, scripts, resultados) en una estructura clara y accesible.\nEficiencia: Facilita el acceso a los archivos, ya que no es necesario escribir rutas completas, solo los nombres de los archivos.\n\n\n\n5.3.2 Configuración automática del directorio de trabajo\nCuando se trabaja con scripts independientes, se puede utilizar la siguiente línea de código para establecer automáticamente el directorio de trabajo como la carpeta donde está guardado el script:\n\n# Instalar y cargar el paquete rstudioapi\nif (!require(\"rstudioapi\")) install.packages(\"rstudioapi\")\n\n# Establecer el directorio de trabajo\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n\n5.3.2.1 Explicación del código\n\nif (...) install.packages(\"rstudioapi\") : Esta estructura condicional instala y carga el paquete rstudioapi necesario para que la linea de código que estable el directorio de trabajo pueda funcionar.\nrstudioapi::getActiveDocumentContext()$path: Obtiene la ruta completa del script actual (por ejemplo, C:/proyecto/scripts/analisis.R).\ndirname(): Extrae la carpeta que contiene el script (por ejemplo, C:/proyecto/scripts/ → C:/proyecto/).\nsetwd(): Establece esa carpeta como el directorio de trabajo.\n\n\n\n5.3.2.2 Beneficios de establecer un directorio de trabajo\n\nPortabilidad: Si se mueve toda la carpeta del proyecto a otra ubicación, el código seguirá funcionando sin necesidad de ajustes.\nAutomatización: No es necesario modificar manualmente las rutas al compartir el script con otros usuarios.\n\n\n\n5.3.2.3 Consecuencias de no establecer un directorio de trabajo\n\nErrores frecuentes: R buscará archivos en una ubicación predeterminada (como la carpeta “Documentos”), lo que puede generar errores si los datos no están allí.\nCódigo no reproducible: Si otra persona ejecuta el script, será necesario modificar manualmente todas las rutas para que funcione.\n\n📌 Recomendación: Antes de ejecutar la línea automática, es importante guardar el script, ya que R necesita conocer su ubicación para establecer el directorio de trabajo correctamente. Además, se puede verificar el directorio actual utilizando la función getwd().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importación de datos</span>"
    ]
  },
  {
    "objectID": "06_operadores.html",
    "href": "06_operadores.html",
    "title": "6  Operadores en R",
    "section": "",
    "text": "6.1 Operadores de Asignación\nEn R, los operadores son herramientas fundamentales que permiten realizar cálculos, comparaciones y manipulaciones de datos. Son el equivalente a las herramientas básicas de un taller, como destornilladores o martillos, que se combinan para construir soluciones más complejas. Los operadores en R se utilizan para realizar operaciones matemáticas, evaluar condiciones lógicas, manipular datos y realizar asignaciones. Su correcta comprensión es esencial para aprovechar al máximo las capacidades del lenguaje en el análisis estadístico y la programación.\nEn R, los operadores se clasifican en diferentes categorías según su función. A continuación, se describen los principales tipos de operadores disponibles en el lenguaje:\nLos operadores de asignación se utilizan para crear objetos y almacenar valores en ellos. En R, los operadores más comunes son &lt;- y =. Aunque ambos cumplen la misma función, el uso de &lt;- es el estándar recomendado en la comunidad de R, ya que evita conflictos con otros operadores lógicos.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "06_operadores.html#operadores-aritméticos",
    "href": "06_operadores.html#operadores-aritméticos",
    "title": "6  Operadores en R",
    "section": "6.2 Operadores aritméticos",
    "text": "6.2 Operadores aritméticos\nLos operadores aritméticos permiten realizar operaciones matemáticas básicas y avanzadas. Son fundamentales para trabajar con datos numéricos y realizar cálculos en análisis estadísticos. Estos operadores operan sobre valores numéricos y devuelven resultados numéricos.\n\n6.2.1 Lista de operadores aritméticos\n\n\n\nOperador\nAcción\nEjemplo\nResultado\n\n\n\n\n+\nSuma\n5 + 3\n8\n\n\n-\nResta\n10 - 4\n6\n\n\n*\nMultiplicación\n6 * 2\n12\n\n\n/\nDivisión\n15 / 3\n5\n\n\n^\nPotencia\n2 ^ 3\n8\n\n\n%/%\nDivisión entera\n17 %/% 5\n3\n\n\n%%\nMódulo o residuo\n17 %% 5\n2\n\n\n\n\n\n6.2.2 Ejemplo práctico\nEn este ejemplo, se observa cómo los operadores aritméticos pueden ser utilizados tanto para cálculos simples como para operaciones más específicas, como obtener el cociente y el residuo de una división. Estas operaciones son útiles en contextos como la creación de nuevas variables derivadas o el análisis de datos numéricos.\n\n# Ejemplo práctico del uso de operadores aritméticos\n# Operaciones básicas\nresultado_suma &lt;- 5 + 3        # Resultado: 8\nresultado_resta &lt;- 10 - 4      # Resultado: 6\nresultado_mult &lt;- 6 * 2        # Resultado: 12\nresultado_div &lt;- 15 / 3        # Resultado: 5\nresultado_pot &lt;- 2 ^ 3         # Resultado: 8\n\n# División entera y residuo\ncociente &lt;- 17 %/% 5           # Resultado: 3\nresiduo &lt;- 17 %% 5             # Resultado: 2",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "06_operadores.html#operadores-lógicos",
    "href": "06_operadores.html#operadores-lógicos",
    "title": "6  Operadores en R",
    "section": "6.3 Operadores lógicos",
    "text": "6.3 Operadores lógicos\nLos operadores lógicos permiten realizar comparaciones y evaluaciones condicionales. Son esenciales para la toma de decisiones en el código, como filtrar datos o establecer reglas condicionales. Estos operadores trabajan con valores lógicos (TRUE o FALSE) y se utilizan para evaluar condiciones.\n\n6.3.1 Lista de operadores lógicos\n\n\n\n\n\n\n\n\n\nOperador\nAcción\nEjemplo\nResultado\n\n\n\n\n&gt;\nMayor que\n5 &gt; 3\nTRUE\n\n\n&lt;\nMenor que\n5 &lt; 3\nFALSE\n\n\n&gt;=\nMayor o igual que\n5 &gt;= 5\nTRUE\n\n\n&lt;=\nMenor o igual que\n5 &lt;= 4\nFALSE\n\n\n==\nIgualdad\n5 == 5\nTRUE\n\n\n!=\nDesigualdad\n5 != 3\nTRUE\n\n\n&\nY lógico (AND)\n(5 &gt; 3) & (4 &gt; 2)\nTRUE\n\n\n`\nO lógico (OR)\n(4 &lt;``` 2) (5 &gt; 3) `|TRUE| |!| Negación lógica   |!(5 &gt; 3)|FALSE`\n\n\n\n\n\n\n6.3.2 Ejemplo práctico\n\n# Ejemplo práctico del uso de operadores lógicos\n# Comparaciones simples\nedad &lt;- 25\nes_mayor &lt;- edad &gt; 18                # Resultado: TRUE\nes_menor &lt;- edad &lt; 30                # Resultado: TRUE\nes_igual &lt;- edad == 25               # Resultado: TRUE\nes_diferente &lt;- edad != 20           # Resultado: TRUE\n\n# Operaciones lógicas compuestas\npeso_Kg &lt;- 70\naltura &lt;- 1.75\nimc &lt;- peso_Kg / (altura^2)\n\nsobrepeso &lt;- imc &gt;= 25 & imc &lt; 30    # Evaluación de sobrepeso\npeso_normal &lt;- imc &gt;= 18.5 & imc &lt; 25 # Evaluación de peso normal\n\nEn este ejemplo, se observa cómo los operadores lógicos pueden ser utilizados para evaluar condiciones simples y compuestas. Por ejemplo, se calcula el índice de masa corporal (IMC) y se evalúa si el valor corresponde a un rango de peso normal o sobrepeso.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "06_operadores.html#operadores-de-asignación",
    "href": "06_operadores.html#operadores-de-asignación",
    "title": "6  Operadores en R",
    "section": "",
    "text": "6.1.1 Ejemplo práctico\n\n# Asignación de valores a objetos\nx &lt;- 10          # Asignar el valor 10 al objeto x\ny = 20           # Asignar el valor 20 al objeto y (menos recomendado)\n\n# Uso de objetos\nsuma &lt;- x + y    # Resultado: 30\n\nNota: Aunque = puede ser utilizado para asignar valores, su uso no es recomendado en contextos profesionales debido a posibles confusiones con el operador lógico de igualdad (==).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "06_operadores.html#operadores-de-manipulación-de-datos",
    "href": "06_operadores.html#operadores-de-manipulación-de-datos",
    "title": "6  Operadores en R",
    "section": "6.4 Operadores de Manipulación de Datos",
    "text": "6.4 Operadores de Manipulación de Datos\nLos operadores de manipulación de datos permiten acceder, seleccionar y modificar elementos dentro de estructuras de datos como vectores, listas o data frames. Estos operadores son esenciales para trabajar con datos organizados y realizar análisis estadísticos.\n\n6.4.1 Principales operadores de manipulación de datos\n\n\n\n\n\n\n\n\n\nOperador\nAcción\nEjemplo\nResultado\n\n\n\n\n[]\nAcceso a elementos por posición\nvector[1]\nPrimer elemento del vector\n\n\n[ , ]\nAcceso a filas y columnas en un data frame\ndata[1, 2]\nElemento en la fila 1, columna 2\n\n\n$\nAcceso a una columna específica en un data frame\ndata$columna\nColumna seleccionada\n\n\n:\nCreación de secuencias\n1:10\nSecuencia del 1 al 10\n\n\n\n\n\n6.4.2 Ejemplo práctico\n\n# Crear un vector\nvector &lt;- c(10, 20, 30, 40, 50)\n\n# Acceder al primer elemento\nprimer_elemento &lt;- vector[1]       # Resultado: 10\n\n# Crear un data frame\ndata &lt;- data.frame(\n  nombre = c(\"Juan\", \"Ana\", \"Luis\"),\n  edad = c(25, 30, 22),\n  peso = c(70, 65, 80)\n)\n\n# Acceder a una columna\ncolumna_edad &lt;- data$edad      # Resultado: c(25, 30, 22)\n\n# Acceder a un elemento específico\nelemento &lt;- data[2, 3]       # Resultado: 65 (peso de Ana)\n\nEn este ejemplo, se observa cómo los operadores de manipulación de datos permiten acceder a elementos específicos dentro de estructuras de datos. Esto es especialmente útil para filtrar, transformar y analizar datos en R.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  }
]